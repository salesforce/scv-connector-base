{"version":3,"sources":["webpack://SCVConnectorBase/webpack/universalModuleDefinition","webpack://SCVConnectorBase/webpack/bootstrap","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/defineProperty.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/regenerator/index.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/typeof.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/asyncToGenerator.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/createClass.js","webpack://SCVConnectorBase/./node_modules/regenerator-runtime/runtime.js","webpack://SCVConnectorBase/./src/main/constants.js","webpack://SCVConnectorBase/./src/main/types.js","webpack://SCVConnectorBase/./src/main/mosUtil.js","webpack://SCVConnectorBase/./src/main/baseConnector.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","instance","Constructor","TypeError","obj","configurable","writable","_typeof","iterator","constructor","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","error","done","Promise","then","fn","self","args","arguments","apply","err","undefined","_defineProperties","target","props","length","descriptor","protoProps","staticProps","runtime","Op","hasOwn","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","context","Context","_invoke","state","method","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","makeInvokeMethod","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","invoke","result","__await","unwrapped","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","iter","toString","keys","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function","MESSAGE_TYPE","SETUP_CONNECTOR","CONNECTOR_READY","LOG","TELEPHONY_EVENT_DISPATCHED","ACCEPT_CALL","DECLINE_CALL","END_CALL","MUTE","UNMUTE","HOLD","RESUME","SET_AGENT_STATUS","DIAL","SEND_DIGITS","GET_PHONE_CONTACTS","SWAP_PARTICIPANTS","ADD_PARTICIPANT","CONFERENCE","PAUSE_RECORDING","RESUME_RECORDING","LOGOUT","MESSAGE","WRAP_UP_CALL","AGENT_AVAILABLE","SET_AGENT_CONFIG","GET_SIGNED_RECORDING_URL","DOWNLOAD_VENDOR_LOGS","EVENT_TYPE","QUEUED_CALL_STARTED","CALL_STARTED","CALL_CONNECTED","CALL_FAILED","MUTE_TOGGLE","HOLD_TOGGLE","HANGUP","ERROR","PHONE_CONTACTS","PARTICIPANT_ADDED","PARTICIPANT_CONNECTED","PARTICIPANT_REMOVED","LOGIN_STARTED","LOGIN_RESULT","LOGOUT_RESULT","RECORDING_TOGGLE","PARTICIPANTS_SWAPPED","PARTICIPANTS_CONFERENCED","SHOW_LOGIN","SET_AGENT_STATUS_RESULT","WRAP_UP_ENDED","AFTER_CALL_WORK_STARTED","AGENT_CONFIG_UPDATED","AGENT_ERROR","SOFTPHONE_ERROR","SIGNED_RECORDING_URL","UPDATE_AUDIO_STATS","UPDATE_AUDIO_STATS_COMPLETED","ERROR_TYPE","GENERIC_ERROR","MICROPHONE_NOT_SHARED","UNSUPPORTED_BROWSER","AUTHENTICATION_ERROR","INVALID_AGENT_STATUS","CAN_NOT_SET_AGENT_STATUS","LOGIN_REQUIRED","CAN_NOT_ACCEPT_THE_CALL","CAN_NOT_DECLINE_THE_CALL","CAN_NOT_END_THE_CALL","CAN_NOT_HOLD_CALL","CAN_NOT_RESUME_CALL","CAN_NOT_MUTE_CALL","CAN_NOT_UNMUTE_CALL","CAN_NOT_TOGGLE_MUTE","CAN_NOT_TOGGLE_HOLD","CAN_NOT_TOGGLE_RECORD","INVALID_PARTICIPANT","CAN_NOT_LOG_IN","CAN_NOT_LOG_OUT","INVALID_PARAMS","CAN_NOT_GET_PHONE_CONTACTS","CAN_NOT_SWAP_PARTICIPANTS","CAN_NOT_CONFERENCE","INVALID_DESTINATION","INVALID_PHONE_NUMBER","CAN_NOT_HANGUP_PARTICIPANT","CAN_NOT_ADD_PARTICIPANT","CAN_NOT_CONNECT_PARTICIPANT","CAN_NOT_START_THE_CALL","CAN_NOT_PAUSE_RECORDING","CAN_NOT_RESUME_RECORDING","CAN_NOT_SET_AGENT_CONFIG","CAN_NOT_UPDATE_PHONE_NUMBER","CAN_NOT_GET_SIGNED_RECORDING_URL","AGENT_STATUS","ONLINE","OFFLINE","ACW","CALLBACK_MISSED_OR_REJECTED","PARTICIPANT_TYPE","AGENT","INITIAL_CALLER","THIRD_PARTY","CALL_TYPE","INBOUND","OUTBOUND","CALLBACK","CONTACT_TYPE","PHONEBOOK","QUEUE","PHONENUMBER","AGENT_CONFIG_TYPE","SHOW_AGENT_SETTINGS","RECORD","MERGE","SWAP","PHONES","SELECTED_PHONE","DEBUG_ENABLED","CONTACT_SEARCH","VENDOR_PROVIDED_AVAILABILITY","CALL_STATE","RINGING","CONNECTED","TRANSFERRING","TRANSFERRED","ENDED","PHONE_TYPE","DESK_PHONE","SOFT_PHONE","HANGUP_REASON","PHONE_CALL_ERROR","PHONE_CALL_ENDED","AGENT_AVAILABILITY","AVAILABLE","BUSY","audioStatus","channelPort","vendorConnector","Constants","constants","Phone","number","Validator","validateEnum","validateString","MuteToggleResult","isMuted","ActiveCallsResult","activeCalls","activeCall","validateClassObject","PhoneCall","AgentConfigResult","hasMute","hasRecord","hasMerge","hasSwap","hasSignedRecordingUrl","phones","selectedPhone","debugEnabled","hasContactSearch","hasAgentAvailability","supportsMos","validateBoolean","Array","AgentConfig","RecordingToggleResult","isRecordingPaused","contactId","initialContactId","instanceId","region","ParticipantResult","initialCallHasEnded","callInfo","phoneNumber","callId","CallInfo","PhoneContactsResult","contacts","contact","Contact","CallResult","HangupResult","calls","HoldToggleResult","isThirdPartyOnHold","isCustomerOnHold","SignedRecordingUrlResult","success","url","duration","validateNumber","InitResult","showLogin","loginFrameHeight","GenericResult","LogoutResult","callStateTimestamp","isOnHold","initialCallId","isSoftphoneCall","acceptEnabled","declineEnabled","muteEnabled","swapEnabled","conferenceEnabled","holdEnabled","recordEnabled","addCallerEnabled","extensionEnabled","isReplayable","validateDate","id","prefix","extension","endpointARN","queue","availability","PhoneCallAttributes","voiceCallId","participantType","parentId","callType","callAttributes","reason","closeCallOnError","agentStatus","VendorConnector","config","statusInfo","digits","call1","call2","message","recordingUrl","vendorCallKey","logLevel","payload","enumValues","RegExp","join","test","JSON","stringify","Date","className","AgentStatusInfo","statusId","statusApiName","statusName","AudioStats","stats","isAudioStatsCompleted","audioStatsElement","AudioStatsElement","inputChannelStats","outputChannelStats","StatsInfo","packetsCount","packetsLost","jitterBufferMillis","roundTripTimeMillis","statsCount","getMOSByStream","streamType","avgStats","getAvgStats","effectiveLatency","R","enableMos","getMOS","inputChannelMOS","ouputChannelMOS","Math","min","initAudioStats","updateAudioStats","statsArray","getErrorType","e","getErrorMessage","dispatchEventLog","eventType","isError","sanitizedPayload","sanitizePayload","isArray","element","postMessage","dispatchEvent","registerLog","telephonyEventType","telephonyEventPayload","dispatchError","errorType","console","setConnectorReady","a","getAgentConfig","agentConfigResult","getActiveCalls","activeCallsResult","agentConfig","callInProgress","channelMessageHandler","data","toLowerCase","acceptCall","declineCall","endCall","mute","publishEvent","unmute","hold","resume","setAgentStatus","dial","sendDigits","getPhoneContacts","filter","map","swap","callToHold","callToResume","conference","addParticipant","pauseRecording","resumeRecording","logout","handleMessage","wrapUpCall","isAvailable","isReplayedCall","setAgentConfig","getSignedRecordingUrl","signedRecordingUrlResult","downloadLogs","logMessage","logMessageToVendor","windowMessageHandler","sfDomain","originUrl","URL","origin","protocol","hostname","ports","onmessage","init","connectorConfig","window","removeEventListener","validatePayload","payloadType","initializeConnector","connector","addEventListener","publishLog","publishError","REMOTE_CONTROLLER","transferCall","mos"],"mappings":"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","file":"scv_connector_base.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SCVConnectorBase\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SCVConnectorBase\"] = factory();\n\telse\n\t\troot[\"SCVConnectorBase\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","module.exports = require(\"regenerator-runtime\");\n","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n\n    module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n\n    module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nexport default {\n    MESSAGE_TYPE: {\n        // Framework Message Types\n        SETUP_CONNECTOR: 'SETUP_CONNECTOR',\n        CONNECTOR_READY: 'CONNECTOR_READY',\n\n        // Telephony Message Types: sent from SFDC to Telephony Vendor\n        LOG: 'LOG',\n        TELEPHONY_EVENT_DISPATCHED: 'TELEPHONY_EVENT_DISPATCHED',\n        ACCEPT_CALL: 'ACCEPT_CALL',\n        DECLINE_CALL: 'DECLINE_CALL',\n        END_CALL: 'END_CALL',\n        MUTE: 'MUTE',\n        UNMUTE: 'UNMUTE',\n        HOLD: 'HOLD',\n        RESUME: 'RESUME',\n        SET_AGENT_STATUS: 'SET_AGENT_STATUS',\n        DIAL: 'DIAL',\n        SEND_DIGITS: 'SEND_DIGITS',\n        GET_PHONE_CONTACTS: 'GET_PHONE_CONTACTS',\n        SWAP_PARTICIPANTS: 'SWAP_PARTICIPANTS',\n        ADD_PARTICIPANT: 'ADD_PARTICIPANT',\n        CONFERENCE: 'CONFERENCE',\n        PAUSE_RECORDING: 'PAUSE_RECORDING',\n        RESUME_RECORDING: 'RESUME_RECORDING',\n        LOGOUT: 'LOGOUT',\n        MESSAGE: 'MESSAGE',\n        WRAP_UP_CALL: 'WRAP_UP_CALL',\n        AGENT_AVAILABLE: 'AGENT_AVAILABLE',\n        SET_AGENT_CONFIG: 'SET_AGENT_CONFIG',\n        GET_SIGNED_RECORDING_URL: 'GET_SIGNED_RECORDING_URL',\n        DOWNLOAD_VENDOR_LOGS: 'DOWNLOAD_VENDOR_LOGS'\n    },\n    EVENT_TYPE: {\n        QUEUED_CALL_STARTED: 'QUEUED_CALL_STARTED',\n        CALL_STARTED: 'CALL_STARTED',\n        CALL_CONNECTED: 'CALL_CONNECTED',\n        CALL_FAILED: 'CALL_FAILED',\n        MUTE_TOGGLE: 'MUTE_TOGGLE',\n        HOLD_TOGGLE: 'HOLD_TOGGLE',\n        HANGUP: 'HANGUP',\n        ERROR: 'ERROR',\n        PHONE_CONTACTS: 'PHONE_CONTACTS',\n        PARTICIPANT_ADDED: 'PARTICIPANT_ADDED',\n        PARTICIPANT_CONNECTED: 'PARTICIPANT_CONNECTED',\n        PARTICIPANT_REMOVED: 'PARTICIPANT_REMOVED',\n        LOGIN_STARTED: 'LOGIN_STARTED',\n        LOGIN_RESULT: 'LOGIN_RESULT', // info about timeout, error, success etc\n        LOGOUT_RESULT: 'LOGOUT_RESULT',\n        RECORDING_TOGGLE: 'RECORDING_TOGGLE',\n        PARTICIPANTS_SWAPPED: 'PARTICIPANTS_SWAPPED',\n        PARTICIPANTS_CONFERENCED: 'PARTICIPANTS_CONFERENCED',\n        SHOW_LOGIN: 'SHOW_LOGIN',\n        SET_AGENT_STATUS_RESULT: 'SET_AGENT_STATUS_RESULT',\n        WRAP_UP_ENDED: 'WRAP_UP_ENDED',\n        MESSAGE: 'MESSAGE',\n        AFTER_CALL_WORK_STARTED: 'AFTER_CALL_WORK_STARTED',\n        AGENT_CONFIG_UPDATED: 'AGENT_CONFIG_UPDATED',\n        AGENT_ERROR: 'AGENT_ERROR',\n        SOFTPHONE_ERROR: 'SOFTPHONE_ERROR',\n        SIGNED_RECORDING_URL: 'SIGNED_RECORDING_URL',\n        UPDATE_AUDIO_STATS: 'UPDATE_AUDIO_STATS',\n        UPDATE_AUDIO_STATS_COMPLETED: 'UPDATE_AUDIO_STATS_COMPLETED'\n    },\n    ERROR_TYPE: {\n        GENERIC_ERROR: 'GENERIC_ERROR',\n        AGENT_ERROR: 'AGENT_ERROR',\n        MICROPHONE_NOT_SHARED: 'MICROPHONE_NOT_SHARED',\n        UNSUPPORTED_BROWSER: 'UNSUPPORTED_BROWSER',\n        AUTHENTICATION_ERROR: 'AUTHENTICATION_ERROR',\n        INVALID_AGENT_STATUS: 'INVALID_AGENT_STATUS',\n        CAN_NOT_SET_AGENT_STATUS: 'CAN_NOT_SET_AGENT_STATUS',\n        LOGIN_REQUIRED: 'LOGIN_REQUIRED',\n        CAN_NOT_ACCEPT_THE_CALL: 'CAN_NOT_ACCEPT_THE_CALL',\n        CAN_NOT_DECLINE_THE_CALL: 'CAN_NOT_DECLINE_THE_CALL',\n        CAN_NOT_END_THE_CALL: 'CAN_NOT_END_THE_CALL',\n        CAN_NOT_HOLD_CALL: 'CAN_NOT_HOLD_CALL',\n        CAN_NOT_RESUME_CALL: 'CAN_NOT_RESUME_CALL',\n        CAN_NOT_MUTE_CALL: 'CAN_NOT_MUTE_CALL',\n        CAN_NOT_UNMUTE_CALL: 'CAN_NOT_UNMUTE_CALL',\n        CAN_NOT_TOGGLE_MUTE: 'CAN_NOT_TOGGLE_MUTE',\n        CAN_NOT_TOGGLE_HOLD: 'CAN_NOT_TOGGLE_HOLD',\n        CAN_NOT_TOGGLE_RECORD: 'CAN_NOT_TOGGLE_RECORD',\n        INVALID_PARTICIPANT: 'INVALID_PARTICIPANT',\n        CAN_NOT_LOG_IN: 'CAN_NOT_LOG_IN',\n        CAN_NOT_LOG_OUT: 'CAN_NOT_LOG_OUT',\n        INVALID_PARAMS: 'INVALID_PARAMS',\n        CAN_NOT_GET_PHONE_CONTACTS: 'CAN_NOT_GET_PHONE_CONTACTS',\n        CAN_NOT_SWAP_PARTICIPANTS: 'CAN_NOT_SWAP_PARTICIPANTS',\n        CAN_NOT_CONFERENCE: 'CAN_NOT_CONFERENCE',\n        INVALID_DESTINATION: 'INVALID_DESTINATION',\n        INVALID_PHONE_NUMBER: 'INVALID_PHONE_NUMBER',\n        CAN_NOT_HANGUP_PARTICIPANT: 'CAN_NOT_HANGUP_PARTICIPANT',\n        CAN_NOT_ADD_PARTICIPANT: 'CAN_NOT_ADD_PARTICIPANT',\n        CAN_NOT_CONNECT_PARTICIPANT: 'CAN_NOT_CONNECT_PARTICIPANT',\n        CAN_NOT_START_THE_CALL: 'CAN_NOT_START_THE_CALL',\n        CAN_NOT_PAUSE_RECORDING: 'CAN_NOT_PAUSE_RECORDING',\n        CAN_NOT_RESUME_RECORDING: 'CAN_NOT_RESUME_RECORDING',\n        CAN_NOT_SET_AGENT_CONFIG: 'CAN_NOT_SET_AGENT_CONFIG',\n        CAN_NOT_UPDATE_PHONE_NUMBER: 'CAN_NOT_UPDATE_PHONE_NUMBER',\n        CAN_NOT_GET_SIGNED_RECORDING_URL: 'CAN_NOT_GET_SIGNED_RECORDING_URL'\n    },\n    AGENT_STATUS: {\n        ONLINE: 'Online',\n        OFFLINE: 'Offline',\n        ACW : 'AfterCallWork',\n        CALLBACK_MISSED_OR_REJECTED: 'CallbackMissedOrRejected' // Used only for Amazon; workaround for https://github.com/amazon-connect/amazon-connect-streams/issues/344\n    },\n    PARTICIPANT_TYPE: {\n        AGENT: 'Agent',\n        INITIAL_CALLER: 'Initial_Caller',\n        THIRD_PARTY: 'Third_Party'\n    },\n    CALL_TYPE: {\n        INBOUND: 'Inbound',\n        OUTBOUND: 'Outbound',\n        CALLBACK: 'Callback',\n        ADD_PARTICIPANT: 'AddParticipant'\n    },\n    CONTACT_TYPE: {\n        PHONEBOOK: 'PhoneBook',\n        QUEUE: 'Queue',\n        PHONENUMBER: 'PhoneNumber',\n        AGENT: 'Agent'\n    },\n    AGENT_CONFIG_TYPE: {\n        SHOW_AGENT_SETTINGS: 'SHOW_AGENT_SETTINGS',\n        MUTE: 'MUTE',\n        RECORD: 'RECORD',\n        MERGE: 'MERGE',\n        SWAP: 'SWAP',\n        PHONES: 'PHONES',\n        SELECTED_PHONE: 'SELECTED_PHONE',\n        SIGNED_RECORDING_URL: 'SIGNED_RECORDING_URL',\n        DEBUG_ENABLED: 'DEBUG_ENABLED',\n        CONTACT_SEARCH: 'CONTACT_SEARCH',\n        VENDOR_PROVIDED_AVAILABILITY: 'VENDOR_PROVIDED_AVAILABILITY'\n    },\n    CALL_STATE: {\n        RINGING: 'ringing',\n        CONNECTED: 'connected',\n        TRANSFERRING: 'transferring',\n        TRANSFERRED: 'transferred',\n        ENDED: 'ended'\n    },\n    PHONE_TYPE: {\n        DESK_PHONE: 'DESK_PHONE',\n        SOFT_PHONE: 'SOFT_PHONE'\n    },\n    HANGUP_REASON: {\n        PHONE_CALL_ERROR: \"error\",\n        PHONE_CALL_ENDED: \"ended\"\n    },\n    AGENT_AVAILABILITY: {\n        AVAILABLE: \"AVAILABLE\",\n        BUSY: \"BUSY\",\n        OFFLINE: \"OFFLINE\"\n    }\n}\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/* eslint-disable no-unused-vars */\nimport constants from './constants.js';\n\nexport const Constants = {\n    EVENT_TYPE: {\n        LOGIN_RESULT: constants.EVENT_TYPE.LOGIN_RESULT,\n        LOGOUT_RESULT: constants.EVENT_TYPE.LOGOUT_RESULT,\n        CALL_STARTED: constants.EVENT_TYPE.CALL_STARTED,\n        QUEUED_CALL_STARTED: constants.EVENT_TYPE.QUEUED_CALL_STARTED,\n        CALL_CONNECTED: constants.EVENT_TYPE.CALL_CONNECTED,\n        HANGUP: constants.EVENT_TYPE.HANGUP,\n        MUTE_TOGGLE: constants.EVENT_TYPE.MUTE_TOGGLE,\n        HOLD_TOGGLE: constants.EVENT_TYPE.HOLD_TOGGLE,\n        RECORDING_TOGGLE: constants.EVENT_TYPE.RECORDING_TOGGLE,\n        PARTICIPANTS_SWAPPED: constants.EVENT_TYPE.PARTICIPANTS_SWAPPED,\n        PARTICIPANTS_CONFERENCED: constants.EVENT_TYPE.PARTICIPANTS_CONFERENCED,\n        PARTICIPANT_ADDED: constants.EVENT_TYPE.PARTICIPANT_ADDED, \n        PARTICIPANT_CONNECTED: constants.EVENT_TYPE.PARTICIPANT_CONNECTED,\n        PARTICIPANT_REMOVED: constants.EVENT_TYPE.PARTICIPANT_REMOVED,\n        MESSAGE: constants.EVENT_TYPE.MESSAGE,\n        AFTER_CALL_WORK_STARTED: constants.EVENT_TYPE.AFTER_CALL_WORK_STARTED,\n        WRAP_UP_ENDED: constants.EVENT_TYPE.WRAP_UP_ENDED,\n        AGENT_ERROR: constants.EVENT_TYPE.AGENT_ERROR,\n        SOFTPHONE_ERROR: constants.EVENT_TYPE.SOFTPHONE_ERROR,\n        UPDATE_AUDIO_STATS: constants.EVENT_TYPE.UPDATE_AUDIO_STATS\n    },\n    /**\n    * @enum {string}\n    */\n    ERROR_TYPE: {\n        GENERIC_ERROR: constants.ERROR_TYPE.GENERIC_ERROR,\n        INVALID_PARTICIPANT: constants.ERROR_TYPE.INVALID_PARTICIPANT,\n        INVALID_DESTINATION: constants.ERROR_TYPE.INVALID_DESTINATION,\n        INVALID_PARAMS: constants.ERROR_TYPE.INVALID_PARAMS,\n        INVALID_AGENT_STATUS: constants.ERROR_TYPE.INVALID_AGENT_STATUS,\n        CAN_NOT_UPDATE_PHONE_NUMBER: constants.ERROR_TYPE.CAN_NOT_UPDATE_PHONE_NUMBER\n    },\n    /**\n    * @enum {string}\n    */\n    AGENT_STATUS: { ...constants.AGENT_STATUS },\n    /**\n    * @enum {string}\n    */\n    PARTICIPANT_TYPE: { ...constants.PARTICIPANT_TYPE },\n    /**\n    * @enum {string}\n    */\n    CALL_TYPE: { ...constants.CALL_TYPE },\n    /**\n    * @enum {string}\n    */\n    CONTACT_TYPE: { ...constants.CONTACT_TYPE },\n    /**\n    * @enum {string}\n    */\n    CALL_STATE: { ...constants.CALL_STATE },\n    /**\n    * @enum {string}\n    */\n    HANGUP_REASON: { ...constants.HANGUP_REASON },\n    /**\n    * @enum {string}\n    */\n    PHONE_TYPE: { ...constants.PHONE_TYPE },\n    /**\n     * @enum {String}\n     */\n    AGENT_AVAILABILITY: { ...constants.AGENT_AVAILABILITY }\n};\n\n/**\n * Class representing a Phone type\n */\n export class Phone {\n    /**\n     * Create Phone\n     * @param {object} param\n     * @param {PHONE_TYPE} param.type\n     * @param {string} [param.number]\n     */\n    constructor({ type, number}) {\n        Validator.validateEnum(type, Object.values(constants.PHONE_TYPE));\n        if(number) {\n            Validator.validateString(number);\n        }\n        this.type = type;\n        this.number = number;\n    }\n}\n\n/**\n * Class representing result type for mute() & unmute()\n */\nexport class MuteToggleResult {\n    /**\n     * Create ActiveCallsResult\n     * @param {object} param\n     * @param {boolean} param.isMuted\n     */\n    constructor({ isMuted }) {\n        this.isMuted = isMuted;\n    }\n}\n\n/**\n * Class representing result type for getActiveCalls()\n */\nexport class ActiveCallsResult {\n    /**\n     * Create ActiveCallsResult\n     * @param {object} param\n     * @param {PhoneCall[]} [param.activeCalls]\n     */\n    constructor({ activeCalls = [] }) {\n        if (activeCalls.length > 0) {\n            activeCalls.forEach(activeCall => {\n                Validator.validateClassObject(activeCall, PhoneCall);\n            });\n        }\n        this.activeCalls = activeCalls;\n    }\n}\n/**\n * Class representing result type for getAgentConfig()\n */\nexport class AgentConfigResult {\n    /**\n     * Create AgentConfigResult\n     * @param {object} param\n     * @param {boolean} [param.hasMute]\n     * @param {boolean} [param.hasRecord]\n     * @param {boolean} [param.hasMerge]\n     * @param {boolean} [param.hasSwap]\n     * @param {boolean} [param.hasSignedRecordingUrl]\n     * @param {Phone[]} [param.phones]\n     * @param {string} [param.selectedPhone]\n     * @param {boolean} [param.debugEnabled]\n     * @param {boolean} [param.hasContactSearch] True if getPhoneContacts uses the 'contain' filter\n     * @param {boolean} [param.hasAgentAvailability] True if getPhoneContacts also provides agent availability\n     * @param {boolean} [param.supportsMos] True if vendor support MOS\n     */\n    constructor({ hasMute = true, hasRecord = true, hasMerge = true, hasSwap = true, hasSignedRecordingUrl = false, phones = [], selectedPhone, debugEnabled = false, hasContactSearch = false, hasAgentAvailability = false, supportsMos = false }) {\n        Validator.validateBoolean(hasMute);\n        Validator.validateBoolean(hasRecord);\n        Validator.validateBoolean(hasMerge);\n        Validator.validateBoolean(hasSwap);\n        Validator.validateBoolean(hasSignedRecordingUrl);\n        Validator.validateClassObject(phones, Array);\n        Validator.validateBoolean(debugEnabled);\n        if(selectedPhone) {\n            Validator.validateClassObject(selectedPhone, Phone);\n        }\n        Validator.validateBoolean(hasContactSearch);\n        Validator.validateBoolean(hasAgentAvailability);\n        Validator.validateBoolean(supportsMos);\n\n        this.hasMute = hasMute;\n        this.hasRecord = hasRecord;\n        this.hasMerge = hasMerge;\n        this.hasSwap = hasSwap;\n        this.hasSignedRecordingUrl = hasSignedRecordingUrl;\n        this.phones = phones;\n        this.selectedPhone = selectedPhone;\n        this.debugEnabled = debugEnabled;\n        this.hasContactSearch = hasContactSearch;\n        this.hasAgentAvailability = hasAgentAvailability;\n        this.supportsMos = supportsMos;\n    }\n}\n\n/**\n * Class representing AgentConfig type for setAgentConfig()\n */\nexport class AgentConfig {\n    /**\n     * Create AgentConfig\n     * @param {object} param\n     * @param {Phone} [param.selectedPhone]\n     */\n    constructor({ selectedPhone }) {\n        Validator.validateClassObject(selectedPhone, Phone);\n        this.selectedPhone = selectedPhone;\n    }\n}\n\n/**\n * Class representing result type for pauseRecording() & resumeRecording\n */\nexport class RecordingToggleResult {\n    /**\n     * Create RecordingToggleResult\n     * @param {object} param\n     * @param {boolean} param.isRecordingPaused\n     * @param {string} [param.contactId]\n     * @param {string} [param.initialContactId]\n     * @param {string} [param.instanceId]\n     * @param {string} [param.region]\n     */\n    constructor({ isRecordingPaused, contactId = null, initialContactId = null, instanceId = null, region = null }) {\n        this.isRecordingPaused = isRecordingPaused;\n        this.contactId = contactId;\n        this.initialContactId = initialContactId;\n        this.instanceId = instanceId;\n        this.region = region;\n    }\n}\n\n/**\n * Class representing result type for addParticipant()\n */\nexport class ParticipantResult {\n    /**\n     * Create ParticipantResult\n     * @param {object} param\n     * @param {boolean} param.initialCallHasEnded\n     * @param {CallInfo} param.callInfo\n     * @param {string} param.phoneNumber\n     * @param {string} param.callId\n     */\n    constructor({ initialCallHasEnded, callInfo, phoneNumber, callId }) {\n        Validator.validateClassObject(callInfo, CallInfo);\n        this.initialCallHasEnded = initialCallHasEnded;\n        this.callInfo = callInfo;\n        this.phoneNumber = phoneNumber;\n        this.callId = callId;\n    }\n}\n\n/**\n * Class representing result type for getPhoneContacts()\n */\nexport class PhoneContactsResult {\n    /**\n     * Create PhoneContactsResult\n     * @param {object} param\n     * @param {Contact[]} [param.contacts]\n     */\n    constructor({ contacts = [] }) {\n        if (contacts.length > 0) {\n            contacts.forEach(contact => {\n                Validator.validateClassObject(contact, Contact);\n            });\n        }\n        this.contacts = contacts;\n    }\n}\n\n/**\n * Class representing result type for accept(), decline(), dial()\n */\nexport class CallResult {\n    /**\n     * Create CallResult\n     * @param {object} param\n     * @param {PhoneCall} [param.call]\n     */\n    constructor({ call }) {\n        if (call !== undefined) {\n            Validator.validateClassObject(call, PhoneCall);\n        }\n        this.call = call;\n    }\n}\n\n/**\n * Class representing result type for endCall(), hangup()\n */\nexport class HangupResult {\n    /**\n     * Create CallResult\n     * @param {object} param\n     * @param {PhoneCall[]|PhoneCall} param.calls - one or more calls (can be multiple calls in case of agent endcall/hangup)\n     */\n    constructor({ calls }) {\n        if (calls instanceof Array) {\n            calls.forEach(call => Validator.validateClassObject(call, PhoneCall));\n            this.calls = calls;\n        } else {\n            Validator.validateClassObject(calls, PhoneCall);\n            this.calls = [calls];\n        }\n    }\n}\n\n/**\n * Class representing result type for hold() & resume()\n */\nexport class HoldToggleResult {\n    /**\n     * Create HoldToggleResult\n     * @param {object} param\n     * @param {boolean} param.isThirdPartyOnHold\n     * @param {boolean} param.isCustomerOnHold\n     * @param {PhoneCall[]} [param.calls]\n     */\n    constructor({ isThirdPartyOnHold, isCustomerOnHold, calls }) {\n        if (calls) {\n            Object.values(calls).forEach(call => {\n                Validator.validateClassObject(call, PhoneCall);\n            });\n            this.calls = calls;\n        }\n        this.isThirdPartyOnHold = isThirdPartyOnHold;\n        this.isCustomerOnHold = isCustomerOnHold;\n    }\n}\n\n/**\n * Class representing result type for getRecordingUrl\n */\n export class SignedRecordingUrlResult {\n    /**\n     * Create SignedRecordingUrlResult\n     * @param {object} param\n     * @param {boolean} param.success\n     * @param {string} [param.url]\n     * @param {number} [param.duration] in seconds\n     * @param {string} [param.callId] Salesforce callId of the voice call\n     */\n    constructor({ success, url, duration, callId }) {\n        if (success) {\n            // For a successfull result, url is required\n            Validator.validateString(url);\n            Validator.validateString(callId);\n            if (duration) {\n                Validator.validateNumber(duration);\n            }\n        }\n        this.success = success;\n        this.url = url;\n        this.duration = duration;\n        this.callId = callId;\n    }\n}\n\n/**\n * Class representing result type for init()\n */\nexport class InitResult {\n    /**\n     * Create InitResult\n     * @param {object} param\n     * @param {boolean} [param.showLogin]\n     * @param {number} [param.loginFrameHeight]\n     */\n    constructor({ showLogin = false, loginFrameHeight = 350 }) {\n        this.showLogin = showLogin;\n        this.loginFrameHeight = loginFrameHeight;\n    }\n}\n\n/**\n * Class representing generic result type\n */\nexport class GenericResult {\n    /**\n     * Create GenericResult\n     * @param {object} param\n     * @param {boolean} param.success\n     */\n    constructor({ success }) {\n        this.success = success;\n    }\n}\n\n/**\n * Class representing logout result type\n */\n export class LogoutResult {\n    /**\n     * Create LogoutResult\n     * @param {object} param\n     * @param {boolean} param.success\n     * @param {number} [param.loginFrameHeight]\n     */\n    constructor({ success, loginFrameHeight = 350 }) {\n        this.success = success;\n        this.loginFrameHeight = loginFrameHeight;\n    }\n}\n\n/**\n * Class representing callInfo class (call metadata)\n */\nexport class CallInfo {\n    /**\n     * Create CallInfo\n     * @param {object} param\n     * @param {boolean} param.isOnHold\n     * @param {boolean} param.isRecordingPaused\n     * @param {boolean} param.isMuted\n     * @param {string} [param.initialCallId]\n     * @param {Date} [param.callStateTimestamp]\n     * @param {boolean} [param.isSoftphoneCall] - is it a softphone call \n     * @param {boolean} [param.acceptEnabled]\n     * @param {boolean} [param.declineEnabled]\n     * @param {boolean} [param.muteEnabled]\n     * @param {boolean} [param.swapEnabled]\n     * @param {boolean} [param.conferenceEnabled]\n     * @param {boolean} [param.holdEnabled]\n     * @param {boolean} [param.recordEnabled]\n     * @param {boolean} [param.addCallerEnabled]\n     * @param {boolean} [param.extensionEnabled]\n     * @param {boolean} [param.isReplayable]\n     */\n    constructor({ callStateTimestamp = null, isOnHold, isMuted = false, isRecordingPaused = false, initialCallId, isSoftphoneCall = true, \n        acceptEnabled = true, declineEnabled = true, muteEnabled = true, swapEnabled = true, conferenceEnabled = true, holdEnabled = true,\n        recordEnabled = true, addCallerEnabled = true, extensionEnabled = true, isReplayable = true }) {\n        if (callStateTimestamp) {\n            Validator.validateDate(callStateTimestamp);\n        }\n        Validator.validateBoolean(isRecordingPaused);\n        Validator.validateBoolean(isMuted);\n        Validator.validateBoolean(isSoftphoneCall);\n        Validator.validateBoolean(acceptEnabled);\n        Validator.validateBoolean(declineEnabled);\n        Validator.validateBoolean(muteEnabled);\n        Validator.validateBoolean(swapEnabled);\n        Validator.validateBoolean(conferenceEnabled);\n        Validator.validateBoolean(holdEnabled);\n        Validator.validateBoolean(recordEnabled);\n        Validator.validateBoolean(addCallerEnabled);\n        Validator.validateBoolean(extensionEnabled);\n        this.callStateTimestamp = callStateTimestamp;\n        this.isRecordingPaused = isRecordingPaused;\n        this.isMuted = isMuted;\n        this.isOnHold = isOnHold;\n        this.initialCallId = initialCallId;\n        this.isSoftphoneCall = isSoftphoneCall;\n        this.acceptEnabled = acceptEnabled;\n        this.declineEnabled = declineEnabled;\n        this.muteEnabled = muteEnabled;\n        this.swapEnabled = swapEnabled;\n        this.conferenceEnabled = conferenceEnabled;\n        this.holdEnabled = holdEnabled;\n        this.recordEnabled = recordEnabled;\n        this.addCallerEnabled = addCallerEnabled;\n        this.extensionEnabled = extensionEnabled;\n        this.isReplayable = isReplayable;\n    }\n}\n\n/** \n * Class representing a Contact. This object is used to represent \n * phone system contact or any call target\n */\n\nexport class Contact {\n    /**\n     * Create a Contact.\n     * @param {object} param\n     * @param {string} [param.id] - The unique contactId\n     * @param {(\"PhoneBook\"|\"Queue\"|\"PhoneNumber\"|\"Agent\")} [param.type] - The type of the contact, one of the CONTACT_TYPE values\n     * @param {string} [param.name] - The label for this contact to be displayed in the UI\n     * @param {string} [param.phoneNumber] - The phone number associcated with this contact\n     * @param {string} [param.prefix] - Any prefix to be dialed before dialing the number (i.e. +1)\n     * @param {string} [param.extension] - Any extension to be dialed after dialing the number\n     * @param {string} [param.endpointARN]\n     * @param {string} [param.queue]\n     * @param {string} [param.availability]\n     */\n    constructor({phoneNumber, id, type, name, prefix, extension, endpointARN, queue, availability}) {\n        if (phoneNumber) {\n            Validator.validateString(phoneNumber);\n        }\n        if (type) {\n            Validator.validateEnum(type, Object.values(constants.CONTACT_TYPE));\n        }\n        if (id) {\n            Validator.validateString(id);\n        }\n        if (name) {\n            Validator.validateString(name);\n        }\n        if (prefix) {\n            Validator.validateString(prefix);\n        }\n        if (extension) {\n            Validator.validateString(extension);\n        }\n        if (availability) {\n            Validator.validateEnum(availability, Object.values(constants.AGENT_AVAILABILITY));\n        }\n\n        this.phoneNumber = phoneNumber;\n        this.id = id;\n        this.type = type;\n        this.name = name;\n        this.prefix = prefix;\n        this.extension = extension;\n        this.endpointARN = endpointARN;\n        this.queue = queue;\n        if (constants.CONTACT_TYPE.AGENT === this.type) {\n            this.availability = availability;\n        } else {\n            this.availability = null;\n        }\n        \n    }\n}\n\n/** \n* Class representing PhoneCallAttributes\n*/\n\nexport class PhoneCallAttributes {\n    /**\n     * Create PhoneCallAttributes.\n     * @param {object} param\n     * @param {string} [param.voiceCallId] - The voice call id\n     * @param {PARTICIPANT_TYPE} [param.participantType] - The participant type of the call\n     * @param {string} [param.parentId] - The parent call id of the call\n     * @param {boolean} [param.isOnHold]\n     */\n    constructor({ voiceCallId, participantType, parentId, isOnHold }) {\n        if (voiceCallId) {\n            Validator.validateString(voiceCallId);\n        }\n        if (participantType) {\n            Validator.validateEnum(participantType, Object.values(constants.PARTICIPANT_TYPE));\n        }\n        if (parentId) {\n            Validator.validateString(parentId);\n        }\n        if (isOnHold !== undefined) {\n            Validator.validateBoolean(isOnHold);\n        }\n\n        this.voiceCallId = voiceCallId;\n        this.participantType = participantType;\n        this.parentId = parentId;\n        this.isOnHold = isOnHold;\n    }\n}\n\n/** \n* Class representing a PhoneCall. \n*/\n\nexport class PhoneCall {\n    /**\n     * Create a PhoneCall.\n     * @param {object} param\n     * @param {string} [param.callId] - The unique callId. This is a required parameter\n     * @param {CALL_TYPE} [param.callType] - The type of the call, one of the CALL_TYPE values\n     * @param {Contact} [param.contact] - The Call Target / Contact \n     * @param {string} [param.state] - The state of the call, i.e. ringing, connected, declined, failed \n     * @param {PhoneCallAttributes} [param.callAttributes] - Any additional call attributes\n     * @param {string} [param.phoneNumber] - The phone number associated with this call (usually external number)\n     * @param {CallInfo} [param.callInfo]\n     * @param {string} [param.reason]\n     * @param {boolean} [param.closeCallOnError]\n     * @param {string} [param.agentStatus]\n     */\n    constructor({callId, callType, contact, state, callAttributes, phoneNumber, callInfo, reason, closeCallOnError, agentStatus }) {\n        // TODO: Revisit the required fields\n        if (callId) {\n            Validator.validateString(callId);\n            this.callId = callId;\n        }\n        if (callType) {\n            Validator.validateEnum(callType, Object.values(constants.CALL_TYPE));\n            this.callType = callType;\n        }\n        if (phoneNumber) {\n            Validator.validateString(phoneNumber);\n            this.phoneNumber = phoneNumber;\n        }\n        if (callInfo) {\n            Validator.validateClassObject(callInfo, CallInfo);\n            this.callInfo = callInfo;\n        }\n        if (contact) {\n            Validator.validateClassObject(contact, Contact);\n            this.contact = contact;\n        }\n        if (reason) {\n            this.reason = reason;\n        }\n        if (closeCallOnError) {\n            this.closeCallOnError = closeCallOnError;\n        }\n        if (agentStatus) {\n            this.agentStatus = agentStatus;\n        }\n        this.state = state;\n        this.callAttributes = callAttributes;\n    }\n}\n\n/** \n* Class representing a VendorConnector\n*/\nexport class VendorConnector {\n    /**\n     * Initialize the connector\n     * @param {object} connectorConfig\n     * @returns {Promise<InitResult>} \n     * \n     */\n    init(config) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get the currently active calls\n     * @returns {Promise<ActiveCallsResult>} \n     * \n     */\n    getActiveCalls() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Accept call\n     * @param {PhoneCall} call - The call to be accepted\n     * @returns {Promise<CallResult>} \n     * \n     */\n    acceptCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Decline call\n     * @param {PhoneCall} call - The call to be declined\n     * @returns {Promise<CallResult>} \n     * \n     */\n    declineCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * End call\n     * @param {PhoneCall} call - The call to be ended\n     * @param {AGENT_STATUS} agentStatus\n     * @returns {Promise<HangupResult>} \n     * \n     */\n    endCall(call, agentStatus) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Mute call\n     * @returns {Promise<MuteToggleResult>} \n     * \n     */\n    mute() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Unmute call\n     * @returns {Promise<MuteToggleResult>} \n     * \n     */\n    unmute() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Hold call\n     * @param {PhoneCall} call - The call to be held\n     * @returns {Promise<HoldToggleResult>} \n     * \n     */\n    hold(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Resume call\n     * @param {PhoneCall} call - The call to be resumed\n     * @returns {Promise<HoldToggleResult>} \n     * \n     */\n    resume(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Set agent status\n     * @param {string} agentStatus\n     * @param {StatusInfo} statusInfo\n     * @returns {Promise<GenericResult>} \n     * \n     */\n    setAgentStatus(agentStatus, statusInfo) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Set agent status\n     * @param {Contact} contact\n     * @returns {Promise<CallResult>} \n     * \n     */\n    dial(contact) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Send digits\n     * @param {string} digits\n     */\n    sendDigits(digits) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get phone contacts\n     * @returns {Promise<PhoneContactsResult>} \n     */\n    getPhoneContacts() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Swap calls\n     * @param {PhoneCall} call1\n     * @param {PhoneCall} call2\n     * @returns {Promise<HoldToggleResult>} \n     */\n    swap(call1, call2) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Conference calls\n     * @param {PhoneCall[]} calls\n     * @returns {Promise<HoldToggleResult>} \n     */\n    conference(calls) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Add participant to call\n     * @param {Contact} contact\n     * @param {PhoneCall} call\n     * @returns {Promise<ParticipantResult>} \n     */\n    addParticipant(contact, call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Pause recording\n     * @param {PhoneCall} call\n     * @returns {Promise<RecordingToggleResult>} \n     */\n    pauseRecording(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Resume recording\n     * @param {PhoneCall} call\n     * @returns {Promise<RecordingToggleResult>} \n     */\n    resumeRecording(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get agentConfig\n     * @returns {Promise<AgentConfigResult>}\n     */\n    getAgentConfig() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Set Agent Config\n     * @param {AgentConfig} config\n     * @returns {Promise<GenericResult>}\n     */\n    setAgentConfig(config) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Logout from Omni\n     * @returns {Promise<LogoutResult>} \n     */\n    logout() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Handle message from LWC/Aura component\n     * @param {object} message\n     */\n    handleMessage(message) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Wrap up call\n     * @param {PhoneCall} call\n     */\n    wrapUpCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n    * Get the signed recording url\n    * @param {String} recordingUrl\n    * @param {String} vendorCallKey\n    * @param {String} callId\n    * @returns {Promise<SignedRecordingUrlResult>} \n    */\n    getSignedRecordingUrl(recordingUrl, vendorCallKey, callId) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Triggers a browser download for Vendor Logs\n     */\n    downloadLogs() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Sends the logs with a logLevel and payload to the vendor connector.\n     * Does a no-op, if not implemented.\n     * @param {String} logLevel Log Level (INFO, WARN, ERROR)\n     * @param {String} message Message to be logged\n     * @param {Object} payload An optional payload to be logged\n     */\n    logMessageToVendor(logLevel, message, payload) {}\n}\n\nexport class Validator {\n    static validateString(value) {\n        if (typeof value !== 'string') {\n            throw new Error(`Invalid argument. Expecting a string but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateNumber(value) {\n        if (typeof value !== 'number') {\n            throw new Error(`Invalid argument. Expecting a number but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateBoolean(value) {\n        if (typeof value !== 'boolean') {\n            throw new Error(`Invalid argument. Expecting a boolean but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateEnum(value, enumValues) {\n        const regex = new RegExp(enumValues.join( \"|\" ), \"i\");\n        if (!regex.test(value)) {\n            throw new Error(`Invalid argument. Expecting a value from ${JSON.stringify(enumValues)} but got ${value}`);\n        }\n        return this;\n    }\n\n    static validateDate(value) {\n        if (!(value instanceof Date)) {\n            throw new Error(`Invalid argument. Expecting a Date object but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateClassObject(object, className) {\n        if (!(object instanceof className)) {\n            throw new Error(`Invalid className. Expecting object of class ${className} but got ${typeof object}`);\n        }\n        return this;\n    }\n}\n\n/** \n * Class representing an Agent status information. This object is used to represent \n * agent status information\n */\n\nexport class AgentStatusInfo {\n    /**\n     * Create a AgentStatusInfo.\n     * @param {object} param\n     * @param {string} [param.statusId] - The unique statusId\n     * @param {string} [param.statusApiName] - The status API name\n     * @param {string} [param.statusName] - The label for this status to be displayed in the UI\n     */\n    constructor({statusId, statusApiName, statusName}) {\n        Validator.validateString(statusId);\n        Validator.validateString(statusApiName);\n        Validator.validateString(statusName);\n\n        this.statusId = statusId;\n        this.statusApiName = statusApiName;\n        this.statusName = statusName;\n    }\n}\n\n/**\n * Class representing a Audio Stats, which contains array of AudioStats. This object is used to calculate the MOS Score\n */\n\nexport class AudioStats {\n    /**\n     * Create a AudioStats\n     * @param {object} param\n     * @param {string} [param.callId] - The unique callId.\n     * @param {AudioStatsElement[]} param.stats - array of AudioStatsElement\n     * @param {boolean} [param.isAudioStatsCompleted] - True if the audio stats is completed, will calculate MOS and update VoiceCall record\n     */\n    constructor({ callId, stats, isAudioStatsCompleted }) {\n        if (callId) {\n            Validator.validateString(callId);\n            this.callId = callId;\n        }\n\n        if (stats) {\n            Validator.validateClassObject(stats, Array);\n            stats.forEach(audioStatsElement => Validator.validateClassObject(audioStatsElement, AudioStatsElement));\n            this.stats = stats;\n        }\n\n        if (isAudioStatsCompleted) {\n            Validator.validateBoolean(isAudioStatsCompleted);\n            this.isAudioStatsCompleted = isAudioStatsCompleted;\n        }\n    }\n}\n\n/**\n * Class representing a Audio Stats Element. This object is used to calculate the MOS Score\n */\n\nexport class AudioStatsElement {\n    /**\n     * Create a AudioStatsElement\n     * @param {object} param\n     * @param {StatsInfo} [param.inputChannelStats] - the inputChannel stream stats\n     * @param {StatsInfo} [param.outputChannelStats] - the ouputChannel stream stats\n     */\n    constructor({inputChannelStats, outputChannelStats}) {\n        if (inputChannelStats) {\n            Validator.validateClassObject(inputChannelStats, StatsInfo);\n        }\n        if (outputChannelStats) {\n            Validator.validateClassObject(outputChannelStats, StatsInfo);\n        }\n        \n        this.inputChannelStats = inputChannelStats;\n        this.outputChannelStats = outputChannelStats;\n    }\n}\n\n/**\n * Class representing a Stream Stats. This object is used to calculate the MOS Score\n */\n\nexport class StatsInfo {\n    /**\n     * Create a StatsInfo\n     * @param {object} param\n     * @param {number} [param.packetsCount] - the packets count\n     * @param {number} [param.packetsLost] - packets lost count\n     * @param {number} [param.jitterBufferMillis] - jitter buffer in milliseconds\n     * @param {number} [param.roundTripTimeMillis] - round trip time in milliseconds\n     */\n    constructor({packetsCount, packetsLost, jitterBufferMillis, roundTripTimeMillis}) {\n        packetsCount = (packetsCount == null || packetsCount < 0) ? 0 : packetsCount;\n        packetsLost = (packetsLost == null || packetsLost < 0) ? 0 : packetsLost;\n        jitterBufferMillis = (jitterBufferMillis == null || jitterBufferMillis < 0) ? 0 : jitterBufferMillis;\n        roundTripTimeMillis = (roundTripTimeMillis == null || roundTripTimeMillis < 0) ? 0 : roundTripTimeMillis;\n\n        this.statsCount = 0;\n        this.packetsCount = packetsCount;\n        this.packetsLost = packetsLost;\n        this.jitterBufferMillis = jitterBufferMillis;\n        this.roundTripTimeMillis = roundTripTimeMillis;\n    }\n}","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport { AudioStatsElement, StatsInfo } from './types';\nlet audioStatus;\nlet supportsMos = false;\n\nfunction getAvgStats(streamType) {\n    const stats = audioStatus[streamType];\n    return {\n        packetsCount: stats.packetsCount / stats.statsCount,\n        packetsLost: stats.packetsLost / stats.statsCount,\n        jitterBufferMillis: stats.jitterBufferMillis / stats.statsCount,\n        roundTripTimeMillis: stats.roundTripTimeMillis / stats.statsCount\n    };\n}\n\nfunction getMOSByStream(streamType) {\n    const avgStats = getAvgStats(streamType);\n    const effectiveLatency = avgStats.roundTripTimeMillis + (avgStats.jitterBufferMillis * 2) + 10.0;\n    let R = 0;\n    if (effectiveLatency < 160) {\n        R = 93.2 - (effectiveLatency / 40);\n    } else {\n        R = 93.2 - (effectiveLatency - 120) / 10;\n    }\n    R -= avgStats.packetsLost / avgStats.packetsCount * 2.50;\n    return 1 + (0.035) * R + (.000007) * R * (R - 60) * (100 - R);\n}\n\nexport function enableMos() {\n    supportsMos = true;\n}\n\nexport function getMOS() {\n    if (!supportsMos || !audioStatus) {\n        return undefined;\n    }\n    const inputChannelMOS = getMOSByStream('inputChannelStats');\n    const ouputChannelMOS = getMOSByStream('outputChannelStats');\n    audioStatus = null;\n    if (isNaN(ouputChannelMOS) && isNaN(inputChannelMOS)) {\n        return 0;\n    } else if (isNaN(ouputChannelMOS)) {\n        return inputChannelMOS;\n    } else if (isNaN(inputChannelMOS)) {\n        return ouputChannelMOS;\n    } else {\n        return Math.min(inputChannelMOS, ouputChannelMOS);\n    }\n}\n\nexport function initAudioStats() {\n    audioStatus = new AudioStatsElement({inputChannelStats: new StatsInfo({packetsCount: 0, packetsLost: 0, jitterBufferMillis: 0, roundTripTimeMillis: 0}), \n                               outputChannelStats: new StatsInfo({packetsCount: 0, packetsLost: 0, jitterBufferMillis: 0, roundTripTimeMillis: 0})});\n}\n\nexport function updateAudioStats(statsArray) {\n    if (audioStatus) {\n        statsArray.forEach((stats) => {\n            if (stats.inputChannelStats) {\n                audioStatus.inputChannelStats.statsCount++;\n                audioStatus.inputChannelStats.packetsCount += stats.inputChannelStats.packetsCount | 0;\n                audioStatus.inputChannelStats.packetsLost += stats.inputChannelStats.packetsLost | 0;\n                audioStatus.inputChannelStats.jitterBufferMillis += stats.inputChannelStats.jitterBufferMillis | 0;\n                audioStatus.inputChannelStats.roundTripTimeMillis += stats.inputChannelStats.roundTripTimeMillis | 0;\n            }\n            if (stats.outputChannelStats) {\n                audioStatus.outputChannelStats.statsCount++;\n                audioStatus.outputChannelStats.packetsCount += stats.outputChannelStats.packetsCount | 0;\n                audioStatus.outputChannelStats.packetsLost += stats.outputChannelStats.packetsLost | 0;\n                audioStatus.outputChannelStats.jitterBufferMillis += stats.outputChannelStats.jitterBufferMillis | 0;\n                audioStatus.outputChannelStats.roundTripTimeMillis += stats.outputChannelStats.roundTripTimeMillis | 0;\n            }\n        });\n    }\n}","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/* eslint-disable no-unused-vars */\nimport constants from './constants.js';\nimport { Validator, GenericResult, InitResult, CallResult, HangupResult, HoldToggleResult, PhoneContactsResult, MuteToggleResult,\n    ParticipantResult, RecordingToggleResult, AgentConfigResult, ActiveCallsResult, SignedRecordingUrlResult, LogoutResult,\n    VendorConnector, Contact, AudioStats } from './types';\nimport { enableMos, getMOS, initAudioStats, updateAudioStats } from './mosUtil';\n\nlet channelPort;\nlet vendorConnector;\nlet agentAvailable;\n\n/**\n * Gets the error type from the error object\n * @param {object} e Error object representing the error\n */\nfunction getErrorType(e) {\n    return e && e.type ? e.type : e;\n}\n\n/**\n * Sanitizes the object by removing any PII data\n * @param {object} payload\n */\nfunction sanitizePayload(payload) {\n    if (payload && typeof(payload) === 'object') {\n        const isArray = Array.isArray(payload);\n        const sanitizedPayload = isArray ? [] : {};\n\n        if (isArray) {\n            payload.forEach(element => {\n                sanitizedPayload.push(sanitizePayload(element));\n            });\n        } else {\n            for (const property in payload) {\n                if (property !== 'phoneNumber' &&\n                    property !== 'number' &&\n                    property !== 'name' && \n                    property !== 'callAttributes') {\n                    sanitizedPayload[property] = sanitizePayload(payload[property]);\n                }\n            }\n        }\n        return sanitizedPayload;\n    }\n    return payload;\n}\n\n/**\n * Gets the error message from the error object\n * @param {object} e Error object representing the error\n */\nfunction getErrorMessage(e) {\n    return e && e.message ? e.message : e;\n}\n/** \n * Dispatch a telephony event log to Salesforce\n * @param {String} eventType event type, i.e. constants.EVENT_TYPE.CALL_STARTED    \n * @param {Object} payload event payload\n * @param {Boolean} isError error scenario\n */\nfunction dispatchEventLog(eventType, payload, isError) {\n    const sanitizedPayload = sanitizePayload(payload);\n\n    channelPort.postMessage({\n        type: constants.MESSAGE_TYPE.LOG,\n        payload: { eventType, payload: sanitizedPayload, isError }\n    });\n}\n/** \n * Dispatch a telephony event to Salesforce\n * @param {String} eventType event type, i.e. constants.EVENT_TYPE.CALL_STARTED\n * @param {Object} payload event payload\n * @param {Boolean} registerLog optional argument to not register the event\n */\nfunction dispatchEvent(eventType, payload, registerLog = true) {\n    channelPort.postMessage({\n        type: constants.MESSAGE_TYPE.TELEPHONY_EVENT_DISPATCHED,\n        payload: { telephonyEventType: eventType, telephonyEventPayload: payload }\n    });\n    if (registerLog) {\n        dispatchEventLog(eventType, payload, false);\n    }\n}\n\n/**\n * Dispatch a telephony integration error to Salesforce\n * @param {string} errorType Error Type, ex: constants.ErrorType.MICROPHONE_NOT_SHARED\n * @param {object} error Error object representing the error\n * @param {string} eventType The event that caused this error, ex: constants.MESSAGE_TYPE.ACCEPT_CALL\n */\n function dispatchError(errorType, error, eventType) {\n    // eslint-disable-next-line no-console\n    console.error(`SCV dispatched error ${errorType} for eventType ${eventType}`, error);\n    dispatchEvent(constants.EVENT_TYPE.ERROR, { message: constants.ERROR_TYPE[errorType] }, false);\n    dispatchEventLog(eventType, { errorType, error }, true);\n}\n\n/** \n * Notify Salesforce that the connector is ready\n */\nasync function setConnectorReady() {\n    try {\n        const agentConfigResult = await vendorConnector.getAgentConfig();\n        Validator.validateClassObject(agentConfigResult, AgentConfigResult);\n        if (agentConfigResult.supportsMos) {\n            enableMos();\n        }\n        const activeCallsResult = await vendorConnector.getActiveCalls();\n        Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n        const activeCalls = activeCallsResult.activeCalls;\n        const type = constants.MESSAGE_TYPE.CONNECTOR_READY;\n        const payload = {\n            agentConfig: {\n                [constants.AGENT_CONFIG_TYPE.MUTE] : agentConfigResult.hasMute,\n                [constants.AGENT_CONFIG_TYPE.RECORD] : agentConfigResult.hasRecord,\n                [constants.AGENT_CONFIG_TYPE.MERGE] : agentConfigResult.hasMerge,\n                [constants.AGENT_CONFIG_TYPE.SWAP] : agentConfigResult.hasSwap,\n                [constants.AGENT_CONFIG_TYPE.PHONES] : agentConfigResult.phones,\n                [constants.AGENT_CONFIG_TYPE.SIGNED_RECORDING_URL] : agentConfigResult.hasSignedRecordingUrl,\n                [constants.AGENT_CONFIG_TYPE.SELECTED_PHONE] : agentConfigResult.selectedPhone,\n                [constants.AGENT_CONFIG_TYPE.DEBUG_ENABLED] : agentConfigResult.debugEnabled,\n                [constants.AGENT_CONFIG_TYPE.CONTACT_SEARCH] : agentConfigResult.hasContactSearch,\n                [constants.AGENT_CONFIG_TYPE.VENDOR_PROVIDED_AVAILABILITY] : agentConfigResult.hasAgentAvailability\n            },\n            callInProgress: activeCalls.length > 0 ? activeCalls[0] : null\n        }\n        channelPort.postMessage({\n            type,\n            payload\n        });\n        dispatchEventLog(type, payload, false);\n    } catch (e) {\n        // Post CONNECTOR_READY even if getAgentConfig is not implemented\n        channelPort.postMessage({\n            type: constants.MESSAGE_TYPE.CONNECTOR_READY,\n            payload: {}\n        });\n        dispatchEventLog(constants.MESSAGE_TYPE.CONNECTOR_READY, {}, false);\n    }\n}\n\n//TODO: 230 we should convert call object to PhoneCall object\nasync function channelMessageHandler(message) {\n    const eventType = message.data.type;\n    dispatchEventLog(eventType, message.data, false);\n    switch (eventType) {\n        case constants.MESSAGE_TYPE.ACCEPT_CALL:\n            try {\n                if (message.data.call && message.data.call.callType &&\n                    message.data.call.callType.toLowerCase() === constants.CALL_TYPE.OUTBOUND.toLowerCase()) {\n                    return;\n                }\n\n                initAudioStats();\n                const payload = await vendorConnector.acceptCall(message.data.call);\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                dispatchEvent(call.callType.toLowerCase() === constants.CALL_TYPE.CALLBACK.toLowerCase() ?\n                    constants.EVENT_TYPE.CALL_STARTED : constants.EVENT_TYPE.CALL_CONNECTED, call);\n            } catch (e) {\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_ACCEPT_THE_CALL, e, constants.MESSAGE_TYPE.ACCEPT_CALL);\n            }\n        break;\n        case constants.MESSAGE_TYPE.DECLINE_CALL:\n            try {\n                const payload =  await vendorConnector.declineCall(message.data.call);\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                dispatchEvent(constants.EVENT_TYPE.HANGUP, call);\n            } catch (e) {\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_DECLINE_THE_CALL, e, constants.MESSAGE_TYPE.DECLINE_CALL);\n            }\n        break;\n        case constants.MESSAGE_TYPE.END_CALL:\n            try {\n                const payload = await vendorConnector.endCall(message.data.call, message.data.agentStatus);\n                const activeCallsResult = await vendorConnector.getActiveCalls();\n                Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n                const activeCalls = activeCallsResult.activeCalls;\n                // after end calls from vendor side, if no more active calls, fire HANGUP\n                if (activeCalls.length === 0) {\n                    Validator.validateClassObject(payload, HangupResult);\n                    const { calls } = payload;\n                    dispatchEvent(constants.EVENT_TYPE.HANGUP, calls);\n                }\n            } catch (e) {\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_END_THE_CALL, e, constants.MESSAGE_TYPE.END_CALL);\n            }\n        break;\n        case constants.MESSAGE_TYPE.MUTE:\n            try {\n                const payload = await vendorConnector.mute();\n                publishEvent({eventType: constants.EVENT_TYPE.MUTE_TOGGLE, payload});\n            } catch (e) {\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_MUTE_CALL, e, constants.MESSAGE_TYPE.MUTE);\n            }\n        break;\n        case constants.MESSAGE_TYPE.UNMUTE:\n            try {\n                const payload = await vendorConnector.unmute();\n                publishEvent({eventType: constants.EVENT_TYPE.MUTE_TOGGLE, payload});\n            } catch (e) {\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_UNMUTE_CALL, e, constants.MESSAGE_TYPE.UNMUTE);\n            }\n        break;\n        case constants.MESSAGE_TYPE.HOLD:\n            try {\n                const payload = await vendorConnector.hold(message.data.call);\n                publishEvent({eventType: constants.EVENT_TYPE.HOLD_TOGGLE, payload});\n            } catch (e) {\n                switch(getErrorType(e)) {\n                    case constants.ERROR_TYPE.INVALID_PARTICIPANT:\n                        dispatchError(constants.ERROR_TYPE.INVALID_PARTICIPANT, getErrorMessage(e), constants.MESSAGE_TYPE.HOLD);\n                        break;\n                    default:\n                        dispatchError(constants.ERROR_TYPE.CAN_NOT_HOLD_CALL, getErrorMessage(e), constants.MESSAGE_TYPE.HOLD);\n                        break;\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.RESUME:\n            try {\n                const payload = await vendorConnector.resume(message.data.call);\n                publishEvent({eventType: constants.EVENT_TYPE.HOLD_TOGGLE, payload});\n            } catch (e) {\n                switch(getErrorType(e)) {\n                    case constants.ERROR_TYPE.INVALID_PARTICIPANT:\n                        dispatchError(constants.ERROR_TYPE.INVALID_PARTICIPANT, getErrorMessage(e), constants.MESSAGE_TYPE.RESUME);\n                        break;\n                    default:\n                        dispatchError(constants.ERROR_TYPE.CAN_NOT_RESUME_CALL, getErrorMessage(e), constants.MESSAGE_TYPE.RESUME);\n                        break;\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.SET_AGENT_STATUS:\n            try {\n                const statusInfo = message.data.statusInfo || {};\n                const payload = await vendorConnector.setAgentStatus(message.data.agentStatus, statusInfo);\n                Validator.validateClassObject(payload, GenericResult);\n                const { success } = payload;\n                dispatchEvent(constants.EVENT_TYPE.SET_AGENT_STATUS_RESULT, { success });\n            } catch (e) {\n                switch(getErrorType(e)) {\n                    case constants.ERROR_TYPE.INVALID_AGENT_STATUS:\n                        dispatchError(constants.ERROR_TYPE.INVALID_AGENT_STATUS, getErrorMessage(e), constants.MESSAGE_TYPE.SET_AGENT_STATUS);\n                        break;\n                    default:\n                        dispatchError(constants.ERROR_TYPE.CAN_NOT_SET_AGENT_STATUS, getErrorMessage(e), constants.MESSAGE_TYPE.SET_AGENT_STATUS);\n                        break;\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.DIAL:\n            try {\n                const payload = await vendorConnector.dial(new Contact(message.data.contact));\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                dispatchEvent(constants.EVENT_TYPE.CALL_STARTED, call);\n            } catch (e) {\n                dispatchEvent(constants.EVENT_TYPE.CALL_FAILED);\n                switch(getErrorType(e)) {\n                    case constants.ERROR_TYPE.INVALID_DESTINATION:\n                        dispatchError(constants.ERROR_TYPE.INVALID_DESTINATION, getErrorMessage(e), constants.MESSAGE_TYPE.DIAL);\n                        break;\n                    case constants.ERROR_TYPE.GENERIC_ERROR:\n                        dispatchError(constants.ERROR_TYPE.GENERIC_ERROR, getErrorMessage(e), constants.MESSAGE_TYPE.DIAL);\n                        break;\n                    default:\n                        dispatchError(constants.ERROR_TYPE.CAN_NOT_START_THE_CALL, getErrorMessage(e), constants.MESSAGE_TYPE.DIAL);\n                        break;\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.SEND_DIGITS:\n            try {\n                await vendorConnector.sendDigits(message.data.digits);\n            } catch (e) {\n                dispatchEventLog(constants.MESSAGE_TYPE.SEND_DIGITS, message.data.digits, true);\n            }\n            break;\n        case constants.MESSAGE_TYPE.GET_PHONE_CONTACTS:\n            try  {\n                const payload = await vendorConnector.getPhoneContacts(message.data.filter);\n                Validator.validateClassObject(payload, PhoneContactsResult);\n                const contacts = payload.contacts.map((contact) => {\n                    return {\n                        id: contact.id,\n                        endpointARN: contact.endpointARN,\n                        queue: contact.queue,\n                        phoneNumber: contact.phoneNumber,\n                        name: contact.name,\n                        type: contact.type,\n                        extension: contact.extension,\n                        availability: contact.availability\n                    };\n                });\n                dispatchEvent(constants.EVENT_TYPE.PHONE_CONTACTS, {\n                    contacts\n                });\n            } catch (e) {\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_GET_PHONE_CONTACTS, e, constants.MESSAGE_TYPE.GET_PHONE_CONTACTS);\n            }\n        break;\n        case constants.MESSAGE_TYPE.SWAP_PARTICIPANTS:\n            try {\n                // TODO: Create PhoneCall from call1.callId & call2.callId\n                // TODO: rename to call1 and call2\n                const payload = await vendorConnector.swap(message.data.callToHold, message.data.callToResume);\n                publishEvent({ eventType: constants.EVENT_TYPE.PARTICIPANTS_SWAPPED, payload });\n            } catch (e) {\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_SWAP_PARTICIPANTS, e, constants.MESSAGE_TYPE.SWAP_PARTICIPANTS);\n            }\n        break;\n        case constants.MESSAGE_TYPE.CONFERENCE:\n            try {\n                const payload = await vendorConnector.conference(message.data.calls);\n                publishEvent({ eventType: constants.EVENT_TYPE.PARTICIPANTS_CONFERENCED, payload });\n            } catch (e) {\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_CONFERENCE, e, constants.MESSAGE_TYPE.CONFERENCE);\n            }\n        break;\n        case constants.MESSAGE_TYPE.ADD_PARTICIPANT:\n            try {\n                const payload = await vendorConnector.addParticipant(new Contact(message.data.contact), message.data.call);\n                publishEvent({ eventType: constants.EVENT_TYPE.PARTICIPANT_ADDED, payload });\n            } catch (e) {\n                // TODO: Can we avoid passing in reason field\n                dispatchEvent(constants.EVENT_TYPE.PARTICIPANT_REMOVED, {\n                    reason: constants.EVENT_TYPE.ERROR.toLowerCase()\n                });\n                switch(getErrorType(e)) {\n                    case constants.ERROR_TYPE.INVALID_DESTINATION:\n                        dispatchError(constants.ERROR_TYPE.INVALID_DESTINATION, getErrorMessage(e), constants.MESSAGE_TYPE.ADD_PARTICIPANT);\n                        break;\n                    default:\n                        dispatchError(constants.ERROR_TYPE.CAN_NOT_ADD_PARTICIPANT, getErrorMessage(e), constants.MESSAGE_TYPE.ADD_PARTICIPANT);\n                        break;\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.PAUSE_RECORDING:\n            try {\n                const payload = await vendorConnector.pauseRecording(message.data.call);\n                publishEvent({ eventType: constants.EVENT_TYPE.RECORDING_TOGGLE, payload });\n            } catch (e) {\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_PAUSE_RECORDING, e, constants.MESSAGE_TYPE.PAUSE_RECORDING);\n            }\n        break;\n        case constants.MESSAGE_TYPE.RESUME_RECORDING:\n            try {\n                const payload = await vendorConnector.resumeRecording(message.data.call);\n                publishEvent({ eventType: constants.EVENT_TYPE.RECORDING_TOGGLE, payload });\n            } catch (e) {\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_RESUME_RECORDING, e, constants.MESSAGE_TYPE.RESUME_RECORDING);\n            }\n        break;\n        case constants.MESSAGE_TYPE.LOGOUT:\n            try {\n                const payload = await vendorConnector.logout();\n                Validator.validateClassObject(payload, LogoutResult);\n                const { success, loginFrameHeight } = payload;\n                dispatchEvent(constants.EVENT_TYPE.LOGOUT_RESULT, { success, loginFrameHeight });\n            } catch (e) {\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_LOG_OUT, e, constants.MESSAGE_TYPE.LOGOUT);\n            }\n        break;\n        case constants.MESSAGE_TYPE.MESSAGE:\n            // TODO: Define a return type for handling message\n            vendorConnector.handleMessage(message.data.message);\n        break;\n        case constants.MESSAGE_TYPE.WRAP_UP_CALL:\n            vendorConnector.wrapUpCall(message.data.call);\n        break;\n        case constants.MESSAGE_TYPE.AGENT_AVAILABLE: {\n            agentAvailable = message.data.isAvailable;\n            if (agentAvailable) {\n                const activeCallsResult = await vendorConnector.getActiveCalls();\n                Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n                const activeCalls = activeCallsResult.activeCalls;\n                for (const callId in activeCalls) {\n                    const call = activeCalls[callId];\n                    const shouldReplay = call.callInfo ? call.callInfo.isReplayable : true;\n                    if (shouldReplay) {\n                        call.isReplayedCall = true;\n                        switch(call.state) {\n                            case constants.CALL_STATE.CONNECTED:\n                                dispatchEvent(constants.EVENT_TYPE.CALL_CONNECTED, call)\n                                break;\n                            case constants.CALL_STATE.RINGING:\n                                dispatchEvent(constants.EVENT_TYPE.CALL_STARTED, call)\n                                break;\n                            case constants.CALL_STATE.TRANSFERRING:\n                                dispatchEvent(constants.EVENT_TYPE.PARTICIPANT_ADDED, {\n                                    phoneNumber: call.contact.phoneNumber,\n                                    callInfo: call.callInfo,\n                                    initialCallHasEnded: call.callAttributes.initialCallHasEnded,\n                                    callId: call.callId\n                                });\n                                break;\n                            case constants.CALL_STATE.TRANSFERRED:\n                                dispatchEvent(constants.EVENT_TYPE.PARTICIPANT_CONNECTED, {\n                                    phoneNumber: call.contact.phoneNumber,\n                                    callInfo: call.callInfo,\n                                    initialCallHasEnded: call.callAttributes.initialCallHasEnded,\n                                    callId: call.callId\n                                });\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n        break;\n        case constants.MESSAGE_TYPE.SET_AGENT_CONFIG:\n            try {\n                const result = await vendorConnector.setAgentConfig(message.data.config);\n                Validator.validateClassObject(result, GenericResult);\n                dispatchEvent(constants.EVENT_TYPE.AGENT_CONFIG_UPDATED, result);\n            } catch (e){\n                dispatchError(getErrorType(e) === constants.ERROR_TYPE.CAN_NOT_UPDATE_PHONE_NUMBER ? constants.ERROR_TYPE.CAN_NOT_UPDATE_PHONE_NUMBER : constants.ERROR_TYPE.CAN_NOT_SET_AGENT_CONFIG , getErrorMessage(e), constants.MESSAGE_TYPE.SET_AGENT_CONFIG);\n            }\n        break;\n        case constants.MESSAGE_TYPE.GET_SIGNED_RECORDING_URL:\n            try {\n                const { recordingUrl, vendorCallKey, callId } = message.data;\n                const result = await vendorConnector.getSignedRecordingUrl(recordingUrl, vendorCallKey, callId);\n                Validator.validateClassObject(result, SignedRecordingUrlResult);\n                dispatchEvent(constants.EVENT_TYPE.SIGNED_RECORDING_URL, result);\n            } catch (e) {\n                // In case of an error, we want to show an error message in the recording player\n                const signedRecordingUrlResult = new SignedRecordingUrlResult({\n                    success: false\n                });\n                dispatchEvent(constants.EVENT_TYPE.SIGNED_RECORDING_URL, signedRecordingUrlResult, false);\n                dispatchEventLog(constants.MESSAGE_TYPE.GET_SIGNED_RECORDING_URL, signedRecordingUrlResult, true);\n            }\n        break;\n        case constants.MESSAGE_TYPE.DOWNLOAD_VENDOR_LOGS:\n                vendorConnector.downloadLogs();\n        break;\n        case constants.MESSAGE_TYPE.LOG: {\n                const { logLevel, logMessage, payload } = message.data;\n                vendorConnector.logMessageToVendor(logLevel, logMessage, payload);\n            }\n        break;\n        default:\n            break;\n    }\n}\n\nasync function windowMessageHandler(message) {\n    switch (message.data.type) {\n        case constants.MESSAGE_TYPE.SETUP_CONNECTOR: {\n            const sfDomain = /^http[s]?:\\/\\/[\\w-.]+(\\.lightning\\.force\\.com|\\.lightning\\.pc-rnd\\.force\\.com|\\.stm\\.force\\.com|\\.salesforce\\.com|\\.my\\.salesforce-sites\\.com|\\.lightning\\.localhost\\.[\\w]+\\.force.com)$/;\n            const originUrl = new URL(message.origin);\n            const url = originUrl.protocol + '//' + originUrl.hostname;\n\n            if (sfDomain.test(url)) {\n                channelPort = message.ports[0];\n                channelPort.onmessage = channelMessageHandler;\n                dispatchEventLog(constants.MESSAGE_TYPE.SETUP_CONNECTOR, null, false);\n                try {\n                    const payload = await vendorConnector.init(message.data.connectorConfig);\n                    Validator.validateClassObject(payload, InitResult);\n                    if (payload.showLogin) {\n                        dispatchEvent(constants.EVENT_TYPE.SHOW_LOGIN, {\n                            loginFrameHeight: payload.loginFrameHeight\n                        });\n                    } else {\n                        setConnectorReady();\n                    }\n                } catch (e) {\n                    switch(getErrorType(e)) {\n                        case constants.ERROR_TYPE.INVALID_PARAMS:\n                            dispatchError(constants.ERROR_TYPE.INVALID_PARAMS, getErrorMessage(e), constants.MESSAGE_TYPE.SETUP_CONNECTOR);\n                            break;\n                        default:\n                            dispatchError(constants.ERROR_TYPE.CAN_NOT_LOG_IN, getErrorMessage(e), constants.MESSAGE_TYPE.SETUP_CONNECTOR);\n                            break;\n                    }\n                }\n            }\n            window.removeEventListener('message', windowMessageHandler);\n        }\n            break;\n        default:\n            break;\n    }\n}\n\nfunction validatePayload(payload, payloadType, errorType, eventType) {\n    try {\n        Validator.validateClassObject(payload, payloadType);\n        return true;\n    } catch (e) {\n        if (errorType) {\n            dispatchError(errorType, e, eventType);\n        }\n        return false;\n    }\n}\n\n/*========================== Exported Functions ==========================*/\n/**\n * Initialize a vendor connector\n * @param {VendorConnector} connector\n */\nexport function initializeConnector(connector) {\n    vendorConnector = connector;\n    window.addEventListener('message', windowMessageHandler);\n}\n\n/**\n * Publish an event or error log to Salesforce\n * @param {object} param\n * @param {string} param.eventType Any event type to be logged\n * @param {object} param.payload Any payload for the log that needs to be logged\n * @param {boolean} param.isError\n */\nexport function publishLog({ eventType, payload, isError }) {\n    dispatchEventLog(eventType, payload, isError);\n}\n\n/**\n * Publish a telephony error to Salesforce\n * @param {object} param\n * @param {(\"LOGIN_RESULT\"|\"LOGOUT_RESULT\"|\"CALL_STARTED\"|\"QUEUED_CALL_STARTED\"|\"CALL_CONNECTED\"|\"HANGUP\"|\"PARTICIPANT_CONNECTED\"|\"PARTICIPANT_ADDED\"|\"PARTICIPANTS_SWAPPED\"|\"PARTICIPANTS_CONFERENCED\"|\"MESSAGE\"|\"MUTE_TOGGLE\"|\"HOLD_TOGGLE\"|\"RECORDING_TOGGLE\"|\"AGENT_ERROR\"|\"SOFTPHONE_ERROR\")} param.eventType Event type to publish.\n * @param {object} param.error Error object representing the error\n */\nexport function publishError({ eventType, error }) {\n    switch(eventType) {\n        case constants.EVENT_TYPE.LOGIN_RESULT:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_LOG_IN, error, constants.EVENT_TYPE.LOGIN_RESULT);\n            break;\n        case constants.EVENT_TYPE.LOGOUT_RESULT:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_LOG_OUT, error, constants.EVENT_TYPE.LOGOUT_RESULT);\n            break;\n        case constants.EVENT_TYPE.CALL_STARTED:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_START_THE_CALL, error, constants.EVENT_TYPE.CALL_STARTED);\n            break;\n        case constants.EVENT_TYPE.QUEUED_CALL_STARTED:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_START_THE_CALL, error, constants.EVENT_TYPE.QUEUED_CALL_STARTED);\n            break;\n        case constants.EVENT_TYPE.CALL_CONNECTED:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_START_THE_CALL, error, constants.EVENT_TYPE.CALL_CONNECTED);\n            break;\n        case constants.EVENT_TYPE.HANGUP: \n            dispatchError(constants.ERROR_TYPE.CAN_NOT_END_THE_CALL, error, constants.EVENT_TYPE.HANGUP);\n            break;\n        case constants.EVENT_TYPE.PARTICIPANT_ADDED:\n            dispatchError(getErrorType(error) === constants.ERROR_TYPE.INVALID_PARTICIPANT ? constants.ERROR_TYPE.INVALID_PARTICIPANT : constants.ERROR_TYPE.CAN_NOT_ADD_PARTICIPANT, error, constants.EVENT_TYPE.PARTICIPANT_ADDED);\n            break;\n        case constants.EVENT_TYPE.PARTICIPANT_CONNECTED:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_CONNECT_PARTICIPANT, error, constants.EVENT_TYPE.PARTICIPANT_CONNECTED);\n            break;\n        case constants.EVENT_TYPE.PARTICIPANT_REMOVED:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_HANGUP_PARTICIPANT, error, constants.EVENT_TYPE.PARTICIPANT_REMOVED); \n            break;\n        case constants.EVENT_TYPE.MUTE_TOGGLE:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_TOGGLE_MUTE, error, constants.EVENT_TYPE.MUTE_TOGGLE);\n            break;\n        case constants.EVENT_TYPE.HOLD_TOGGLE: \n            dispatchError(getErrorType(error) === constants.ERROR_TYPE.INVALID_PARTICIPANT ? constants.ERROR_TYPE.INVALID_PARTICIPANT : constants.ERROR_TYPE.CAN_NOT_TOGGLE_HOLD, error, constants.EVENT_TYPE.HOLD_TOGGLE);\n            break;\n        case constants.EVENT_TYPE.RECORDING_TOGGLE:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_TOGGLE_RECORD, error, constants.EVENT_TYPE.RECORDING_TOGGLE);\n            break;\n        case constants.EVENT_TYPE.PARTICIPANTS_SWAPPED: \n            dispatchError(constants.ERROR_TYPE.CAN_NOT_SWAP_PARTICIPANTS, error, constants.EVENT_TYPE.PARTICIPANTS_SWAPPED);\n            break;\n        case constants.EVENT_TYPE.PARTICIPANTS_CONFERENCED:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_CONFERENCE, error, constants.EVENT_TYPE.PARTICIPANTS_CONFERENCED);\n            break;\n        case constants.EVENT_TYPE.AGENT_ERROR:\n            dispatchError(constants.ERROR_TYPE.AGENT_ERROR, error, constants.EVENT_TYPE.AGENT_ERROR);\n            break;\n        case constants.EVENT_TYPE.SOFTPHONE_ERROR:\n            switch(getErrorType(error)) {\n                case constants.ERROR_TYPE.UNSUPPORTED_BROWSER:\n                    dispatchError(constants.ERROR_TYPE.UNSUPPORTED_BROWSER, error, constants.EVENT_TYPE.SOFTPHONE_ERROR);\n                    break;\n                case constants.ERROR_TYPE.MICROPHONE_NOT_SHARED:\n                    dispatchError(constants.ERROR_TYPE.MICROPHONE_NOT_SHARED, error, constants.EVENT_TYPE.SOFTPHONE_ERROR);\n                    break;\n                default:\n                    dispatchError(constants.ERROR_TYPE.GENERIC_ERROR, error, constants.EVENT_TYPE.SOFTPHONE_ERROR);\n            }\n            break;\n        default:\n            console.error('Unhandled error scenario with arguments ', arguments);\n    }\n}\n\n/**\n * Publish an event to Sfdc. The event payload will be verified to be the correct type before being published. \n * @param {object} param\n * @param {(\"LOGIN_RESULT\"|\"LOGOUT_RESULT\"|\"CALL_STARTED\"|\"QUEUED_CALL_STARTED\"|\"CALL_CONNECTED\"|\"HANGUP\"|\"PARTICIPANT_CONNECTED\"|\"PARTICIPANT_ADDED\"|\"PARTICIPANTS_SWAPPED\"|\"PARTICIPANTS_CONFERENCED\"|\"MESSAGE\"|\"MUTE_TOGGLE\"|\"HOLD_TOGGLE\"|\"RECORDING_TOGGLE\")} param.eventType Event type to publish\n * @param {object} param.payload Payload for the event. Must to be an object of the payload class associated with the EVENT_TYPE else the event is NOT dispatched\n * @param {boolean} param.registerLog Boolean to opt out of registering logs for events\n * LOGIN_RESULT - GenericResult\n * LOGOUT_RESULT - LogoutResult\n * CALL_STARTED - CallResult\n * QUEUED_CALL_STARTED - CallResult\n * CALL_CONNECTED - CallResult\n * HANGUP - CallResult\n * PARTICIPANT_CONNECTED - ParticipantResult\n * PARTICIPANT_ADDED - ParticipantResult\n * PARTICIPANTS_SWAPPED - HoldToggleResult\n * PARTICIPANTS_CONFERENCED - HoldToggleResult\n * MESSAGE - object\n * MUTE_TOGGLE - MuteToggleResult\n * HOLD_TOGGLE - HoldToggleResult\n * RECORDING_TOGGLE - RecordingToggleResult\n */\nexport async function publishEvent({ eventType, payload, registerLog = true }) {\n    switch(eventType) {\n        case constants.EVENT_TYPE.LOGIN_RESULT: {\n            if (validatePayload(payload, GenericResult, constants.ERROR_TYPE.CAN_NOT_LOG_IN, constants.EVENT_TYPE.LOGIN_RESULT)) {\n                dispatchEvent(constants.EVENT_TYPE.LOGIN_RESULT, payload, registerLog);\n                if (payload.success) {\n                    setConnectorReady();\n                }\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.LOGOUT_RESULT:\n            if (validatePayload(payload, LogoutResult, constants.ERROR_TYPE.CAN_NOT_LOG_OUT, constants.EVENT_TYPE.LOGOUT_RESULT)) {\n                dispatchEvent(constants.EVENT_TYPE.LOGOUT_RESULT, {\n                    success: payload.success,\n                    loginFrameHeight: payload.loginFrameHeight\n                }, registerLog);\n            }\n            break;\n        case constants.EVENT_TYPE.CALL_STARTED:\n            if (validatePayload(payload, CallResult, constants.ERROR_TYPE.CAN_NOT_START_THE_CALL, constants.EVENT_TYPE.CALL_STARTED)) {\n                dispatchEvent(constants.EVENT_TYPE.CALL_STARTED, payload.call, registerLog);\n            }\n            break;\n        case constants.EVENT_TYPE.QUEUED_CALL_STARTED:\n            if (validatePayload(payload, CallResult, constants.ERROR_TYPE.CAN_NOT_START_THE_CALL, constants.EVENT_TYPE.QUEUED_CALL_STARTED)) {\n                dispatchEvent(constants.EVENT_TYPE.QUEUED_CALL_STARTED, payload.call, registerLog);\n            }\n            break;\n        case constants.EVENT_TYPE.CALL_CONNECTED:\n            if (validatePayload(payload, CallResult, constants.ERROR_TYPE.CAN_NOT_START_THE_CALL, constants.EVENT_TYPE.CALL_CONNECTED)) {\n                initAudioStats();\n                dispatchEvent(constants.EVENT_TYPE.CALL_CONNECTED, payload.call, registerLog);\n            }\n            break;\n        case constants.EVENT_TYPE.HANGUP: {\n            if (validatePayload(payload, HangupResult, constants.ERROR_TYPE.CAN_NOT_END_THE_CALL, constants.EVENT_TYPE.HANGUP)) {\n                dispatchEvent(constants.EVENT_TYPE.HANGUP, payload.calls, registerLog);\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.PARTICIPANT_ADDED: {\n            if (validatePayload(payload, ParticipantResult, constants.ERROR_TYPE.CAN_NOT_ADD_PARTICIPANT, constants.EVENT_TYPE.PARTICIPANT_ADDED)) {\n                const { initialCallHasEnded, callInfo, phoneNumber, callId } = payload;\n                dispatchEvent(constants.EVENT_TYPE.PARTICIPANT_ADDED, {\n                    initialCallHasEnded,\n                    callInfo,\n                    phoneNumber,\n                    callId\n                }, registerLog);\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.PARTICIPANT_CONNECTED: {\n            if (validatePayload(payload, ParticipantResult, constants.ERROR_TYPE.CAN_NOT_CONNECT_PARTICIPANT, constants.EVENT_TYPE.PARTICIPANT_CONNECTED)) {\n                const { initialCallHasEnded, callInfo, phoneNumber, callId } = payload;\n                dispatchEvent(constants.EVENT_TYPE.PARTICIPANT_CONNECTED, {\n                    initialCallHasEnded,\n                    callInfo,\n                    phoneNumber,\n                    callId\n                }, registerLog);\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.PARTICIPANT_REMOVED: {\n            // TODO: The logic here needs to be modified. Ideally firing CallResult with \n            // correct participantType should do the trick but we are firing PARTICIPANT_CONNECTED because of a bug W-8601645\n            // Once the bug is fixed, this code needs to be updated\n            if (validatePayload(payload, CallResult, constants.ERROR_TYPE.CAN_NOT_HANGUP_PARTICIPANT, constants.EVENT_TYPE.PARTICIPANT_REMOVED)) { \n                const { call } = payload;\n                const activeCallsResult = await vendorConnector.getActiveCalls();\n                if (validatePayload(activeCallsResult, ActiveCallsResult)) {\n                    // when no more active calls, fire HANGUP\n                    const activeCalls = activeCallsResult.activeCalls;\n                    if (activeCalls.length === 0) {\n                        dispatchEvent(constants.EVENT_TYPE.HANGUP, call, registerLog);\n                    } else if (call && call.callAttributes && call.callAttributes.participantType === constants.PARTICIPANT_TYPE.INITIAL_CALLER) {\n                        // when there is still transfer call, based on the state of the transfer call, fire PARTICIPANT_ADDED or PARTICIPANT_CONNECTED\n                        const transferCall = Object.values(activeCalls).filter((obj) => obj['callType'] === constants.CALL_TYPE.ADD_PARTICIPANT).pop();\n                        const event = transferCall.state === constants.CALL_STATE.TRANSFERRING ? constants.EVENT_TYPE.PARTICIPANT_ADDED : constants.EVENT_TYPE.PARTICIPANT_CONNECTED;\n                        dispatchEvent(event, {\n                            initialCallHasEnded : true\n                        })\n                    } else {\n                        dispatchEvent(constants.EVENT_TYPE.PARTICIPANT_REMOVED, {\n                            reason: call? call.reason : null\n                        }, registerLog);\n                    }\n                }\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.MESSAGE:\n            dispatchEvent(constants.EVENT_TYPE.MESSAGE, payload, registerLog);\n            break;\n        // TODO: Add validations for the ACW & Wrap up ended\n        case constants.EVENT_TYPE.AFTER_CALL_WORK_STARTED:\n            dispatchEvent(constants.EVENT_TYPE.AFTER_CALL_WORK_STARTED, payload, registerLog);\n            break;\n        case constants.EVENT_TYPE.WRAP_UP_ENDED:\n            dispatchEvent(constants.EVENT_TYPE.WRAP_UP_ENDED, payload, registerLog);\n            break;\n        /* This is only added to aid in connector development */\n        case constants.EVENT_TYPE.REMOTE_CONTROLLER:\n            channelMessageHandler(payload);\n            break;\n        case constants.EVENT_TYPE.MUTE_TOGGLE:\n            if (validatePayload(payload, MuteToggleResult, constants.ERROR_TYPE.CAN_NOT_TOGGLE_MUTE, constants.EVENT_TYPE.MUTE_TOGGLE)) {\n                dispatchEvent(constants.EVENT_TYPE.MUTE_TOGGLE, payload, registerLog);\n            }\n            break;\n        case constants.EVENT_TYPE.HOLD_TOGGLE: {\n            const { isThirdPartyOnHold, isCustomerOnHold, calls} = payload;\n            if (validatePayload(payload, HoldToggleResult, constants.ERROR_TYPE.CAN_NOT_TOGGLE_HOLD, constants.EVENT_TYPE.HOLD_TOGGLE)) {\n                dispatchEvent(constants.EVENT_TYPE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold,\n                    calls\n                }, registerLog);\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.RECORDING_TOGGLE: {\n            const { isRecordingPaused,\n                contactId,\n                initialContactId,\n                instanceId,\n                region\n            } = payload;\n            if (validatePayload(payload, RecordingToggleResult, constants.ERROR_TYPE.CAN_NOT_TOGGLE_RECORD, constants.EVENT_TYPE.RECORDING_TOGGLE)) {\n                dispatchEvent(constants.EVENT_TYPE.RECORDING_TOGGLE, {\n                    isRecordingPaused,\n                    contactId,\n                    initialContactId,\n                    instanceId,\n                    region\n                }, registerLog);\n            }\n        break;\n        }\n        case constants.EVENT_TYPE.PARTICIPANTS_SWAPPED: {\n            if (validatePayload(payload, HoldToggleResult, constants.ERROR_TYPE.CAN_NOT_SWAP_PARTICIPANTS, constants.EVENT_TYPE.PARTICIPANTS_SWAPPED)) {\n                const { isThirdPartyOnHold, isCustomerOnHold, calls } = payload;\n                dispatchEvent(constants.EVENT_TYPE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold,\n                    calls\n                }, registerLog);\n            }\n        }\n        break;\n        case constants.EVENT_TYPE.PARTICIPANTS_CONFERENCED: {\n            if (validatePayload(payload, HoldToggleResult, constants.ERROR_TYPE.CAN_NOT_CONFERENCE, constants.EVENT_TYPE.PARTICIPANTS_CONFERENCED)) {\n                const { isThirdPartyOnHold, isCustomerOnHold } = payload;\n                dispatchEvent(constants.EVENT_TYPE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold\n                }, registerLog);\n            }\n        break;\n        }\n        case constants.EVENT_TYPE.UPDATE_AUDIO_STATS: {\n            if (validatePayload(payload, AudioStats)) {\n                if (payload.stats) {\n                    updateAudioStats(payload.stats);\n                }\n                if (payload.isAudioStatsCompleted && payload.callId) {\n                    const callId = payload.callId;\n                    const mos = getMOS();\n                    dispatchEvent(constants.EVENT_TYPE.UPDATE_AUDIO_STATS_COMPLETED, {callId, mos}, registerLog);\n                }\n            }\n            break;\n        }\n    }\n}"],"sourceRoot":""}
{"version":3,"sources":["webpack://SCVConnectorBase/webpack/universalModuleDefinition","webpack://SCVConnectorBase/webpack/bootstrap","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/createClass.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/defineProperty.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/regenerator/index.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/typeof.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/asyncToGenerator.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/getPrototypeOf.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/inherits.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","webpack://SCVConnectorBase/./node_modules/regenerator-runtime/runtime.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/setPrototypeOf.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/assertThisInitialized.js","webpack://SCVConnectorBase/./src/main/constants.js","webpack://SCVConnectorBase/./src/main/logger.js","webpack://SCVConnectorBase/./src/main/downloadData.js","webpack://SCVConnectorBase/./src/main/types.js","webpack://SCVConnectorBase/./src/main/mosUtil.js","webpack://SCVConnectorBase/./src/main/baseConnector.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_defineProperties","target","props","length","descriptor","configurable","writable","Constructor","protoProps","staticProps","instance","TypeError","obj","_typeof","iterator","constructor","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","error","done","Promise","then","fn","self","args","arguments","apply","err","undefined","_getPrototypeOf","setPrototypeOf","getPrototypeOf","__proto__","subClass","superClass","assertThisInitialized","runtime","Op","hasOwn","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","context","Context","_invoke","state","method","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","makeInvokeMethod","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","invoke","result","__await","unwrapped","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","mark","awrap","async","iter","keys","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","globalThis","Function","_setPrototypeOf","ReferenceError","MESSAGE_TYPE","SETUP_CONNECTOR","CONNECTOR_READY","LOG","TELEPHONY_EVENT_DISPATCHED","ACCEPT_CALL","DECLINE_CALL","END_CALL","MUTE","UNMUTE","HOLD","RESUME","SET_AGENT_STATUS","GET_AGENT_STATUS","DIAL","SEND_DIGITS","GET_PHONE_CONTACTS","SWAP_PARTICIPANTS","ADD_PARTICIPANT","CONFERENCE","PAUSE_RECORDING","RESUME_RECORDING","LOGOUT","MESSAGE","WRAP_UP_CALL","AGENT_AVAILABLE","SET_AGENT_CONFIG","GET_SIGNED_RECORDING_URL","DOWNLOAD_VENDOR_LOGS","SUPERVISE_CALL","SUPERVISOR_BARGE_IN","SUPERVISOR_DISCONNECT","EVENT_TYPE","QUEUED_CALL_STARTED","CALL_STARTED","CALL_CONNECTED","CALL_FAILED","MUTE_TOGGLE","HOLD_TOGGLE","HANGUP","ERROR","WARNING","INFO","PHONE_CONTACTS","PARTICIPANT_ADDED","PARTICIPANT_CONNECTED","PARTICIPANT_REMOVED","LOGIN_STARTED","LOGIN_RESULT","LOGOUT_RESULT","RECORDING_TOGGLE","PARTICIPANTS_SWAPPED","PARTICIPANTS_CONFERENCED","SHOW_LOGIN","SET_AGENT_STATUS_RESULT","GET_AGENT_STATUS_RESULT","WRAP_UP_ENDED","AFTER_CALL_WORK_STARTED","AGENT_CONFIG_UPDATED","AGENT_ERROR","SOFTPHONE_ERROR","SIGNED_RECORDING_URL","UPDATE_AUDIO_STATS","UPDATE_AUDIO_STATS_COMPLETED","SUPERVISOR_BARGED_IN","SUPERVISOR_CALL_STARTED","SUPERVISOR_CALL_CONNECTED","SUPERVISOR_HANGUP","CALL_BARGED_IN","STATE_CHANGE","INFO_TYPE","CAN_NOT_ACCEPT_THE_CALL","ERROR_TYPE","GENERIC_ERROR","MICROPHONE_NOT_SHARED","UNSUPPORTED_BROWSER","AUTHENTICATION_ERROR","INVALID_AGENT_STATUS","CAN_NOT_SET_AGENT_STATUS","LOGIN_REQUIRED","CAN_NOT_DECLINE_THE_CALL","CAN_NOT_END_THE_CALL","CAN_NOT_HOLD_CALL","CAN_NOT_RESUME_CALL","CAN_NOT_MUTE_CALL","CAN_NOT_UNMUTE_CALL","CAN_NOT_TOGGLE_MUTE","CAN_NOT_TOGGLE_HOLD","CAN_NOT_TOGGLE_RECORD","INVALID_PARTICIPANT","CAN_NOT_LOG_IN","CAN_NOT_LOG_OUT","INVALID_PARAMS","CAN_NOT_GET_PHONE_CONTACTS","CAN_NOT_SWAP_PARTICIPANTS","CAN_NOT_CONFERENCE","INVALID_DESTINATION","INVALID_PHONE_NUMBER","CAN_NOT_HANGUP_PARTICIPANT","CAN_NOT_ADD_PARTICIPANT","CAN_NOT_CONNECT_PARTICIPANT","CAN_NOT_START_THE_CALL","CAN_NOT_PAUSE_RECORDING","CAN_NOT_RESUME_RECORDING","CAN_NOT_SET_AGENT_CONFIG","CAN_NOT_SET_CAPABILITIES","CAN_NOT_UPDATE_PHONE_NUMBER","CAN_NOT_GET_SIGNED_RECORDING_URL","CAN_NOT_SUPERVISE_CALL","CAN_NOT_DISCONNECT_SUPERVISOR","CAN_NOT_BARGE_IN_SUPERVISOR","CAN_NOT_BARGE_IN_CALL","CAN_NOT_GET_AGENT_STATUS","INVALID_STATE_CHANGE_RESULT","AGENT_STATUS","ONLINE","OFFLINE","ACW","CALLBACK_MISSED_OR_REJECTED","PARTICIPANT_TYPE","AGENT","INITIAL_CALLER","THIRD_PARTY","SUPERVISOR","CALL_TYPE","INBOUND","OUTBOUND","CALLBACK","TRANSFER","DIALER_TYPE","OUTBOUND_PREVIEW","NONE","CONTACT_TYPE","PHONEBOOK","QUEUE","PHONENUMBER","FLOW","AGENT_CONFIG_TYPE","SHOW_AGENT_SETTINGS","PHONES","SELECTED_PHONE","CAPABILITIES_TYPE","RECORD","MERGE","SWAP","DEBUG_ENABLED","CONTACT_SEARCH","VENDOR_PROVIDED_AVAILABILITY","SUPERVISOR_LISTEN_IN","MOS","BLIND_TRANSFER","TRANSFER_TO_OMNI_FLOW","PENDING_STATUS_CHANGE","CALL_STATE","RINGING","CONNECTED","TRANSFERRING","TRANSFERRED","ENDED","PHONE_TYPE","DESK_PHONE","SOFT_PHONE","HANGUP_REASON","PHONE_CALL_ERROR","PHONE_CALL_ENDED","AGENT_AVAILABILITY","AVAILABLE","BUSY","REMOVE_PARTICIPANT_VARIANT","ALWAYS","NEVER","ALWAYS_EXCEPT_ON_HOLD","LOG_LEVEL","LOG_SOURCE","SYSTEM","PARTNER","CONTACTS_FILTER_TYPES","CONNECTOR_CONFIG_EXPOSED_FIELDS","CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH","_strify","JSON","stringify","LOGS_SIZE","logs","log","logMessage","logLevel","logSource","constants","logStr","Date","toISOString","join","_log","getLogs","parse","downloadLogs","data","fileName","fileType","document","dataStr","file","Blob","a","createElement","blobURL","URL","createObjectURL","download","href","body","appendChild","click","removeChild","revokeObjectURL","downloadData","getTime","audioStatus","channelPort","vendorConnector","isSupervisorConnected","Constants","Phone","number","Validator","validateEnum","validateString","MuteToggleResult","isMuted","ActiveCallsResult","activeCalls","activeCall","validateClassObject","PhoneCall","CapabilitiesResult","hasMute","hasRecord","hasMerge","hasSwap","hasSignedRecordingUrl","debugEnabled","hasContactSearch","hasAgentAvailability","supportsMos","hasSupervisorListenIn","hasSupervisorBargeIn","hasBlindTransfer","hasTransferToOmniFlow","hasPendingStatusChange","validateBoolean","AgentConfigResult","phones","selectedPhone","Array","AgentConfig","RecordingToggleResult","isRecordingPaused","contactId","initialContactId","instanceId","region","ParticipantResult","initialCallHasEnded","callInfo","phoneNumber","callId","CallInfo","PhoneContactsResult","contacts","contactTypes","contact","Contact","filterType","CallResult","HangupResult","calls","HoldToggleResult","isThirdPartyOnHold","isCustomerOnHold","SignedRecordingUrlResult","success","url","duration","validateNumber","InitResult","showLogin","loginFrameHeight","GenericResult","LogoutResult","callStateTimestamp","isOnHold","initialCallId","isSoftphoneCall","acceptEnabled","declineEnabled","muteEnabled","swapEnabled","conferenceEnabled","holdEnabled","recordEnabled","addCallerEnabled","extensionEnabled","isReplayable","isBargeable","isExternalTransfer","removeParticipantVariant","validateDate","id","prefix","extension","endpointARN","queue","availability","recordId","description","PhoneCallAttributes","voiceCallId","participantType","dialerType","parentId","hasSupervisorBargedIn","callType","callAttributes","reason","closeCallOnError","agentStatus","VendorConnector","config","statusInfo","enqueueNextState","logMessageToVendor","digits","call1","call2","message","recordingUrl","vendorCallKey","payload","enumValues","RegExp","test","className","AgentStatusInfo","statusId","statusApiName","statusName","AgentVendorStatusInfo","statusType","StateChangeResult","newVendorStateInfo","oldVendorStateInfo","SupervisedCallInfo","from","to","supervisorName","isBargedIn","AudioStats","stats","isAudioStatsCompleted","audioStatsElement","AudioStatsElement","inputChannelStats","outputChannelStats","StatsInfo","packetsCount","packetsLost","jitterBufferMillis","roundTripTimeMillis","statsCount","SuperviseCallResult","SupervisorHangupResult","getMOSByStream","streamType","avgStats","getAvgStats","effectiveLatency","R","enableMos","getMOS","inputChannelMOS","ouputChannelMOS","Math","min","initAudioStats","updateAudioStats","statsArray","getErrorType","e","getErrorMessage","dispatchEventLog","eventType","isError","sanitizedPayload","sanitizePayload","isArray","element","postMessage","dispatchEvent","registerLog","telephonyEventType","telephonyEventPayload","dispatchError","errorType","console","dispatchInfo","setConnectorReady","getAgentConfig","agentConfigResult","getCapabilities","capabilitiesResult","getActiveCalls","activeCallsResult","agentConfig","capabilities","callInProgress","channelMessageHandler","toLowerCase","supervisorDisconnect","hangupPayload","acceptCall","messagetype","additionalInfo","declineCall","endCall","mute","publishEvent","unmute","hold","resume","setAgentStatus","getAgentStatus","dial","sendDigits","getPhoneContacts","filter","map","swap","callToHold","callToResume","conference","addParticipant","isBlindTransfer","pauseRecording","resumeRecording","logout","handleMessage","wrapUpCall","isAvailable","shouldReplay","isSupervisorCall","isReplayedCall","setAgentConfig","getSignedRecordingUrl","signedRecordingUrlResult","superviseCall","supervisorBargeIn","windowMessageHandler","sfDomain","originUrl","origin","protocol","hostname","ports","onmessage","exposedConnectorConfig","connectorConfig","init","window","removeEventListener","prop","startsWith","validatePayload","payloadType","initializeConnector","connector","addEventListener","publishLog","publishError","REMOTE_CONTROLLER","transferCall","mos"],"mappings":"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","file":"scv-connector-base.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SCVConnectorBase\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SCVConnectorBase\"] = factory();\n\telse\n\t\troot[\"SCVConnectorBase\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 12);\n","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","module.exports = require(\"regenerator-runtime\");\n","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(obj);\n}\n\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\n\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nexport default {\n    MESSAGE_TYPE: {\n        // Framework Message Types\n        SETUP_CONNECTOR: 'SETUP_CONNECTOR',\n        CONNECTOR_READY: 'CONNECTOR_READY',\n\n        // Telephony Message Types: sent from SFDC to Telephony Vendor\n        LOG: 'LOG',\n        TELEPHONY_EVENT_DISPATCHED: 'TELEPHONY_EVENT_DISPATCHED',\n        ACCEPT_CALL: 'ACCEPT_CALL',\n        DECLINE_CALL: 'DECLINE_CALL',\n        END_CALL: 'END_CALL',\n        MUTE: 'MUTE',\n        UNMUTE: 'UNMUTE',\n        HOLD: 'HOLD',\n        RESUME: 'RESUME',\n        SET_AGENT_STATUS: 'SET_AGENT_STATUS',\n        GET_AGENT_STATUS: 'GET_AGENT_STATUS',\n        DIAL: 'DIAL',\n        SEND_DIGITS: 'SEND_DIGITS',\n        GET_PHONE_CONTACTS: 'GET_PHONE_CONTACTS',\n        SWAP_PARTICIPANTS: 'SWAP_PARTICIPANTS',\n        ADD_PARTICIPANT: 'ADD_PARTICIPANT',\n        CONFERENCE: 'CONFERENCE',\n        PAUSE_RECORDING: 'PAUSE_RECORDING',\n        RESUME_RECORDING: 'RESUME_RECORDING',\n        LOGOUT: 'LOGOUT',\n        MESSAGE: 'MESSAGE',\n        WRAP_UP_CALL: 'WRAP_UP_CALL',\n        AGENT_AVAILABLE: 'AGENT_AVAILABLE',\n        SET_AGENT_CONFIG: 'SET_AGENT_CONFIG',\n        GET_SIGNED_RECORDING_URL: 'GET_SIGNED_RECORDING_URL',\n        DOWNLOAD_VENDOR_LOGS: 'DOWNLOAD_VENDOR_LOGS',\n        SUPERVISE_CALL: 'SUPERVISE_CALL',\n        SUPERVISOR_BARGE_IN : 'SUPERVISOR_BARGE_IN',\n        SUPERVISOR_DISCONNECT: 'SUPERVISOR_DISCONNECT'\n    },\n    EVENT_TYPE: {\n        QUEUED_CALL_STARTED: 'QUEUED_CALL_STARTED',\n        CALL_STARTED: 'CALL_STARTED',\n        CALL_CONNECTED: 'CALL_CONNECTED',\n        CALL_FAILED: 'CALL_FAILED',\n        MUTE_TOGGLE: 'MUTE_TOGGLE',\n        HOLD_TOGGLE: 'HOLD_TOGGLE',\n        HANGUP: 'HANGUP',\n        ERROR: 'ERROR',\n        WARNING: 'WARNING',\n        INFO: 'INFO',\n        PHONE_CONTACTS: 'PHONE_CONTACTS',\n        PARTICIPANT_ADDED: 'PARTICIPANT_ADDED',\n        PARTICIPANT_CONNECTED: 'PARTICIPANT_CONNECTED',\n        PARTICIPANT_REMOVED: 'PARTICIPANT_REMOVED',\n        LOGIN_STARTED: 'LOGIN_STARTED',\n        LOGIN_RESULT: 'LOGIN_RESULT', // info about timeout, error, success etc\n        LOGOUT_RESULT: 'LOGOUT_RESULT',\n        RECORDING_TOGGLE: 'RECORDING_TOGGLE',\n        PARTICIPANTS_SWAPPED: 'PARTICIPANTS_SWAPPED',\n        PARTICIPANTS_CONFERENCED: 'PARTICIPANTS_CONFERENCED',\n        SHOW_LOGIN: 'SHOW_LOGIN',\n        SET_AGENT_STATUS_RESULT: 'SET_AGENT_STATUS_RESULT',\n        GET_AGENT_STATUS_RESULT: 'GET_AGENT_STATUS_RESULT',\n        WRAP_UP_ENDED: 'WRAP_UP_ENDED',\n        MESSAGE: 'MESSAGE',\n        AFTER_CALL_WORK_STARTED: 'AFTER_CALL_WORK_STARTED',\n        AGENT_CONFIG_UPDATED: 'AGENT_CONFIG_UPDATED',\n        AGENT_ERROR: 'AGENT_ERROR',\n        SOFTPHONE_ERROR: 'SOFTPHONE_ERROR',\n        SIGNED_RECORDING_URL: 'SIGNED_RECORDING_URL',\n        UPDATE_AUDIO_STATS: 'UPDATE_AUDIO_STATS',\n        UPDATE_AUDIO_STATS_COMPLETED: 'UPDATE_AUDIO_STATS_COMPLETED',\n        SUPERVISOR_BARGED_IN: 'SUPERVISOR_BARGED_IN',\n        SUPERVISOR_CALL_STARTED : 'SUPERVISOR_CALL_STARTED',\n        SUPERVISOR_CALL_CONNECTED: 'SUPERVISOR_CALL_CONNECTED',\n        SUPERVISOR_HANGUP : 'SUPERVISOR_HANGUP',\n        CALL_BARGED_IN : 'CALL_BARGED_IN',\n        SET_AGENT_STATUS: 'SET_AGENT_STATUS',\n        GET_AGENT_STATUS: 'GET_AGENT_STATUS',\n        STATE_CHANGE: 'STATE_CHANGE'\n    },\n    INFO_TYPE: {\n        CAN_NOT_ACCEPT_THE_CALL: 'CAN_NOT_ACCEPT_THE_CALL'\n    },\n    ERROR_TYPE: {\n        GENERIC_ERROR: 'GENERIC_ERROR',\n        AGENT_ERROR: 'AGENT_ERROR',\n        MICROPHONE_NOT_SHARED: 'MICROPHONE_NOT_SHARED',\n        UNSUPPORTED_BROWSER: 'UNSUPPORTED_BROWSER',\n        AUTHENTICATION_ERROR: 'AUTHENTICATION_ERROR',\n        INVALID_AGENT_STATUS: 'INVALID_AGENT_STATUS',\n        CAN_NOT_SET_AGENT_STATUS: 'CAN_NOT_SET_AGENT_STATUS',\n        LOGIN_REQUIRED: 'LOGIN_REQUIRED',\n        CAN_NOT_DECLINE_THE_CALL: 'CAN_NOT_DECLINE_THE_CALL',\n        CAN_NOT_END_THE_CALL: 'CAN_NOT_END_THE_CALL',\n        CAN_NOT_HOLD_CALL: 'CAN_NOT_HOLD_CALL',\n        CAN_NOT_RESUME_CALL: 'CAN_NOT_RESUME_CALL',\n        CAN_NOT_MUTE_CALL: 'CAN_NOT_MUTE_CALL',\n        CAN_NOT_UNMUTE_CALL: 'CAN_NOT_UNMUTE_CALL',\n        CAN_NOT_TOGGLE_MUTE: 'CAN_NOT_TOGGLE_MUTE',\n        CAN_NOT_TOGGLE_HOLD: 'CAN_NOT_TOGGLE_HOLD',\n        CAN_NOT_TOGGLE_RECORD: 'CAN_NOT_TOGGLE_RECORD',\n        INVALID_PARTICIPANT: 'INVALID_PARTICIPANT',\n        CAN_NOT_LOG_IN: 'CAN_NOT_LOG_IN',\n        CAN_NOT_LOG_OUT: 'CAN_NOT_LOG_OUT',\n        INVALID_PARAMS: 'INVALID_PARAMS',\n        CAN_NOT_GET_PHONE_CONTACTS: 'CAN_NOT_GET_PHONE_CONTACTS',\n        CAN_NOT_SWAP_PARTICIPANTS: 'CAN_NOT_SWAP_PARTICIPANTS',\n        CAN_NOT_CONFERENCE: 'CAN_NOT_CONFERENCE',\n        INVALID_DESTINATION: 'INVALID_DESTINATION',\n        INVALID_PHONE_NUMBER: 'INVALID_PHONE_NUMBER',\n        CAN_NOT_HANGUP_PARTICIPANT: 'CAN_NOT_HANGUP_PARTICIPANT',\n        CAN_NOT_ADD_PARTICIPANT: 'CAN_NOT_ADD_PARTICIPANT',\n        CAN_NOT_CONNECT_PARTICIPANT: 'CAN_NOT_CONNECT_PARTICIPANT',\n        CAN_NOT_START_THE_CALL: 'CAN_NOT_START_THE_CALL',\n        CAN_NOT_PAUSE_RECORDING: 'CAN_NOT_PAUSE_RECORDING',\n        CAN_NOT_RESUME_RECORDING: 'CAN_NOT_RESUME_RECORDING',\n        CAN_NOT_SET_AGENT_CONFIG: 'CAN_NOT_SET_AGENT_CONFIG',\n        CAN_NOT_SET_CAPABILITIES: 'CAN_NOT_SET_CAPABILITIES',\n        CAN_NOT_UPDATE_PHONE_NUMBER: 'CAN_NOT_UPDATE_PHONE_NUMBER',\n        CAN_NOT_GET_SIGNED_RECORDING_URL: 'CAN_NOT_GET_SIGNED_RECORDING_URL',\n        CAN_NOT_SUPERVISE_CALL : 'CAN_NOT_SUPERVISE_CALL',\n        CAN_NOT_DISCONNECT_SUPERVISOR : 'CAN_NOT_DISCONNECT_SUPERVISOR',\n        CAN_NOT_BARGE_IN_SUPERVISOR: 'CAN_NOT_BARGE_IN_SUPERVISOR',\n        CAN_NOT_BARGE_IN_CALL: 'CAN_NOT_BARGE_IN_CALL',\n        CAN_NOT_GET_AGENT_STATUS: 'CAN_NOT_GET_AGENT_STATUS',\n        INVALID_STATE_CHANGE_RESULT: 'INVALID_STATE_CHANGE_RESULT'\n    },\n    AGENT_STATUS: {\n        ONLINE: 'Online',\n        OFFLINE: 'Offline',\n        ACW : 'AfterCallWork',\n        CALLBACK_MISSED_OR_REJECTED: 'CallbackMissedOrRejected' // Used only for Amazon; workaround for https://github.com/amazon-connect/amazon-connect-streams/issues/344\n    },\n    PARTICIPANT_TYPE: {\n        AGENT: 'Agent',\n        INITIAL_CALLER: 'Initial_Caller',\n        THIRD_PARTY: 'Third_Party',\n        SUPERVISOR: 'Supervisor'\n    },\n    CALL_TYPE: {\n        INBOUND: 'Inbound',\n        OUTBOUND: 'Outbound',\n        CALLBACK: 'Callback',\n        ADD_PARTICIPANT: 'AddParticipant',\n        TRANSFER:'Transfer'\n    },\n    DIALER_TYPE: {\n        OUTBOUND_PREVIEW: 'OutboundPreview',\n        NONE: 'None'\n    },\n    CONTACT_TYPE: {\n        PHONEBOOK: 'PhoneBook',\n        QUEUE: 'Queue',\n        PHONENUMBER: 'PhoneNumber',\n        AGENT: 'Agent',\n        FLOW: 'Flow'\n    },\n    AGENT_CONFIG_TYPE: {\n        SHOW_AGENT_SETTINGS: 'SHOW_AGENT_SETTINGS',\n        PHONES: 'PHONES',\n        SELECTED_PHONE: 'SELECTED_PHONE'\n    },\n    CAPABILITIES_TYPE: {\n        MUTE: 'MUTE',\n        RECORD: 'RECORD',\n        MERGE: 'MERGE',\n        SWAP: 'SWAP',\n        SIGNED_RECORDING_URL: 'SIGNED_RECORDING_URL',\n        DEBUG_ENABLED: 'DEBUG_ENABLED',\n        CONTACT_SEARCH: 'CONTACT_SEARCH',\n        VENDOR_PROVIDED_AVAILABILITY: 'VENDOR_PROVIDED_AVAILABILITY',\n        SUPERVISOR_LISTEN_IN: 'SUPERVISOR_LISTEN_IN',\n        SUPERVISOR_BARGE_IN: 'SUPERVISOR_BARGE_IN',\n        MOS: 'MOS',\n        BLIND_TRANSFER: 'BLIND_TRANSFER',\n        TRANSFER_TO_OMNI_FLOW: 'TRANSFER_TO_OMNI_FLOW',\n        PENDING_STATUS_CHANGE: 'PENDING_STATUS_CHANGE'\n    },\n    CALL_STATE: {\n        RINGING: 'ringing',\n        CONNECTED: 'connected',\n        TRANSFERRING: 'transferring',\n        TRANSFERRED: 'transferred',\n        ENDED: 'ended'\n    },\n    PHONE_TYPE: {\n        DESK_PHONE: 'DESK_PHONE',\n        SOFT_PHONE: 'SOFT_PHONE'\n    },\n    HANGUP_REASON: {\n        PHONE_CALL_ERROR: \"error\",\n        PHONE_CALL_ENDED: \"ended\"\n    },\n    AGENT_AVAILABILITY: {\n        AVAILABLE: \"AVAILABLE\",\n        BUSY: \"BUSY\",\n        OFFLINE: \"OFFLINE\"\n    },\n    REMOVE_PARTICIPANT_VARIANT: {\n        ALWAYS : 'ALWAYS',\n        NEVER: 'NEVER',\n        ALWAYS_EXCEPT_ON_HOLD: 'ALWAYS_EXCEPT_ON_HOLD'\n    },\n    LOG_LEVEL: {\n        ERROR: \"ERROR\",\n        INFO: \"INFO\"\n    },\n    LOG_SOURCE: {\n        SYSTEM: \"SYSTEM\",\n        PARTNER: \"PARTNER\"\n    },\n    CONTACTS_FILTER_TYPES: {\n        \"AGENT\": \"AGENT\",\n        \"QUEUE\": \"QUEUE\",\n        \"CONTACT\": \"CONTACT\",\n        \"DIRECTORY\": \"DIRECTORY\",\n        \"FLOW\": \"FLOW\",\n        \"AVAILABLE\": \"AVAILABLE\"\n    }\n};\n\n/**\n * Fields in the connector configuration that are logged. \n */\nexport const CONNECTOR_CONFIG_EXPOSED_FIELDS = [\n    \"/internalNameLabel\",\n    \"/reqGeneralInfo/reqAdapterUrl\",\n    \"/reqGeneralInfo/reqVendorInfoApiName\",\n    \"isACWAllowed\",\n    \"isHVSEnabled\",\n    \"orgDomainName\",\n    \"phoneServiceChannelId\",\n    \"telephonySettingsComponentFqn\"\n];\n\n/**\n * Fields that starts with string in the connector configuration that are logged. \n */\nexport const CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH = [\n    \"/reqHvcc\"\n];\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport { downloadData } from './downloadData.js';\nimport constants from './constants';\n\n//The max size of the logs in # of characaters\nconst MAX_LOGS_SIZE = 1.5e7/2; //15 MB or 7.5M characters\n\nconst _strify = obj => (typeof obj === 'string') ? obj : JSON.stringify(obj);\n\nlet LOGS_SIZE = 0;\nlet logs = [];\n\nfunction _log(logLevel, logMessage, logSource) {\n    if(!logMessage) {\n        throw new Error(\"Log Message required\");\n    }\n    logLevel  = logLevel  || constants.LOG_LEVEL.INFO;\n    logSource = logSource || constants.LOG_SOURCE.PARTNER;\n\n    const logStr = [new Date().toISOString(), _strify(logLevel), _strify(logSource), `${_strify(logMessage)}\\n`].join(\"|\");\n    \n    //If logs size is greater than max size, empty it.\n    if(LOGS_SIZE + logStr.length >= MAX_LOGS_SIZE) {\n        logs = []; \n        LOGS_SIZE = 0;\n    }\n    LOGS_SIZE += logStr.length;\n    logs.push(logStr);\n}\n\n/**\n * Log a message at a custom level.\n * @param {object} logMessage\n * @param {string} logLevel \n * @param {string} [logSource]\n */\nexport function log(logMessage, logLevel, logSource) {\n    _log(logLevel, logMessage, logSource);\n}\n\n/**\n * \n * @returns a deep copy of the logs array\n */\nexport function getLogs() {\n    return JSON.parse(JSON.stringify(logs));\n}\n\n/**\n * Download the logs as a file\n */\nexport function downloadLogs() {\n    downloadData(logs.join(''), `log-${new Date().getTime()}.txt`, 'text/plain');\n}\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * Download data as a file.\n * @param {object} data \n * @param {string} fileName \n * @param {string} fileType\n */\n export function downloadData(data, fileName, fileType) {\n    if(!document || !data) return;\n    \n    const dataStr = (typeof data === 'string') ? data : JSON.stringify(data);\n    const file = new Blob([dataStr], {type: fileType});\n    let a = document.createElement(\"a\") \n    const blobURL = URL.createObjectURL(file);\n    a.download = fileName;\n    a.href = blobURL;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(blobURL);\n}","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/* eslint-disable no-unused-vars */\nimport constants from './constants.js';\nimport { downloadLogs } from './logger.js';\n\nexport const Constants = {\n    EVENT_TYPE: {\n        LOGIN_RESULT: constants.EVENT_TYPE.LOGIN_RESULT,\n        LOGOUT_RESULT: constants.EVENT_TYPE.LOGOUT_RESULT,\n        CALL_STARTED: constants.EVENT_TYPE.CALL_STARTED,\n        QUEUED_CALL_STARTED: constants.EVENT_TYPE.QUEUED_CALL_STARTED,\n        CALL_CONNECTED: constants.EVENT_TYPE.CALL_CONNECTED,\n        HANGUP: constants.EVENT_TYPE.HANGUP,\n        MUTE_TOGGLE: constants.EVENT_TYPE.MUTE_TOGGLE,\n        HOLD_TOGGLE: constants.EVENT_TYPE.HOLD_TOGGLE,\n        RECORDING_TOGGLE: constants.EVENT_TYPE.RECORDING_TOGGLE,\n        PARTICIPANTS_SWAPPED: constants.EVENT_TYPE.PARTICIPANTS_SWAPPED,\n        PARTICIPANTS_CONFERENCED: constants.EVENT_TYPE.PARTICIPANTS_CONFERENCED,\n        PARTICIPANT_ADDED: constants.EVENT_TYPE.PARTICIPANT_ADDED, \n        PARTICIPANT_CONNECTED: constants.EVENT_TYPE.PARTICIPANT_CONNECTED,\n        PARTICIPANT_REMOVED: constants.EVENT_TYPE.PARTICIPANT_REMOVED,\n        MESSAGE: constants.EVENT_TYPE.MESSAGE,\n        AFTER_CALL_WORK_STARTED: constants.EVENT_TYPE.AFTER_CALL_WORK_STARTED,\n        WRAP_UP_ENDED: constants.EVENT_TYPE.WRAP_UP_ENDED,\n        AGENT_ERROR: constants.EVENT_TYPE.AGENT_ERROR,\n        SOFTPHONE_ERROR: constants.EVENT_TYPE.SOFTPHONE_ERROR,\n        UPDATE_AUDIO_STATS: constants.EVENT_TYPE.UPDATE_AUDIO_STATS,\n        SUPERVISOR_BARGED_IN: constants.EVENT_TYPE.SUPERVISOR_BARGED_IN,\n        SUPERVISOR_CALL_STARTED : constants.EVENT_TYPE.SUPERVISOR_CALL_STARTED,\n        SUPERVISOR_CALL_CONNECTED: constants.EVENT_TYPE.SUPERVISOR_CALL_CONNECTED,\n        SUPERVISOR_HANGUP : constants.EVENT_TYPE.SUPERVISOR_HANGUP,\n        SET_AGENT_STATUS: constants.EVENT_TYPE.SET_AGENT_STATUS,\n        GET_AGENT_STATUS: constants.EVENT_TYPE.GET_AGENT_STATUS,\n        STATE_CHANGE: constants.EVENT_TYPE.STATE_CHANGE\n    },\n    /**\n    * @enum {string}\n    */\n    ERROR_TYPE: {\n        GENERIC_ERROR: constants.ERROR_TYPE.GENERIC_ERROR,\n        INVALID_PARTICIPANT: constants.ERROR_TYPE.INVALID_PARTICIPANT,\n        INVALID_DESTINATION: constants.ERROR_TYPE.INVALID_DESTINATION,\n        INVALID_PARAMS: constants.ERROR_TYPE.INVALID_PARAMS,\n        INVALID_AGENT_STATUS: constants.ERROR_TYPE.INVALID_AGENT_STATUS,\n        CAN_NOT_UPDATE_PHONE_NUMBER: constants.ERROR_TYPE.CAN_NOT_UPDATE_PHONE_NUMBER\n    },\n    /**\n    * @enum {string}\n    */\n    AGENT_STATUS: { ...constants.AGENT_STATUS },\n    /**\n    * @enum {string}\n    */\n    PARTICIPANT_TYPE: { ...constants.PARTICIPANT_TYPE },\n    /**\n    * @enum {string}\n    */\n    CALL_TYPE: { ...constants.CALL_TYPE },\n    /**\n    * @enum {string}\n    */\n    DIALER_TYPE: { ...constants.DIALER_TYPE },\n    /**\n    * @enum {string}\n    */\n    CONTACT_TYPE: { ...constants.CONTACT_TYPE },\n    /**\n    * @enum {string}\n    */\n    CALL_STATE: { ...constants.CALL_STATE },\n    /**\n    * @enum {string}\n    */\n    HANGUP_REASON: { ...constants.HANGUP_REASON },\n    /**\n    * @enum {string}\n    */\n    PHONE_TYPE: { ...constants.PHONE_TYPE },\n    /**\n     * @enum {String}\n     */\n    AGENT_AVAILABILITY: { ...constants.AGENT_AVAILABILITY },\n    /**\n     * @enum (String)\n     */\n     REMOVE_PARTICIPANT_VARIANT: { ...constants.REMOVE_PARTICIPANT_VARIANT },\n    /**\n     * @enum {String}\n     */\n    LOG_LEVEL: { ...constants.LOG_LEVEL },\n    /**\n     * @enum {String}\n     */\n    CONTACTS_FILTER_TYPES: { ...constants.CONTACTS_FILTER_TYPES }\n};\n\n/**\n * Class representing a Phone type\n */\n export class Phone {\n    /**\n     * Create Phone\n     * @param {object} param\n     * @param {PHONE_TYPE} param.type\n     * @param {string} [param.number]\n     */\n    constructor({ type, number}) {\n        Validator.validateEnum(type, Object.values(constants.PHONE_TYPE));\n        if(number) {\n            Validator.validateString(number);\n        }\n        this.type = type;\n        this.number = number;\n    }\n}\n\n/**\n * Class representing result type for mute() & unmute()\n */\nexport class MuteToggleResult {\n    /**\n     * Create ActiveCallsResult\n     * @param {object} param\n     * @param {boolean} param.isMuted\n     */\n    constructor({ isMuted }) {\n        this.isMuted = isMuted;\n    }\n}\n\n/**\n * Class representing result type for getActiveCalls()\n */\nexport class ActiveCallsResult {\n    /**\n     * Create ActiveCallsResult\n     * @param {object} param\n     * @param {PhoneCall[]} [param.activeCalls]\n     */\n    constructor({ activeCalls = [] }) {\n        if (activeCalls.length > 0) {\n            activeCalls.forEach(activeCall => {\n                Validator.validateClassObject(activeCall, PhoneCall);\n            });\n        }\n        this.activeCalls = activeCalls;\n    }\n}\n\n/**\n * Class representing result type for getCapabilities()\n */\nexport class CapabilitiesResult {\n    /**\n     * Create CapabilitiesResult\n     * @param {object} param\n     * @param {boolean} [param.hasMute]\n     * @param {boolean} [param.hasRecord]\n     * @param {boolean} [param.hasMerge]\n     * @param {boolean} [param.hasSwap]\n     * @param {boolean} [param.hasSignedRecordingUrl]\n     * @param {boolean} [param.debugEnabled]\n     * @param {boolean} [param.hasContactSearch] True if getPhoneContacts uses the 'contain' filter\n     * @param {boolean} [param.hasAgentAvailability] True if getPhoneContacts also provides agent availability\n     * @param {boolean} [param.supportsMos] True if vendor support MOS\n     * @param {boolean} [param.hasSupervisorListenIn] True if vendor supports supervisor listening  to a ongoing call\n     * @param {boolean} [param.hasSupervisorBargeIn] True if vendor supports Supervisor  barging into a ongoing call\n     * @param {boolean} [param.hasBlindTransfer] True if vendor supports blind transfers\n     * @param {boolean} [param.hasBlindTransfer] True if vendor supports transfer to omni flows\n     * @param {boolean} [param.hasPendingStatusChange] True if vendor supports Pending Status Change\n     */\n     constructor({ hasMute = true, hasRecord = true, hasMerge = true, hasSwap = true, hasSignedRecordingUrl = false, debugEnabled = true, hasContactSearch = false, hasAgentAvailability = false, supportsMos = false, hasSupervisorListenIn = false, hasSupervisorBargeIn = false, hasBlindTransfer = false, hasTransferToOmniFlow = false, hasPendingStatusChange=false }) {\n        Validator.validateBoolean(hasMute);\n        Validator.validateBoolean(hasRecord);\n        Validator.validateBoolean(hasMerge);\n        Validator.validateBoolean(hasSwap);\n        Validator.validateBoolean(hasSignedRecordingUrl);\n        Validator.validateBoolean(debugEnabled);\n        Validator.validateBoolean(hasContactSearch);\n        Validator.validateBoolean(hasAgentAvailability);\n        Validator.validateBoolean(supportsMos);\n        Validator.validateBoolean(hasSupervisorListenIn);\n        Validator.validateBoolean(hasSupervisorBargeIn);\n        Validator.validateBoolean(hasBlindTransfer);\n        Validator.validateBoolean(hasTransferToOmniFlow);\n        Validator.validateBoolean(hasPendingStatusChange);\n\n        this.hasMute = hasMute;\n        this.hasRecord = hasRecord;\n        this.hasMerge = hasMerge;\n        this.hasSwap = hasSwap;\n        this.hasSignedRecordingUrl = hasSignedRecordingUrl;\n        this.debugEnabled = debugEnabled;\n        this.hasContactSearch = hasContactSearch;\n        this.hasAgentAvailability = hasAgentAvailability;\n        this.supportsMos = supportsMos;\n        this.hasSupervisorListenIn = hasSupervisorListenIn;\n        this.hasSupervisorBargeIn = hasSupervisorBargeIn;\n        this.hasBlindTransfer = hasBlindTransfer;\n        this.hasTransferToOmniFlow = hasTransferToOmniFlow;\n        this.hasPendingStatusChange = hasPendingStatusChange;\n    }\n}\n\n/**\n * Class representing result type for getAgentConfig()\n */\nexport class AgentConfigResult {\n    /**\n     * Create AgentConfigResult\n     * @param {object} param\n     * @param {Phone[]} [param.phones]\n     * @param {Phone} [param.selectedPhone]\n     */\n    constructor({ phones = [constants.PHONE_TYPE.SOFT_PHONE], selectedPhone = new Phone({type: constants.PHONE_TYPE.SOFT_PHONE}) }) {\n        Validator.validateClassObject(phones, Array);\n        Validator.validateClassObject(selectedPhone, Phone);\n\n        this.phones = phones;\n        this.selectedPhone = selectedPhone;\n    }\n}\n\n/**\n * Class representing AgentConfig type for setAgentConfig()\n */\nexport class AgentConfig {\n    /**\n     * Create AgentConfig\n     * @param {object} param\n     * @param {Phone} [param.selectedPhone]\n     */\n    constructor({ selectedPhone }) {\n        Validator.validateClassObject(selectedPhone, Phone);\n        this.selectedPhone = selectedPhone;\n    }\n}\n\n/**\n * Class representing result type for pauseRecording() & resumeRecording\n */\nexport class RecordingToggleResult {\n    /**\n     * Create RecordingToggleResult\n     * @param {object} param\n     * @param {boolean} param.isRecordingPaused\n     * @param {string} [param.contactId]\n     * @param {string} [param.initialContactId]\n     * @param {string} [param.instanceId]\n     * @param {string} [param.region]\n     */\n    constructor({ isRecordingPaused, contactId = null, initialContactId = null, instanceId = null, region = null }) {\n        this.isRecordingPaused = isRecordingPaused;\n        this.contactId = contactId;\n        this.initialContactId = initialContactId;\n        this.instanceId = instanceId;\n        this.region = region;\n    }\n}\n\n/**\n * Class representing result type for addParticipant()\n */\nexport class ParticipantResult {\n    /**\n     * Create ParticipantResult\n     * @param {object} param\n     * @param {boolean} param.initialCallHasEnded\n     * @param {CallInfo} param.callInfo\n     * @param {string} param.phoneNumber\n     * @param {string} param.callId\n     */\n    constructor({ initialCallHasEnded, callInfo, phoneNumber, callId }) {\n        Validator.validateClassObject(callInfo, CallInfo);\n        this.initialCallHasEnded = initialCallHasEnded;\n        this.callInfo = callInfo;\n        this.phoneNumber = phoneNumber;\n        this.callId = callId;\n    }\n}\n\n/**\n * Class representing result type for getPhoneContacts()\n */\nexport class PhoneContactsResult {\n    /**\n     * Create PhoneContactsResult\n     * @param {object} param\n     * @param {Contact[]} [param.contacts]\n     * @param {Array} [param.contactTypes]\n     */\n    constructor({ contacts = [], contactTypes = [] }) {\n        if (contacts.length > 0) {\n            contacts.forEach(contact => {\n                Validator.validateClassObject(contact, Contact);\n            });\n        }\n        if (contactTypes.length > 0) {\n            contactTypes.forEach(filterType => {\n                Validator.validateEnum(filterType, Object.values(constants.CONTACT_TYPE));\n            });\n        }\n        this.contacts = contacts;\n        this.contactTypes = contactTypes;\n    }\n}\n\n/**\n * Class representing result type for accept(), decline(), dial()\n */\nexport class CallResult {\n    /**\n     * Create CallResult\n     * @param {object} param\n     * @param {PhoneCall} [param.call]\n     */\n    constructor({ call }) {\n        if (call !== undefined) {\n            Validator.validateClassObject(call, PhoneCall);\n        }\n        this.call = call;\n    }\n}\n\n/**\n * Class representing result type for endCall(), hangup()\n */\nexport class HangupResult {\n    /**\n     * Create CallResult\n     * @param {object} param\n     * @param {PhoneCall[]|PhoneCall} param.calls - one or more calls (can be multiple calls in case of agent endcall/hangup)\n     */\n    constructor({ calls }) {\n        if (calls instanceof Array) {\n            calls.forEach(call => Validator.validateClassObject(call, PhoneCall));\n            this.calls = calls;\n        } else {\n            Validator.validateClassObject(calls, PhoneCall);\n            this.calls = [calls];\n        }\n    }\n}\n\n/**\n * Class representing result type for hold() & resume()\n */\nexport class HoldToggleResult {\n    /**\n     * Create HoldToggleResult\n     * @param {object} param\n     * @param {boolean} param.isThirdPartyOnHold\n     * @param {boolean} param.isCustomerOnHold\n     * @param {PhoneCall[]} [param.calls]\n     */\n    constructor({ isThirdPartyOnHold, isCustomerOnHold, calls }) {\n        if (calls) {\n            Object.values(calls).forEach(call => {\n                Validator.validateClassObject(call, PhoneCall);\n            });\n            this.calls = calls;\n        }\n        this.isThirdPartyOnHold = isThirdPartyOnHold;\n        this.isCustomerOnHold = isCustomerOnHold;\n    }\n}\n\n/**\n * Class representing result type for getRecordingUrl\n */\n export class SignedRecordingUrlResult {\n    /**\n     * Create SignedRecordingUrlResult\n     * @param {object} param\n     * @param {boolean} param.success\n     * @param {string} [param.url]\n     * @param {number} [param.duration] in seconds\n     * @param {string} [param.callId] Salesforce callId of the voice call\n     */\n    constructor({ success, url, duration, callId }) {\n        if (success) {\n            // For a successfull result, url is required\n            Validator.validateString(url);\n            Validator.validateString(callId);\n            if (duration) {\n                Validator.validateNumber(duration);\n            }\n        }\n        this.success = success;\n        this.url = url;\n        this.duration = duration;\n        this.callId = callId;\n    }\n}\n\n/**\n * Class representing result type for init()\n */\nexport class InitResult {\n    /**\n     * Create InitResult\n     * @param {object} param\n     * @param {boolean} [param.showLogin]\n     * @param {number} [param.loginFrameHeight]\n     */\n    constructor({ showLogin = false, loginFrameHeight = 350 }) {\n        this.showLogin = showLogin;\n        this.loginFrameHeight = loginFrameHeight;\n    }\n}\n\n/**\n * Class representing generic result type\n */\nexport class GenericResult {\n    /**\n     * Create GenericResult\n     * @param {object} param\n     * @param {boolean} param.success\n     */\n    constructor({ success }) {\n        this.success = success;\n    }\n}\n\n/**\n * Class representing logout result type\n */\n export class LogoutResult {\n    /**\n     * Create LogoutResult\n     * @param {object} param\n     * @param {boolean} param.success\n     * @param {number} [param.loginFrameHeight]\n     */\n    constructor({ success, loginFrameHeight = 350 }) {\n        this.success = success;\n        this.loginFrameHeight = loginFrameHeight;\n    }\n}\n\n/**\n * Class representing callInfo class (call metadata)\n */\nexport class CallInfo {\n    /**\n     * Create CallInfo\n     * @param {object} param\n     * @param {boolean} param.isOnHold\n     * @param {boolean} param.isRecordingPaused\n     * @param {boolean} param.isMuted\n     * @param {string} [param.initialCallId]\n     * @param {Date} [param.callStateTimestamp]\n     * @param {boolean} [param.isSoftphoneCall] - is it a softphone call \n     * @param {boolean} [param.acceptEnabled]\n     * @param {boolean} [param.declineEnabled]\n     * @param {boolean} [param.muteEnabled]\n     * @param {boolean} [param.swapEnabled]\n     * @param {boolean} [param.conferenceEnabled]\n     * @param {boolean} [param.holdEnabled]\n     * @param {boolean} [param.recordEnabled]\n     * @param {boolean} [param.addCallerEnabled]\n     * @param {boolean} [param.extensionEnabled]\n     * @param {boolean} [param.isReplayable]\n     * @param {boolean} [param.isBargeable]\n     * @param {boolean} [param.isExternalTransfer]\n     * @param {(\"ALWAYS\"|\"NEVER\"|\"ALWAYS_EXCEPT_ON_HOLD\")} [param.removeParticipantVariant] - The type of remove participant variant when in a transfer call. \n     */\n    constructor({ callStateTimestamp = null, isOnHold, isMuted = false, isRecordingPaused = false, initialCallId, isSoftphoneCall = true, \n        acceptEnabled = true, declineEnabled = true, muteEnabled = true, swapEnabled = true, conferenceEnabled = true, holdEnabled = true,\n        recordEnabled = true, addCallerEnabled = true, extensionEnabled = true, isReplayable = true, isBargeable = false, isExternalTransfer, \n        removeParticipantVariant = Constants.REMOVE_PARTICIPANT_VARIANT.ALWAYS }) {\n        if (callStateTimestamp) {\n            Validator.validateDate(callStateTimestamp);\n        }\n        Validator.validateBoolean(isRecordingPaused);\n        Validator.validateBoolean(isMuted);\n        Validator.validateBoolean(isSoftphoneCall);\n        Validator.validateBoolean(acceptEnabled);\n        Validator.validateBoolean(declineEnabled);\n        Validator.validateBoolean(muteEnabled);\n        Validator.validateBoolean(swapEnabled);\n        Validator.validateBoolean(conferenceEnabled);\n        Validator.validateBoolean(holdEnabled);\n        Validator.validateBoolean(recordEnabled);\n        Validator.validateBoolean(addCallerEnabled);\n        Validator.validateBoolean(extensionEnabled);\n        Validator.validateBoolean(isBargeable);\n        if (isExternalTransfer !== undefined) {\n            Validator.validateBoolean(isExternalTransfer);\n        }\n        Validator.validateEnum(removeParticipantVariant, Object.values(constants.REMOVE_PARTICIPANT_VARIANT));\n        this.callStateTimestamp = callStateTimestamp;\n        this.isRecordingPaused = isRecordingPaused;\n        this.isMuted = isMuted;\n        this.isOnHold = isOnHold;\n        this.initialCallId = initialCallId;\n        this.isSoftphoneCall = isSoftphoneCall;\n        this.acceptEnabled = acceptEnabled;\n        this.declineEnabled = declineEnabled;\n        this.muteEnabled = muteEnabled;\n        this.swapEnabled = swapEnabled;\n        this.conferenceEnabled = conferenceEnabled;\n        this.holdEnabled = holdEnabled;\n        this.recordEnabled = recordEnabled;\n        this.addCallerEnabled = addCallerEnabled;\n        this.extensionEnabled = extensionEnabled;\n        this.isReplayable = isReplayable;\n        this.isBargeable = isBargeable;\n        this.isExternalTransfer = isExternalTransfer;\n        this.removeParticipantVariant = removeParticipantVariant;\n    }\n}\n\n/** \n * Class representing a Contact. This object is used to represent \n * phone system contact or any call target\n */\n\nexport class Contact {\n    /**\n     * Create a Contact.\n     * @param {object} param\n     * @param {string} [param.id] - The unique contactId\n     * @param {(\"PhoneBook\"|\"Queue\"|\"PhoneNumber\"|\"Agent\")} [param.type] - The type of the contact, one of the CONTACT_TYPE values\n     * @param {string} [param.name] - The label for this contact to be displayed in the UI\n     * @param {string} [param.phoneNumber] - The phone number associcated with this contact\n     * @param {string} [param.prefix] - Any prefix to be dialed before dialing the number (i.e. +1)\n     * @param {string} [param.extension] - Any extension to be dialed after dialing the number\n     * @param {string} [param.endpointARN]\n     * @param {string} [param.queue]\n     * @param {string} [param.availability]\n     * @param {string} [param.recordId] - Salesforce RecordId\n     * @param {string} [param.description] - Contact Description \n     */\n    constructor({phoneNumber, id, type, name, prefix, extension, endpointARN, queue, availability, recordId, description}) {\n        if (phoneNumber) {\n            Validator.validateString(phoneNumber);\n        }\n        if (type) {\n            Validator.validateEnum(type, Object.values(constants.CONTACT_TYPE));\n        }\n        if (id) {\n            Validator.validateString(id);\n        }\n        if (name) {\n            Validator.validateString(name);\n        }\n        if (prefix) {\n            Validator.validateString(prefix);\n        }\n        if (extension) {\n            Validator.validateString(extension);\n        }\n        if (availability) {\n            Validator.validateEnum(availability, Object.values(constants.AGENT_AVAILABILITY));\n        }\n        if (recordId) {\n            Validator.validateString(recordId);\n        }\n        if (description) {\n            Validator.validateString(description);\n        }\n\n        this.phoneNumber = phoneNumber;\n        this.id = id;\n        this.type = type;\n        this.name = name;\n        this.prefix = prefix;\n        this.extension = extension;\n        this.endpointARN = endpointARN;\n        this.queue = queue;\n        if (constants.CONTACT_TYPE.AGENT === this.type) {\n            this.availability = availability;\n        } else {\n            this.availability = null;\n        }\n        this.recordId = recordId;\n        this.description = description;\n    }\n}\n\n/** \n* Class representing PhoneCallAttributes\n*/\n\nexport class PhoneCallAttributes {\n    /**\n     * Create PhoneCallAttributes.\n     * @param {object} param\n     * @param {string} [param.voiceCallId] - The voice call id\n     * @param {PARTICIPANT_TYPE} [param.participantType] - The participant type of the call\n     * @param {DIALER_TYPE} [param.dialerType] - The dialer type of the call\n     * @param {string} [param.parentId] - The parent call id of the call\n     * @param {boolean} [param.isOnHold]\n     * @param {boolean} [param.hasSupervisorBargedIn]\n     */\n    constructor({ voiceCallId, participantType, dialerType = Constants.DIALER_TYPE.NONE, parentId, isOnHold, hasSupervisorBargedIn = false }) {\n        if (voiceCallId) {\n            Validator.validateString(voiceCallId);\n        }\n        if (participantType) {\n            Validator.validateEnum(participantType, Object.values(constants.PARTICIPANT_TYPE));\n        }\n        if (parentId) {\n            Validator.validateString(parentId);\n        }\n        if (isOnHold !== undefined) {\n            Validator.validateBoolean(isOnHold);\n        }\n\n        Validator.validateBoolean(hasSupervisorBargedIn);\n        Validator.validateEnum(dialerType, Object.values(constants.DIALER_TYPE));\n\n        this.voiceCallId = voiceCallId;\n        this.participantType = participantType;\n        this.parentId = parentId;\n        this.isOnHold = isOnHold;\n        this.dialerType = dialerType;\n        this.hasSupervisorBargedIn = hasSupervisorBargedIn;\n    }\n}\n\n/** \n* Class representing a PhoneCall. \n*/\n\nexport class PhoneCall {\n    /**\n     * Create a PhoneCall.\n     * @param {object} param\n     * @param {string} [param.callId] - The unique callId. This is a required parameter\n     * @param {CALL_TYPE} [param.callType] - The type of the call, one of the CALL_TYPE values\n     * @param {Contact} [param.contact] - The Call Target / Contact \n     * @param {string} [param.state] - The state of the call, i.e. ringing, connected, declined, failed \n     * @param {PhoneCallAttributes} [param.callAttributes] - Any additional call attributes\n     * @param {string} [param.phoneNumber] - The phone number associated with this call (usually external number)\n     * @param {CallInfo} [param.callInfo]\n     * @param {string} [param.reason]\n     * @param {boolean} [param.closeCallOnError]\n     * @param {string} [param.agentStatus]\n     */\n    constructor({callId, callType, contact, state, callAttributes, phoneNumber, callInfo, reason, closeCallOnError, agentStatus }) {\n        // TODO: Revisit the required fields\n        if (callId) {\n            Validator.validateString(callId);\n            this.callId = callId;\n        }\n        if (callType) {\n            Validator.validateEnum(callType, Object.values(constants.CALL_TYPE));\n            this.callType = callType;\n        }\n        if (phoneNumber) {\n            Validator.validateString(phoneNumber);\n            this.phoneNumber = phoneNumber;\n        }\n        if (callInfo) {\n            Validator.validateClassObject(callInfo, CallInfo);\n            this.callInfo = callInfo;\n        }\n        if (contact) {\n            Validator.validateClassObject(contact, Contact);\n            this.contact = contact;\n        }\n        if (reason) {\n            this.reason = reason;\n        }\n        if (closeCallOnError) {\n            this.closeCallOnError = closeCallOnError;\n        }\n        if (agentStatus) {\n            this.agentStatus = agentStatus;\n        }\n        this.state = state;\n        this.callAttributes = callAttributes;\n    }\n}\n\n/** \n* Class representing a VendorConnector\n*/\nexport class VendorConnector {\n    /**\n     * Initialize the connector\n     * @param {object} connectorConfig\n     * @returns {Promise<InitResult>} \n     * \n     */\n    init(config) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get the currently active calls\n     * @returns {Promise<ActiveCallsResult>} \n     * \n     */\n    getActiveCalls() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Accept call\n     * @param {PhoneCall} call - The call to be accepted\n     * @returns {Promise<CallResult>} \n     * \n     */\n    acceptCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Decline call\n     * @param {PhoneCall} call - The call to be declined\n     * @returns {Promise<CallResult>} \n     * \n     */\n    declineCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * End call\n     * @param {PhoneCall} call - The call to be ended\n     * @param {AGENT_STATUS} agentStatus\n     * @returns {Promise<HangupResult>} \n     * \n     */\n    endCall(call, agentStatus) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Mute call\n     * @returns {Promise<MuteToggleResult>} \n     * \n     */\n    mute() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Unmute call\n     * @returns {Promise<MuteToggleResult>} \n     * \n     */\n    unmute() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Hold call\n     * @param {PhoneCall} call - The call to be held\n     * @returns {Promise<HoldToggleResult>} \n     * \n     */\n    hold(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Resume call\n     * @param {PhoneCall} call - The call to be resumed\n     * @returns {Promise<HoldToggleResult>} \n     * \n     */\n    resume(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Set agent status\n     * @param {string} agentStatus\n     * @param {StatusInfo} statusInfo\n     * @param {Boolean} enqueueNextState - flag to determine if this status change request should be enqueued if neccessary\n     * @returns {Promise<GenericResult>} \n     * \n     */\n    setAgentStatus(agentStatus, statusInfo, enqueueNextState) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get agent status\n     * @returns {Promise<AgentStatusInfo>} \n     * \n     */\n     getAgentStatus() {\n        this.logMessageToVendor(constants.LOG_LEVEL.INFO, 'getAgentStatus API is NOT Implemented' );\n    }\n\n    /**\n     * Dial out Number\n     * @param {Contact} contact\n     * @returns {Promise<CallResult>} \n     * \n     */\n    dial(contact) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Send digits\n     * @param {string} digits\n     */\n    sendDigits(digits) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get phone contacts\n     * @returns {Promise<PhoneContactsResult>} \n     */\n    getPhoneContacts() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Swap calls\n     * @param {PhoneCall} call1\n     * @param {PhoneCall} call2\n     * @returns {Promise<HoldToggleResult>} \n     */\n    swap(call1, call2) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Conference calls\n     * @param {PhoneCall[]} calls\n     * @returns {Promise<HoldToggleResult>} \n     */\n    conference(calls) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Add participant to call\n     * @param {Contact} contact\n     * @param {PhoneCall} call\n     * @returns {Promise<ParticipantResult>} \n     */\n    addParticipant(contact, call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Pause recording\n     * @param {PhoneCall} call\n     * @returns {Promise<RecordingToggleResult>} \n     */\n    pauseRecording(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Resume recording\n     * @param {PhoneCall} call\n     * @returns {Promise<RecordingToggleResult>} \n     */\n    resumeRecording(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get agentConfig\n     * @returns {Promise<AgentConfigResult>}\n     */\n    getAgentConfig() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Set Agent Config\n     * @param {AgentConfig} config\n     * @returns {Promise<GenericResult>}\n     */\n    setAgentConfig(config) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get Capabilities\n     * @returns {Promise<CapabilitiesResult>}\n     */\n    getCapabilities() {\n        throw new Error('Not implemented');\n    }\n    \n\n    /**\n     * Logout from Omni\n     * @returns {Promise<LogoutResult>} \n     */\n    logout() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Handle message from LWC/Aura component\n     * @param {object} message\n     */\n    handleMessage(message) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Wrap up call\n     * @param {PhoneCall} call\n     */\n    wrapUpCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n    * Get the signed recording url\n    * @param {String} recordingUrl\n    * @param {String} vendorCallKey\n    * @param {String} callId\n    * @returns {Promise<SignedRecordingUrlResult>} \n    */\n    getSignedRecordingUrl(recordingUrl, vendorCallKey, callId) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Triggers a browser download for Vendor Logs\n     * @param {String[]} logs Array of log messages.\n     */\n    downloadLogs(logs) {\n        downloadLogs();\n    }\n\n    /**\n     * Sends the logs with a logLevel and payload to the vendor connector.\n     * Does a no-op, if not implemented.\n     * @param {String} logLevel Log Level (INFO, WARN, ERROR)\n     * @param {String} message Message to be logged\n     * @param {Object} payload An optional payload to be logged\n     */\n    logMessageToVendor(logLevel, message, payload) {}\n\n    /**\n     * Supervise a call\n     * @param {PhoneCall} call Call to be supervised\n     */\n     superviseCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Supervisor disconnects from a call\n     * @param {PhoneCall} call Call to be disconnected\n     */\n    supervisorDisconnect(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Supervisor Barges into a ongoing call\n     * @param {PhoneCall} call Call which supervisor barges in\n     */\n    supervisorBargeIn(call) {\n        throw new Error('Not implemented');\n    }\n}\n\nexport class Validator {\n    static validateString(value) {\n        if (typeof value !== 'string') {\n            throw new Error(`Invalid argument. Expecting a string but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateNumber(value) {\n        if (typeof value !== 'number') {\n            throw new Error(`Invalid argument. Expecting a number but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateBoolean(value) {\n        if (typeof value !== 'boolean') {\n            throw new Error(`Invalid argument. Expecting a boolean but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateEnum(value, enumValues) {\n        const regex = new RegExp(enumValues.join( \"|\" ), \"i\");\n        if (!regex.test(value)) {\n            throw new Error(`Invalid argument. Expecting a value from ${JSON.stringify(enumValues)} but got ${value}`);\n        }\n        return this;\n    }\n\n    static validateDate(value) {\n        if (!(value instanceof Date)) {\n            throw new Error(`Invalid argument. Expecting a Date object but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateClassObject(object, className) {\n        if (!(object instanceof className)) {\n            throw new Error(`Invalid className. Expecting object of class ${className} but got ${typeof object}`);\n        }\n        return this;\n    }\n}\n\n/** \n * Class representing an Agent status information. This object is used to represent \n * agent status information\n */\n\nexport class AgentStatusInfo {\n    /**\n     * Create a AgentStatusInfo.\n     * @param {object} param\n     * @param {string} [param.statusId] - The unique statusId (required)\n     * @param {string} [param.statusApiName] - The status API name\n     * @param {string} [param.statusName] - The label for this status to be displayed in the UI\n     */\n    constructor({statusId, statusApiName, statusName}) {\n        Validator.validateString(statusId);\n        if (statusApiName) {\n            Validator.validateString(statusApiName);\n        }\n        if (statusName) {\n            Validator.validateString(statusName);\n        }\n        this.statusId = statusId;\n        this.statusApiName = statusApiName;\n        this.statusName = statusName;\n    }\n}\n\n/** \n * Class representing an Agent Vendor status information. This object is used to represent \n * agent vendor side status information\n */\nexport class AgentVendorStatusInfo {\n    /**\n     * Create a AgentVendorStatusInfo.\n     * @param {object} param\n     * @param {string} [param.statusId] - The unique statusId (e.g agentStateARN)\n     * @param {string} [param.statusType] - The agent's current availability state type\n     * @param {string} [param.statusName] - The name of the agent's current availability state\n     */\n    constructor({statusId, statusType, statusName}) {\n        if (statusId) {\n            Validator.validateString(statusId);\n        }\n        if (statusType) {\n            Validator.validateString(statusType);\n        }\n        if (statusName) {\n            Validator.validateString(statusName);\n        }\n        this.statusId = statusId;\n        this.statusType = statusType;\n        this.statusName = statusName;\n    }\n}\n\n/** \n * NOTE: SALESFORCE INTERNAL USE ONLY\n * Class representing an State Change Result information. This object is used to represent \n * Agent State Change Infomation\n */\n export class StateChangeResult {\n    /**\n     * Create a StateChangeResult.\n     * @param {object} param\n     * @param {AgentVendorStatusInfo} [param.newVendorStateInfo] - newStateName (e.g 'Available') (required), newStateType (e.g 'routable')\n     * @param {AgentVendorStatusInfo} [param.oldVendorStateInfo] - oldStateName (e.g 'offline'), oldStateType (e.g 'Offline')\n     */\n    constructor({newVendorStateInfo, oldVendorStateInfo}) {\n        Validator.validateClassObject(newVendorStateInfo, AgentVendorStatusInfo);\n        Validator.validateString(newVendorStateInfo.statusName);\n        if (oldVendorStateInfo) {\n            Validator.validateClassObject(oldVendorStateInfo, AgentVendorStatusInfo);\n        }\n        this.newVendorStateInfo = newVendorStateInfo;\n        this.oldVendorStateInfo = oldVendorStateInfo;\n    }\n}\n\n/** \n * Class representing a Supervised Call Info. This object is used to represent \n * information about a call that is being supervised by a supervisor.\n */\nexport class SupervisedCallInfo {\n    /**\n     * Create a AgentStatusInfo.\n     * @param {object} param\n     * @param {string} [param.callId] - The unique supervised vendor call ID (required)\n     * @param {string} [param.voiceCallId] - The supervised salesforce voice call ID\n     * @param {string} [param.callType] - The type of the call, one of the CALL_TYPE values\n     * @param {string} [param.from] - From phone number (for Inbound calls)\n     * @param {string} [param.to] - To phone number (for Outbound calls)\n     * @param {string} [param.supervisorName] - The supervisor name (shown to the supervised agent on barge in)\n     * @param {boolean} [param.isBargedIn] - True if the Supervisor has barged in, False if the supervisor is listening in.\n     */\n\n    constructor({callId, voiceCallId, callType, from, to, supervisorName, isBargedIn}) {\n        Validator.validateString(callId);\n        this.callId = callId;\n        this.voiceCallId = voiceCallId;\n        this.callType = callType;\n        this.from = from;\n        this.to = to;\n        this.supervisorName = supervisorName;\n        this.isBargedIn = isBargedIn;\n    }\n}\n\n/**\n * Class representing a Audio Stats, which contains array of AudioStats. This object is used to calculate the MOS Score\n */\n\nexport class AudioStats {\n    /**\n     * Create a AudioStats\n     * @param {object} param\n     * @param {string} [param.callId] - The unique callId.\n     * @param {AudioStatsElement[]} param.stats - array of AudioStatsElement\n     * @param {boolean} [param.isAudioStatsCompleted] - True if the audio stats is completed, will calculate MOS and update VoiceCall record\n     */\n    constructor({ callId, stats, isAudioStatsCompleted }) {\n        if (callId) {\n            Validator.validateString(callId);\n            this.callId = callId;\n        }\n\n        if (stats) {\n            Validator.validateClassObject(stats, Array);\n            stats.forEach(audioStatsElement => Validator.validateClassObject(audioStatsElement, AudioStatsElement));\n            this.stats = stats;\n        }\n\n        if (isAudioStatsCompleted) {\n            Validator.validateBoolean(isAudioStatsCompleted);\n            this.isAudioStatsCompleted = isAudioStatsCompleted;\n        }\n    }\n}\n\n/**\n * Class representing a Audio Stats Element. This object is used to calculate the MOS Score\n */\n\nexport class AudioStatsElement {\n    /**\n     * Create a AudioStatsElement\n     * @param {object} param\n     * @param {StatsInfo} [param.inputChannelStats] - the inputChannel stream stats\n     * @param {StatsInfo} [param.outputChannelStats] - the ouputChannel stream stats\n     */\n    constructor({inputChannelStats, outputChannelStats}) {\n        if (inputChannelStats) {\n            Validator.validateClassObject(inputChannelStats, StatsInfo);\n        }\n        if (outputChannelStats) {\n            Validator.validateClassObject(outputChannelStats, StatsInfo);\n        }\n        \n        this.inputChannelStats = inputChannelStats;\n        this.outputChannelStats = outputChannelStats;\n    }\n}\n\n/**\n * Class representing a Stream Stats. This object is used to calculate the MOS Score\n */\n\nexport class StatsInfo {\n    /**\n     * Create a StatsInfo\n     * @param {object} param\n     * @param {number} [param.packetsCount] - the packets count\n     * @param {number} [param.packetsLost] - packets lost count\n     * @param {number} [param.jitterBufferMillis] - jitter buffer in milliseconds\n     * @param {number} [param.roundTripTimeMillis] - round trip time in milliseconds\n     */\n    constructor({packetsCount, packetsLost, jitterBufferMillis, roundTripTimeMillis}) {\n        packetsCount = (packetsCount == null || packetsCount < 0) ? 0 : packetsCount;\n        packetsLost = (packetsLost == null || packetsLost < 0) ? 0 : packetsLost;\n        jitterBufferMillis = (jitterBufferMillis == null || jitterBufferMillis < 0) ? 0 : jitterBufferMillis;\n        roundTripTimeMillis = (roundTripTimeMillis == null || roundTripTimeMillis < 0) ? 0 : roundTripTimeMillis;\n\n        this.statsCount = 0;\n        this.packetsCount = packetsCount;\n        this.packetsLost = packetsLost;\n        this.jitterBufferMillis = jitterBufferMillis;\n        this.roundTripTimeMillis = roundTripTimeMillis;\n    }\n}\n\n/**\n * Class representing supervise call result\n */\n export class  SuperviseCallResult {\n    /**\n     * Create a SuperviseCallResult\n     * @param {object} param\n     * @param {PhoneCall} param.call\n     */\n    constructor({call}) {\n        Validator.validateClassObject(call, PhoneCall);\n        this.call = call;\n    }\n}\n\n/**\n * Class representing result type for supervisorDisconnected()\n */\n export class SupervisorHangupResult extends HangupResult {\n     /**\n     * Create SupervisorHangupResult\n     * @param {object} param\n     * @param {PhoneCall[]|PhoneCall} param.calls - one or more calls when supervisor hangsup\n     */\n    constructor({ calls }) {\n        super({ calls });\n    }\n }","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport { AudioStatsElement, StatsInfo } from './types';\nlet audioStatus;\nlet supportsMos = false;\n\nfunction getAvgStats(streamType) {\n    const stats = audioStatus[streamType];\n    return {\n        packetsCount: stats.packetsCount / stats.statsCount,\n        packetsLost: stats.packetsLost / stats.statsCount,\n        jitterBufferMillis: stats.jitterBufferMillis / stats.statsCount,\n        roundTripTimeMillis: stats.roundTripTimeMillis / stats.statsCount\n    };\n}\n\nfunction getMOSByStream(streamType) {\n    const avgStats = getAvgStats(streamType);\n    const effectiveLatency = avgStats.roundTripTimeMillis + (avgStats.jitterBufferMillis * 2) + 10.0;\n    let R = 0;\n    if (effectiveLatency < 160) {\n        R = 93.2 - (effectiveLatency / 40);\n    } else {\n        R = 93.2 - (effectiveLatency - 120) / 10;\n    }\n    R -= avgStats.packetsLost / avgStats.packetsCount * 2.50;\n    return 1 + (0.035) * R + (.000007) * R * (R - 60) * (100 - R);\n}\n\nexport function enableMos() {\n    supportsMos = true;\n}\n\nexport function getMOS() {\n    if (!supportsMos || !audioStatus) {\n        return undefined;\n    }\n    const inputChannelMOS = getMOSByStream('inputChannelStats');\n    const ouputChannelMOS = getMOSByStream('outputChannelStats');\n    audioStatus = null;\n    if (isNaN(ouputChannelMOS) && isNaN(inputChannelMOS)) {\n        return 0;\n    } else if (isNaN(ouputChannelMOS)) {\n        return inputChannelMOS;\n    } else if (isNaN(inputChannelMOS)) {\n        return ouputChannelMOS;\n    } else {\n        return Math.min(inputChannelMOS, ouputChannelMOS);\n    }\n}\n\nexport function initAudioStats() {\n    audioStatus = new AudioStatsElement({inputChannelStats: new StatsInfo({packetsCount: 0, packetsLost: 0, jitterBufferMillis: 0, roundTripTimeMillis: 0}), \n                               outputChannelStats: new StatsInfo({packetsCount: 0, packetsLost: 0, jitterBufferMillis: 0, roundTripTimeMillis: 0})});\n}\n\nexport function updateAudioStats(statsArray) {\n    if (audioStatus) {\n        statsArray.forEach((stats) => {\n            if (stats.inputChannelStats) {\n                audioStatus.inputChannelStats.statsCount++;\n                audioStatus.inputChannelStats.packetsCount += stats.inputChannelStats.packetsCount | 0;\n                audioStatus.inputChannelStats.packetsLost += stats.inputChannelStats.packetsLost | 0;\n                audioStatus.inputChannelStats.jitterBufferMillis += stats.inputChannelStats.jitterBufferMillis | 0;\n                audioStatus.inputChannelStats.roundTripTimeMillis += stats.inputChannelStats.roundTripTimeMillis | 0;\n            }\n            if (stats.outputChannelStats) {\n                audioStatus.outputChannelStats.statsCount++;\n                audioStatus.outputChannelStats.packetsCount += stats.outputChannelStats.packetsCount | 0;\n                audioStatus.outputChannelStats.packetsLost += stats.outputChannelStats.packetsLost | 0;\n                audioStatus.outputChannelStats.jitterBufferMillis += stats.outputChannelStats.jitterBufferMillis | 0;\n                audioStatus.outputChannelStats.roundTripTimeMillis += stats.outputChannelStats.roundTripTimeMillis | 0;\n            }\n        });\n    }\n}","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/* eslint-disable no-unused-vars */\nimport constants from './constants.js';\nimport { CONNECTOR_CONFIG_EXPOSED_FIELDS, CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH } from './constants.js';\nimport { Validator, GenericResult, InitResult, CallResult, HangupResult, HoldToggleResult, PhoneContactsResult, MuteToggleResult,\n    ParticipantResult, RecordingToggleResult, AgentConfigResult, ActiveCallsResult, SignedRecordingUrlResult, LogoutResult,\n    VendorConnector, Contact, AudioStats, SuperviseCallResult, SupervisorHangupResult, AgentStatusInfo, SupervisedCallInfo, CapabilitiesResult, AgentVendorStatusInfo, StateChangeResult} from './types';\nimport { enableMos, getMOS, initAudioStats, updateAudioStats } from './mosUtil';\nimport { log, getLogs } from './logger';\n\nlet channelPort;\nlet vendorConnector;\nlet agentAvailable;\nlet isSupervisorConnected;\n\n/**\n * Gets the error type from the error object\n * @param {object} e Error object representing the error\n */\nfunction getErrorType(e) {\n    return e && e.type ? e.type : e;\n}\n\n/**\n * Sanitizes the object by removing any PII data\n * @param {object} payload\n */\nfunction sanitizePayload(payload) {\n    if (payload) {\n        if (typeof (payload) === 'function') {\n            // remove functions from the payload, because they cannot be copied by the postMessage function\n            return;\n        } else if (typeof (payload) === 'object') {\n            const isArray = Array.isArray(payload);\n            const sanitizedPayload = isArray ? [] : {};\n\n            if (isArray) {\n                payload.forEach(element => {\n                    sanitizedPayload.push(sanitizePayload(element));\n                });\n            } else {\n                for (const property in payload) {\n                    if (property !== 'phoneNumber' &&\n                        property !== 'number' &&\n                        property !== 'name' &&\n                        property !== 'callAttributes') {\n                        sanitizedPayload[property] = sanitizePayload(payload[property]);\n                    }\n                }\n            }\n            return sanitizedPayload;\n        }\n    }\n    return payload;\n}\n\n/**\n * Gets the error message from the error object\n * @param {object} e Error object representing the error\n */\nfunction getErrorMessage(e) {\n    return e && e.message ? e.message : e;\n}\n/** \n * Dispatch a telephony event log to Salesforce\n * @param {String} eventType event type, i.e. constants.EVENT_TYPE.CALL_STARTED    \n * @param {Object} payload event payload\n * @param {Boolean} isError error scenario\n */\nfunction dispatchEventLog(eventType, payload, isError) {\n    const sanitizedPayload = sanitizePayload(payload);\n    const logLevel = isError ? constants.LOG_LEVEL.ERROR : constants.LOG_LEVEL.INFO;\n    log({eventType, payload}, logLevel, constants.LOG_SOURCE.SYSTEM);\n\n    channelPort.postMessage({\n        type: constants.MESSAGE_TYPE.LOG,\n        payload: { eventType, payload: sanitizedPayload, isError }\n    });\n}\n/** \n * Dispatch a telephony event to Salesforce\n * @param {String} eventType event type, i.e. constants.EVENT_TYPE.CALL_STARTED\n * @param {Object} payload event payload\n * @param {Boolean} registerLog optional argument to not register the event\n */\nfunction dispatchEvent(eventType, payload, registerLog = true) {\n    channelPort.postMessage({\n        type: constants.MESSAGE_TYPE.TELEPHONY_EVENT_DISPATCHED,\n        payload: { telephonyEventType: eventType, telephonyEventPayload: payload }\n    });\n    if (registerLog) {\n        dispatchEventLog(eventType, payload, false);\n    }\n}\n\n/**\n * Dispatch a telephony integration error to Salesforce\n * @param {string} errorType Error Type, ex: constants.ErrorType.MICROPHONE_NOT_SHARED\n * @param {object} error Error object representing the error\n * @param {string} eventType The event that caused this error, ex: constants.MESSAGE_TYPE.ACCEPT_CALL\n */\nfunction dispatchError(errorType, error, eventType) {\n    // eslint-disable-next-line no-console\n    console.error(`SCV dispatched error ${errorType} for eventType ${eventType}`, error);\n    dispatchEvent(constants.EVENT_TYPE.ERROR, { message: constants.ERROR_TYPE[errorType] }, false);\n    dispatchEventLog(eventType, { errorType, error }, true);\n}\n\nfunction dispatchInfo(eventType, payload) {\n    // eslint-disable-next-line no-console\n    console.info(`SCV info message dispatched for eventType ${eventType} with payload ${JSON.stringify(payload)}`);\n    dispatchEvent(constants.EVENT_TYPE.INFO, { message: constants.INFO_TYPE[eventType] }, false);\n    dispatchEventLog(eventType, payload, false);\n}\n\n/** \n * Notify Salesforce that the connector is ready\n */\nasync function setConnectorReady() {\n    try {\n        const agentConfigResult = await vendorConnector.getAgentConfig();\n        const capabilitiesResult = await vendorConnector.getCapabilities();\n        Validator.validateClassObject(agentConfigResult, AgentConfigResult);\n        Validator.validateClassObject(capabilitiesResult, CapabilitiesResult);\n        if (capabilitiesResult.supportsMos) {\n            enableMos();\n        }\n        const activeCallsResult = await vendorConnector.getActiveCalls();\n        Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n        const activeCalls = activeCallsResult.activeCalls;\n        const type = constants.MESSAGE_TYPE.CONNECTOR_READY;\n        const payload = {\n            agentConfig: {\n\n                [constants.AGENT_CONFIG_TYPE.PHONES] : agentConfigResult.phones,\n                [constants.AGENT_CONFIG_TYPE.SELECTED_PHONE] : agentConfigResult.selectedPhone\n            },\n            capabilities: {\n                [constants.CAPABILITIES_TYPE.MUTE] : capabilitiesResult.hasMute,\n                [constants.CAPABILITIES_TYPE.RECORD] : capabilitiesResult.hasRecord,\n                [constants.CAPABILITIES_TYPE.MERGE] : capabilitiesResult.hasMerge,\n                [constants.CAPABILITIES_TYPE.SWAP] : capabilitiesResult.hasSwap,\n                [constants.CAPABILITIES_TYPE.SIGNED_RECORDING_URL] : capabilitiesResult.hasSignedRecordingUrl,\n                [constants.CAPABILITIES_TYPE.DEBUG_ENABLED] : capabilitiesResult.debugEnabled,\n                [constants.CAPABILITIES_TYPE.CONTACT_SEARCH] : capabilitiesResult.hasContactSearch,\n                [constants.CAPABILITIES_TYPE.VENDOR_PROVIDED_AVAILABILITY] : capabilitiesResult.hasAgentAvailability,\n                [constants.CAPABILITIES_TYPE.SUPERVISOR_LISTEN_IN] : capabilitiesResult.hasSupervisorListenIn,\n                [constants.CAPABILITIES_TYPE.SUPERVISOR_BARGE_IN] : capabilitiesResult.hasSupervisorBargeIn,\n                [constants.CAPABILITIES_TYPE.MOS] : capabilitiesResult.supportsMos,\n                [constants.CAPABILITIES_TYPE.BLIND_TRANSFER] : capabilitiesResult.hasBlindTransfer,\n                [constants.CAPABILITIES_TYPE.TRANSFER_TO_OMNI_FLOW] : capabilitiesResult.hasTransferToOmniFlow,\n                [constants.CAPABILITIES_TYPE.PENDING_STATUS_CHANGE] : capabilitiesResult.hasPendingStatusChange\n            },\n            callInProgress: activeCalls.length > 0 ? activeCalls[0] : null\n        }\n        channelPort.postMessage({\n            type,\n            payload\n        });\n        dispatchEventLog(type, payload, false);\n    } catch (e) {\n        // Post CONNECTOR_READY even if getAgentConfig is not implemented\n        channelPort.postMessage({\n            type: constants.MESSAGE_TYPE.CONNECTOR_READY,\n            payload: {}\n        });\n        dispatchEventLog(constants.MESSAGE_TYPE.CONNECTOR_READY, {}, false);\n    }\n}\n\n//TODO: 230 we should convert call object to PhoneCall object\nasync function channelMessageHandler(message) { \n    const eventType = message.data.type;\n    if (eventType !== constants.MESSAGE_TYPE.LOG) {\n        dispatchEventLog(eventType, message.data, false);\n    }\n    switch (eventType) {\n        case constants.MESSAGE_TYPE.ACCEPT_CALL:\n            try {\n                if (message.data.call && message.data.call.callType &&\n                    message.data.call.callType.toLowerCase() === constants.CALL_TYPE.OUTBOUND.toLowerCase()) {\n                    return;\n                }\n                initAudioStats();\n                if (isSupervisorConnected) {\n                    const hangupPayload = await vendorConnector.supervisorDisconnect();\n                    Validator.validateClassObject(hangupPayload, SupervisorHangupResult);\n                    isSupervisorConnected = false;\n                    dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_HANGUP, hangupPayload.calls);\n                }\n                let payload = await vendorConnector.acceptCall(message.data.call);\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                dispatchEvent(call.callType.toLowerCase() === constants.CALL_TYPE.CALLBACK.toLowerCase() ?\n                    constants.EVENT_TYPE.CALL_STARTED : constants.EVENT_TYPE.CALL_CONNECTED, call);\n            } catch (e) {\n                isSupervisorConnected = false;\n                dispatchInfo(constants.INFO_TYPE.CAN_NOT_ACCEPT_THE_CALL, {messagetype: constants.MESSAGE_TYPE.ACCEPT_CALL, additionalInfo: e} )\n            }\n        break;\n        case constants.MESSAGE_TYPE.DECLINE_CALL:\n            try {\n                const payload =  await vendorConnector.declineCall(message.data.call);\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                dispatchEvent(constants.EVENT_TYPE.HANGUP, call);\n            } catch (e) {\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_DECLINE_THE_CALL, e, constants.MESSAGE_TYPE.DECLINE_CALL);\n            }\n        break;\n        case constants.MESSAGE_TYPE.END_CALL:\n            try {\n                const payload = await vendorConnector.endCall(message.data.call, message.data.agentStatus);\n                Validator.validateClassObject(payload, HangupResult);\n                const activeCallsResult = await vendorConnector.getActiveCalls();\n                Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n                const activeCalls = activeCallsResult.activeCalls;\n                const { calls } = payload;\n                // after end calls from vendor side, if no more active calls, fire HANGUP, otherwise, fire PARTICIPANT_REMOVED\n                if (activeCalls.length === 0) {\n                    dispatchEvent(constants.EVENT_TYPE.HANGUP, calls);\n                } else {\n                    dispatchEvent(constants.EVENT_TYPE.PARTICIPANT_REMOVED, calls.length > 0 && calls[0]);\n                }\n            } catch (e) {\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_END_THE_CALL, e, constants.MESSAGE_TYPE.END_CALL);\n            }\n        break;\n        case constants.MESSAGE_TYPE.MUTE:\n            try {\n                const payload = await vendorConnector.mute();\n                publishEvent({eventType: constants.EVENT_TYPE.MUTE_TOGGLE, payload});\n            } catch (e) {\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_MUTE_CALL, e, constants.MESSAGE_TYPE.MUTE);\n            }\n        break;\n        case constants.MESSAGE_TYPE.UNMUTE:\n            try {\n                const payload = await vendorConnector.unmute();\n                publishEvent({eventType: constants.EVENT_TYPE.MUTE_TOGGLE, payload});\n            } catch (e) {\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_UNMUTE_CALL, e, constants.MESSAGE_TYPE.UNMUTE);\n            }\n        break;\n        case constants.MESSAGE_TYPE.HOLD:\n            try {\n                const payload = await vendorConnector.hold(message.data.call);\n                publishEvent({eventType: constants.EVENT_TYPE.HOLD_TOGGLE, payload});\n            } catch (e) {\n                switch(getErrorType(e)) {\n                    case constants.ERROR_TYPE.INVALID_PARTICIPANT:\n                        dispatchError(constants.ERROR_TYPE.INVALID_PARTICIPANT, getErrorMessage(e), constants.MESSAGE_TYPE.HOLD);\n                        break;\n                    default:\n                        dispatchError(constants.ERROR_TYPE.CAN_NOT_HOLD_CALL, getErrorMessage(e), constants.MESSAGE_TYPE.HOLD);\n                        break;\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.RESUME:\n            try {\n                const payload = await vendorConnector.resume(message.data.call);\n                publishEvent({eventType: constants.EVENT_TYPE.HOLD_TOGGLE, payload});\n            } catch (e) {\n                switch(getErrorType(e)) {\n                    case constants.ERROR_TYPE.INVALID_PARTICIPANT:\n                        dispatchError(constants.ERROR_TYPE.INVALID_PARTICIPANT, getErrorMessage(e), constants.MESSAGE_TYPE.RESUME);\n                        break;\n                    default:\n                        dispatchError(constants.ERROR_TYPE.CAN_NOT_RESUME_CALL, getErrorMessage(e), constants.MESSAGE_TYPE.RESUME);\n                        break;\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.SET_AGENT_STATUS:\n            try {\n                const statusInfo = message.data.statusInfo || {};\n                const enqueueNextState = message.data.enqueueNextState || false;\n                const payload = await vendorConnector.setAgentStatus(message.data.agentStatus, statusInfo, enqueueNextState);\n                Validator.validateClassObject(payload, GenericResult);\n                const { success } = payload;\n                dispatchEvent(constants.EVENT_TYPE.SET_AGENT_STATUS_RESULT, { success });\n            } catch (e) {\n                switch(getErrorType(e)) {\n                    case constants.ERROR_TYPE.INVALID_AGENT_STATUS:\n                        dispatchError(constants.ERROR_TYPE.INVALID_AGENT_STATUS, getErrorMessage(e), constants.MESSAGE_TYPE.SET_AGENT_STATUS);\n                        break;\n                    default:\n                        dispatchError(constants.ERROR_TYPE.CAN_NOT_SET_AGENT_STATUS, getErrorMessage(e), constants.MESSAGE_TYPE.SET_AGENT_STATUS);\n                        break;\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.GET_AGENT_STATUS:\n            try {\n                const payload = await vendorConnector.getAgentStatus();\n                Validator.validateClassObject(payload, AgentVendorStatusInfo);\n                dispatchEvent(constants.EVENT_TYPE.GET_AGENT_STATUS_RESULT, payload);\n            } catch (e) {\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_GET_AGENT_STATUS, getErrorMessage(e), constants.MESSAGE_TYPE.GET_AGENT_STATUS);\n            }\n        break;\n        case constants.MESSAGE_TYPE.DIAL:\n            try {\n                const payload = await vendorConnector.dial(new Contact(message.data.contact));\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                dispatchEvent(constants.EVENT_TYPE.CALL_STARTED, call);\n            } catch (e) {\n                dispatchEvent(constants.EVENT_TYPE.CALL_FAILED);\n                switch(getErrorType(e)) {\n                    case constants.ERROR_TYPE.INVALID_DESTINATION:\n                        dispatchError(constants.ERROR_TYPE.INVALID_DESTINATION, getErrorMessage(e), constants.MESSAGE_TYPE.DIAL);\n                        break;\n                    case constants.ERROR_TYPE.GENERIC_ERROR:\n                        dispatchError(constants.ERROR_TYPE.GENERIC_ERROR, getErrorMessage(e), constants.MESSAGE_TYPE.DIAL);\n                        break;\n                    default:\n                        dispatchError(constants.ERROR_TYPE.CAN_NOT_START_THE_CALL, getErrorMessage(e), constants.MESSAGE_TYPE.DIAL);\n                        break;\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.SEND_DIGITS:\n            try {\n                await vendorConnector.sendDigits(message.data.digits);\n            } catch (e) {\n                dispatchEventLog(constants.MESSAGE_TYPE.SEND_DIGITS, message.data.digits, true);\n            }\n            break;\n        case constants.MESSAGE_TYPE.GET_PHONE_CONTACTS:\n            try  {\n                const payload = await vendorConnector.getPhoneContacts(message.data.filter);\n                Validator.validateClassObject(payload, PhoneContactsResult);\n                const contacts = payload.contacts.map((contact) => {\n                    return {\n                        id: contact.id,\n                        type: contact.type,\n                        name: contact.name,\n                        phoneNumber: contact.phoneNumber,\n                        prefix: contact.prefix,\n                        extension: contact.extension,\n                        endpointARN: contact.endpointARN,\n                        queue: contact.queue,\n                        availability: contact.availability,\n                        recordId: contact.recordId,\n                        description: contact.description\n                    };\n                });\n                dispatchEvent(constants.EVENT_TYPE.PHONE_CONTACTS, {\n                    contacts, contactTypes: payload.contactTypes\n                });\n            } catch (e) {\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_GET_PHONE_CONTACTS, e, constants.MESSAGE_TYPE.GET_PHONE_CONTACTS);\n            }\n        break;\n        case constants.MESSAGE_TYPE.SWAP_PARTICIPANTS:\n            try {\n                // TODO: Create PhoneCall from call1.callId & call2.callId\n                // TODO: rename to call1 and call2\n                const payload = await vendorConnector.swap(message.data.callToHold, message.data.callToResume);\n                publishEvent({ eventType: constants.EVENT_TYPE.PARTICIPANTS_SWAPPED, payload });\n            } catch (e) {\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_SWAP_PARTICIPANTS, e, constants.MESSAGE_TYPE.SWAP_PARTICIPANTS);\n            }\n        break;\n        case constants.MESSAGE_TYPE.CONFERENCE:\n            try {\n                const payload = await vendorConnector.conference(message.data.calls);\n                publishEvent({ eventType: constants.EVENT_TYPE.PARTICIPANTS_CONFERENCED, payload });\n            } catch (e) {\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_CONFERENCE, e, constants.MESSAGE_TYPE.CONFERENCE);\n            }\n        break;\n        case constants.MESSAGE_TYPE.ADD_PARTICIPANT:\n            try {\n                const payload = await vendorConnector.addParticipant(new Contact(message.data.contact), message.data.call, message.data.isBlindTransfer);\n                publishEvent({ eventType: constants.EVENT_TYPE.PARTICIPANT_ADDED, payload });\n                if (message.data.isBlindTransfer) {\n                    dispatchEvent(constants.EVENT_TYPE.HANGUP, message.data.call);\n                }\n            } catch (e) {\n                // TODO: Can we avoid passing in reason field\n                dispatchEvent(constants.EVENT_TYPE.PARTICIPANT_REMOVED, {\n                    reason: constants.EVENT_TYPE.ERROR.toLowerCase()\n                });\n                switch(getErrorType(e)) {\n                    case constants.ERROR_TYPE.INVALID_DESTINATION:\n                        dispatchError(constants.ERROR_TYPE.INVALID_DESTINATION, getErrorMessage(e), constants.MESSAGE_TYPE.ADD_PARTICIPANT);\n                        break;\n                    default:\n                        dispatchError(constants.ERROR_TYPE.CAN_NOT_ADD_PARTICIPANT, getErrorMessage(e), constants.MESSAGE_TYPE.ADD_PARTICIPANT);\n                        break;\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.PAUSE_RECORDING:\n            try {\n                const payload = await vendorConnector.pauseRecording(message.data.call);\n                publishEvent({ eventType: constants.EVENT_TYPE.RECORDING_TOGGLE, payload });\n            } catch (e) {\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_PAUSE_RECORDING, e, constants.MESSAGE_TYPE.PAUSE_RECORDING);\n            }\n        break;\n        case constants.MESSAGE_TYPE.RESUME_RECORDING:\n            try {\n                const payload = await vendorConnector.resumeRecording(message.data.call);\n                publishEvent({ eventType: constants.EVENT_TYPE.RECORDING_TOGGLE, payload });\n            } catch (e) {\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_RESUME_RECORDING, e, constants.MESSAGE_TYPE.RESUME_RECORDING);\n            }\n        break;\n        case constants.MESSAGE_TYPE.LOGOUT:\n            try {\n                const payload = await vendorConnector.logout();\n                Validator.validateClassObject(payload, LogoutResult);\n                const { success, loginFrameHeight } = payload;\n                dispatchEvent(constants.EVENT_TYPE.LOGOUT_RESULT, { success, loginFrameHeight });\n            } catch (e) {\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_LOG_OUT, e, constants.MESSAGE_TYPE.LOGOUT);\n            }\n        break;\n        case constants.MESSAGE_TYPE.MESSAGE:\n            // TODO: Define a return type for handling message\n            vendorConnector.handleMessage(message.data.message);\n        break;\n        case constants.MESSAGE_TYPE.WRAP_UP_CALL:\n            vendorConnector.wrapUpCall(message.data.call);\n        break;\n        case constants.MESSAGE_TYPE.AGENT_AVAILABLE: {\n            agentAvailable = message.data.isAvailable;\n            if (agentAvailable) {\n                const activeCallsResult = await vendorConnector.getActiveCalls();\n                Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n                const activeCalls = activeCallsResult.activeCalls;\n                for (const callId in activeCalls) {\n                    const call = activeCalls[callId];\n                    const shouldReplay = call.callInfo ? call.callInfo.isReplayable : true;\n                    const isSupervisorCall = call.callAttributes && call.callAttributes.participantType === constants.PARTICIPANT_TYPE.SUPERVISOR;\n                    const hasSupervisorBargedIn = isSupervisorCall && call.callAttributes && call.callAttributes.hasSupervisorBargedIn;\n                    if (shouldReplay) {\n                        call.isReplayedCall = true;\n                        switch(call.state) {\n                            case constants.CALL_STATE.CONNECTED:\n                                if (isSupervisorCall) {\n                                    isSupervisorConnected = true;\n                                    dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_CALL_CONNECTED, call);\n                                    if (hasSupervisorBargedIn) {\n                                        dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_BARGED_IN, call);\n                                    }\n                                    break;\n                                }\n                                dispatchEvent(constants.EVENT_TYPE.CALL_CONNECTED, call);\n                                break;\n                            case constants.CALL_STATE.RINGING:\n                                if (isSupervisorCall) {\n                                    isSupervisorConnected = true;\n                                    dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_CALL_STARTED, call);\n                                    break;\n                                }\n                                dispatchEvent(constants.EVENT_TYPE.CALL_STARTED, call);\n                                break;\n                            case constants.CALL_STATE.TRANSFERRING:\n                                dispatchEvent(constants.EVENT_TYPE.PARTICIPANT_ADDED, {\n                                    phoneNumber: call.contact.phoneNumber,\n                                    callInfo: call.callInfo,\n                                    initialCallHasEnded: call.callAttributes.initialCallHasEnded,\n                                    callId: call.callId\n                                });\n                                break;\n                            case constants.CALL_STATE.TRANSFERRED:\n                                dispatchEvent(constants.EVENT_TYPE.PARTICIPANT_CONNECTED, {\n                                    phoneNumber: call.contact.phoneNumber,\n                                    callInfo: call.callInfo,\n                                    initialCallHasEnded: call.callAttributes.initialCallHasEnded,\n                                    callId: call.callId\n                                });\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n        break;\n        case constants.MESSAGE_TYPE.SET_AGENT_CONFIG:\n            try {\n                const result = await vendorConnector.setAgentConfig(message.data.config);\n                Validator.validateClassObject(result, GenericResult);\n                dispatchEvent(constants.EVENT_TYPE.AGENT_CONFIG_UPDATED, result);\n            } catch (e){\n                dispatchError(getErrorType(e) === constants.ERROR_TYPE.CAN_NOT_UPDATE_PHONE_NUMBER ? constants.ERROR_TYPE.CAN_NOT_UPDATE_PHONE_NUMBER : constants.ERROR_TYPE.CAN_NOT_SET_AGENT_CONFIG , getErrorMessage(e), constants.MESSAGE_TYPE.SET_AGENT_CONFIG);\n            }\n        break;\n        case constants.MESSAGE_TYPE.GET_SIGNED_RECORDING_URL:\n            try {\n                const { recordingUrl, vendorCallKey, callId } = message.data;\n                const result = await vendorConnector.getSignedRecordingUrl(recordingUrl, vendorCallKey, callId);\n                Validator.validateClassObject(result, SignedRecordingUrlResult);\n                dispatchEvent(constants.EVENT_TYPE.SIGNED_RECORDING_URL, result);\n            } catch (e) {\n                // In case of an error, we want to show an error message in the recording player\n                const signedRecordingUrlResult = new SignedRecordingUrlResult({\n                    success: false\n                });\n                dispatchEvent(constants.EVENT_TYPE.SIGNED_RECORDING_URL, signedRecordingUrlResult, false);\n                dispatchEventLog(constants.MESSAGE_TYPE.GET_SIGNED_RECORDING_URL, signedRecordingUrlResult, true);\n            }\n        break;\n        case constants.MESSAGE_TYPE.DOWNLOAD_VENDOR_LOGS:\n            vendorConnector.downloadLogs(getLogs());\n        break;\n        case constants.MESSAGE_TYPE.LOG: {\n                const { logLevel, logMessage, payload } = message.data;\n                vendorConnector.logMessageToVendor(logLevel, logMessage, payload);\n            }\n        break;\n        case constants.MESSAGE_TYPE.SUPERVISE_CALL:\n            try {\n                isSupervisorConnected = true;\n                const result = await vendorConnector.superviseCall(message.data.call);\n                Validator.validateClassObject(result, SuperviseCallResult);\n                const agentConfigResult = await vendorConnector.getAgentConfig();\n                if(agentConfigResult.selectedPhone.type === constants.PHONE_TYPE.SOFT_PHONE) {\n                    dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_CALL_CONNECTED, result.call);\n                } else {\n                    dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_CALL_STARTED, result.call);\n                }\n            } catch (e){\n                isSupervisorConnected = false;\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_SUPERVISE_CALL, e, constants.MESSAGE_TYPE.SUPERVISE_CALL);\n            }\n        break;\n        case constants.MESSAGE_TYPE.SUPERVISOR_DISCONNECT:\n            try {\n                const result = await vendorConnector.supervisorDisconnect(message.data.call);\n                Validator.validateClassObject(result, SupervisorHangupResult);\n                isSupervisorConnected = false;\n                dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_HANGUP, result.calls);\n            } catch (e){\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_DISCONNECT_SUPERVISOR, e, constants.MESSAGE_TYPE.SUPERVISOR_DISCONNECT);\n            }\n        break;\n        case constants.MESSAGE_TYPE.SUPERVISOR_BARGE_IN:\n            try {\n                const result = await vendorConnector.supervisorBargeIn(message.data.call);\n                Validator.validateClassObject(result, SuperviseCallResult);\n                dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_BARGED_IN, result.call );\n            } catch (e){\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_BARGE_IN_SUPERVISOR, e, constants.MESSAGE_TYPE.SUPERVISOR_BARGE_IN);\n            }\n        break;\n        default:\n            break;\n    }\n}\n\n\nasync function windowMessageHandler(message) {\n    switch (message.data.type) {\n        case constants.MESSAGE_TYPE.SETUP_CONNECTOR: {\n            const sfDomain = /^https:\\/\\/[\\w-.]+(lightning\\.[\\w]+\\.soma\\.force\\.com|\\.lightning\\.force\\.com|\\.lightning\\.pc-rnd\\.force\\.com|\\.stm\\.force\\.com|\\.salesforce\\.com|\\.my\\.salesforce-sites\\.com|\\.lightning\\.localhost\\.[\\w]+\\.force.com)$/;\n            const originUrl = new URL(message.origin);\n            const url = originUrl.protocol + '//' + originUrl.hostname;\n\n            if (sfDomain.test(url)) {\n                channelPort = message.ports[0];\n                channelPort.onmessage = channelMessageHandler;\n                dispatchEventLog(constants.MESSAGE_TYPE.SETUP_CONNECTOR, exposedConnectorConfig(message.data.connectorConfig), false);\n                try {\n                    const payload = await vendorConnector.init(message.data.connectorConfig);\n                    Validator.validateClassObject(payload, InitResult);\n                    if (payload.showLogin) {\n                        dispatchEvent(constants.EVENT_TYPE.SHOW_LOGIN, {\n                            loginFrameHeight: payload.loginFrameHeight\n                        });\n                    } else {\n                        setConnectorReady();\n                    }\n                } catch (e) {\n                    switch(getErrorType(e)) {\n                        case constants.ERROR_TYPE.INVALID_PARAMS:\n                            dispatchError(constants.ERROR_TYPE.INVALID_PARAMS, getErrorMessage(e), constants.MESSAGE_TYPE.SETUP_CONNECTOR);\n                            break;\n                        default:\n                            dispatchError(constants.ERROR_TYPE.CAN_NOT_LOG_IN, getErrorMessage(e), constants.MESSAGE_TYPE.SETUP_CONNECTOR);\n                            break;\n                    }\n                }\n            }\n            window.removeEventListener('message', windowMessageHandler);\n        }\n            break;\n        default:\n            break;\n    }\n}\n\nfunction exposedConnectorConfig(payload) {\n    payload = payload || {};\n    let obj = {};\n    //properties that are equal to key\n    CONNECTOR_CONFIG_EXPOSED_FIELDS.forEach(prop => {\n        if (payload.hasOwnProperty(prop)) {\n            obj[prop] = payload[prop];\n        }\n    });\n    //properties that start with key\n    CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH.forEach(prop => {\n        Object.keys(payload).forEach(key => {\n            if (key.startsWith(prop)) {\n                obj[key] = payload[key];\n            }\n        });\n    });\n\n    return obj;\n}\n\nfunction validatePayload(payload, payloadType, errorType, eventType) {\n    try {\n        Validator.validateClassObject(payload, payloadType);\n        return true;\n    } catch (e) {\n        if (errorType) {\n            dispatchError(errorType, e, eventType);\n        }\n        return false;\n    }\n}\n\n/*========================== Exported Functions ==========================*/\n/**\n * Initialize a vendor connector\n * @param {VendorConnector} connector\n */\nexport function initializeConnector(connector) {\n    vendorConnector = connector;\n    window.addEventListener('message', windowMessageHandler);\n}\n\n/**\n * Publish an event or error log to Salesforce\n * @param {object} param\n * @param {string} param.eventType Any event type to be logged\n * @param {object} param.payload Any payload for the log that needs to be logged\n * @param {boolean} param.isError\n */\nexport function publishLog({ eventType, payload, isError }) {\n    dispatchEventLog(eventType, payload, isError);\n}\n\n/**\n * Publish a telephony error to Salesforce\n * @param {object} param\n * @param {(\"LOGIN_RESULT\"|\"LOGOUT_RESULT\"|\"CALL_STARTED\"|\"QUEUED_CALL_STARTED\"|\"CALL_CONNECTED\"|\"HANGUP\"|\"PARTICIPANT_CONNECTED\"|\"PARTICIPANT_ADDED\"|\"PARTICIPANTS_SWAPPED\"|\"PARTICIPANTS_CONFERENCED\"|\"MESSAGE\"|\"MUTE_TOGGLE\"|\"HOLD_TOGGLE\"|\"RECORDING_TOGGLE\"|\"AGENT_ERROR\"|\"SOFTPHONE_ERROR\")} param.eventType Event type to publish.\n * @param {object} param.error Error object representing the error\n */\nexport function publishError({ eventType, error }) {\n    switch(eventType) {\n        case constants.EVENT_TYPE.LOGIN_RESULT:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_LOG_IN, error, constants.EVENT_TYPE.LOGIN_RESULT);\n            break;\n        case constants.EVENT_TYPE.LOGOUT_RESULT:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_LOG_OUT, error, constants.EVENT_TYPE.LOGOUT_RESULT);\n            break;\n        case constants.EVENT_TYPE.CALL_STARTED:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_START_THE_CALL, error, constants.EVENT_TYPE.CALL_STARTED);\n            break;\n        case constants.EVENT_TYPE.QUEUED_CALL_STARTED:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_START_THE_CALL, error, constants.EVENT_TYPE.QUEUED_CALL_STARTED);\n            break;\n        case constants.EVENT_TYPE.CALL_CONNECTED:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_START_THE_CALL, error, constants.EVENT_TYPE.CALL_CONNECTED);\n            break;\n        case constants.EVENT_TYPE.HANGUP: \n            dispatchError(constants.ERROR_TYPE.CAN_NOT_END_THE_CALL, error, constants.EVENT_TYPE.HANGUP);\n            break;\n        case constants.EVENT_TYPE.PARTICIPANT_ADDED:\n            dispatchError(getErrorType(error) === constants.ERROR_TYPE.INVALID_PARTICIPANT ? constants.ERROR_TYPE.INVALID_PARTICIPANT : constants.ERROR_TYPE.CAN_NOT_ADD_PARTICIPANT, error, constants.EVENT_TYPE.PARTICIPANT_ADDED);\n            break;\n        case constants.EVENT_TYPE.PARTICIPANT_CONNECTED:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_CONNECT_PARTICIPANT, error, constants.EVENT_TYPE.PARTICIPANT_CONNECTED);\n            break;\n        case constants.EVENT_TYPE.PARTICIPANT_REMOVED:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_HANGUP_PARTICIPANT, error, constants.EVENT_TYPE.PARTICIPANT_REMOVED); \n            break;\n        case constants.EVENT_TYPE.MUTE_TOGGLE:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_TOGGLE_MUTE, error, constants.EVENT_TYPE.MUTE_TOGGLE);\n            break;\n        case constants.EVENT_TYPE.HOLD_TOGGLE: \n            dispatchError(getErrorType(error) === constants.ERROR_TYPE.INVALID_PARTICIPANT ? constants.ERROR_TYPE.INVALID_PARTICIPANT : constants.ERROR_TYPE.CAN_NOT_TOGGLE_HOLD, error, constants.EVENT_TYPE.HOLD_TOGGLE);\n            break;\n        case constants.EVENT_TYPE.RECORDING_TOGGLE:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_TOGGLE_RECORD, error, constants.EVENT_TYPE.RECORDING_TOGGLE);\n            break;\n        case constants.EVENT_TYPE.PARTICIPANTS_SWAPPED: \n            dispatchError(constants.ERROR_TYPE.CAN_NOT_SWAP_PARTICIPANTS, error, constants.EVENT_TYPE.PARTICIPANTS_SWAPPED);\n            break;\n        case constants.EVENT_TYPE.PARTICIPANTS_CONFERENCED:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_CONFERENCE, error, constants.EVENT_TYPE.PARTICIPANTS_CONFERENCED);\n            break;\n        case constants.EVENT_TYPE.AGENT_ERROR:\n            dispatchError(constants.ERROR_TYPE.AGENT_ERROR, error, constants.EVENT_TYPE.AGENT_ERROR);\n            break;\n        case constants.EVENT_TYPE.SOFTPHONE_ERROR:\n            switch(getErrorType(error)) {\n                case constants.ERROR_TYPE.UNSUPPORTED_BROWSER:\n                    dispatchError(constants.ERROR_TYPE.UNSUPPORTED_BROWSER, error, constants.EVENT_TYPE.SOFTPHONE_ERROR);\n                    break;\n                case constants.ERROR_TYPE.MICROPHONE_NOT_SHARED:\n                    dispatchError(constants.ERROR_TYPE.MICROPHONE_NOT_SHARED, error, constants.EVENT_TYPE.SOFTPHONE_ERROR);\n                    break;\n                default:\n                    dispatchError(constants.ERROR_TYPE.GENERIC_ERROR, error, constants.EVENT_TYPE.SOFTPHONE_ERROR);\n            }\n            break;\n        default:\n            console.error('Unhandled error scenario with arguments ', arguments);\n    }\n}\n\n/**\n * Publish an event to Sfdc. The event payload will be verified to be the correct type before being published. \n * @param {object} param\n * @param {(\"LOGIN_RESULT\"|\"LOGOUT_RESULT\"|\"CALL_STARTED\"|\"QUEUED_CALL_STARTED\"|\"CALL_CONNECTED\"|\"HANGUP\"|\"PARTICIPANT_CONNECTED\"|\"PARTICIPANT_ADDED\"|\"PARTICIPANTS_SWAPPED\"|\"PARTICIPANTS_CONFERENCED\"|\"MESSAGE\"|\"MUTE_TOGGLE\"|\"HOLD_TOGGLE\"|\"RECORDING_TOGGLE\")} param.eventType Event type to publish\n * @param {object} param.payload Payload for the event. Must to be an object of the payload class associated with the EVENT_TYPE else the event is NOT dispatched\n * @param {boolean} param.registerLog Boolean to opt out of registering logs for events\n * LOGIN_RESULT - GenericResult\n * LOGOUT_RESULT - LogoutResult\n * CALL_STARTED - CallResult\n * QUEUED_CALL_STARTED - CallResult\n * CALL_CONNECTED - CallResult\n * HANGUP - CallResult\n * PARTICIPANT_CONNECTED - ParticipantResult\n * PARTICIPANT_ADDED - ParticipantResult\n * PARTICIPANTS_SWAPPED - HoldToggleResult\n * PARTICIPANTS_CONFERENCED - HoldToggleResult\n * MESSAGE - object\n * MUTE_TOGGLE - MuteToggleResult\n * HOLD_TOGGLE - HoldToggleResult\n * RECORDING_TOGGLE - RecordingToggleResult\n */\nexport async function publishEvent({ eventType, payload, registerLog = true }) {\n    switch(eventType) {\n        case constants.EVENT_TYPE.LOGIN_RESULT: {\n            if (validatePayload(payload, GenericResult, constants.ERROR_TYPE.CAN_NOT_LOG_IN, constants.EVENT_TYPE.LOGIN_RESULT)) {\n                dispatchEvent(constants.EVENT_TYPE.LOGIN_RESULT, payload, registerLog);\n                if (payload.success) {\n                    setConnectorReady();\n                }\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.LOGOUT_RESULT:\n            if (validatePayload(payload, LogoutResult, constants.ERROR_TYPE.CAN_NOT_LOG_OUT, constants.EVENT_TYPE.LOGOUT_RESULT)) {\n                dispatchEvent(constants.EVENT_TYPE.LOGOUT_RESULT, {\n                    success: payload.success,\n                    loginFrameHeight: payload.loginFrameHeight\n                }, registerLog);\n            }\n            break;\n        case constants.EVENT_TYPE.CALL_STARTED:\n            if (validatePayload(payload, CallResult, constants.ERROR_TYPE.CAN_NOT_START_THE_CALL, constants.EVENT_TYPE.CALL_STARTED)) {\n                dispatchEvent(constants.EVENT_TYPE.CALL_STARTED, payload.call, registerLog);\n            }\n            break;\n        case constants.EVENT_TYPE.QUEUED_CALL_STARTED:\n            if (validatePayload(payload, CallResult, constants.ERROR_TYPE.CAN_NOT_START_THE_CALL, constants.EVENT_TYPE.QUEUED_CALL_STARTED)) {\n                dispatchEvent(constants.EVENT_TYPE.QUEUED_CALL_STARTED, payload.call, registerLog);\n            }\n            break;\n        case constants.EVENT_TYPE.CALL_CONNECTED:\n            if (validatePayload(payload, CallResult, constants.ERROR_TYPE.CAN_NOT_START_THE_CALL, constants.EVENT_TYPE.CALL_CONNECTED)) {\n                initAudioStats();\n                if (isSupervisorConnected) {\n                    const hangupPayload = await vendorConnector.supervisorDisconnect();\n                    Validator.validateClassObject(hangupPayload, SupervisorHangupResult);\n                    isSupervisorConnected = false;\n                    dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_HANGUP, hangupPayload, registerLog);\n                    dispatchEvent(constants.EVENT_TYPE.CALL_CONNECTED, payload.call, registerLog);\n                    break;\n                } \n                dispatchEvent(constants.EVENT_TYPE.CALL_CONNECTED, payload.call, registerLog);\n            }\n            break;\n        case constants.EVENT_TYPE.HANGUP: {\n            if (validatePayload(payload, HangupResult, constants.ERROR_TYPE.CAN_NOT_END_THE_CALL, constants.EVENT_TYPE.HANGUP)) {\n                dispatchEvent(constants.EVENT_TYPE.HANGUP, payload.calls, registerLog);\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.PARTICIPANT_ADDED: {\n            if (validatePayload(payload, ParticipantResult, constants.ERROR_TYPE.CAN_NOT_ADD_PARTICIPANT, constants.EVENT_TYPE.PARTICIPANT_ADDED)) {\n                const { initialCallHasEnded, callInfo, phoneNumber, callId } = payload;\n                dispatchEvent(constants.EVENT_TYPE.PARTICIPANT_ADDED, {\n                    initialCallHasEnded,\n                    callInfo,\n                    phoneNumber,\n                    callId\n                }, registerLog);\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.PARTICIPANT_CONNECTED: {\n            if (validatePayload(payload, ParticipantResult, constants.ERROR_TYPE.CAN_NOT_CONNECT_PARTICIPANT, constants.EVENT_TYPE.PARTICIPANT_CONNECTED)) {\n                const { initialCallHasEnded, callInfo, phoneNumber, callId } = payload;\n                dispatchEvent(constants.EVENT_TYPE.PARTICIPANT_CONNECTED, {\n                    initialCallHasEnded,\n                    callInfo,\n                    phoneNumber,\n                    callId\n                }, registerLog);\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.PARTICIPANT_REMOVED: {\n            // TODO: The logic here needs to be modified. Ideally firing CallResult with \n            // correct participantType should do the trick but we are firing PARTICIPANT_CONNECTED because of a bug W-8601645\n            // Once the bug is fixed, this code needs to be updated\n            if (validatePayload(payload, CallResult, constants.ERROR_TYPE.CAN_NOT_HANGUP_PARTICIPANT, constants.EVENT_TYPE.PARTICIPANT_REMOVED)) { \n                const { call } = payload;\n                const activeCallsResult = await vendorConnector.getActiveCalls();\n                if (validatePayload(activeCallsResult, ActiveCallsResult)) {\n                    // when no more active calls, fire HANGUP\n                    const activeCalls = activeCallsResult.activeCalls;\n                    if (activeCalls.length === 0) {\n                        dispatchEvent(constants.EVENT_TYPE.HANGUP, call, registerLog);\n                    } else if (call && call.callAttributes && call.callAttributes.participantType === constants.PARTICIPANT_TYPE.INITIAL_CALLER) {\n                        // when there is still transfer call, based on the state of the transfer call, fire PARTICIPANT_ADDED or PARTICIPANT_CONNECTED\n                        const transferCall = Object.values(activeCalls).filter((obj) => obj['callType'] === constants.CALL_TYPE.ADD_PARTICIPANT).pop();\n                        const event = transferCall.state === constants.CALL_STATE.TRANSFERRING ? constants.EVENT_TYPE.PARTICIPANT_ADDED : constants.EVENT_TYPE.PARTICIPANT_CONNECTED;\n                        dispatchEvent(event, {\n                            initialCallHasEnded : true\n                        })\n                    } else {\n                        dispatchEvent(constants.EVENT_TYPE.PARTICIPANT_REMOVED, {\n                            reason: call? call.reason : null\n                        }, registerLog);\n                    }\n                }\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.MESSAGE:\n            dispatchEvent(constants.EVENT_TYPE.MESSAGE, payload, registerLog);\n            break;\n        // TODO: Add validations for the ACW & Wrap up ended\n        case constants.EVENT_TYPE.AFTER_CALL_WORK_STARTED:\n            dispatchEvent(constants.EVENT_TYPE.AFTER_CALL_WORK_STARTED, payload, registerLog);\n            break;\n        case constants.EVENT_TYPE.WRAP_UP_ENDED:\n            dispatchEvent(constants.EVENT_TYPE.WRAP_UP_ENDED, payload, registerLog);\n            break;\n        /* This is only added to aid in connector development */\n        case constants.EVENT_TYPE.REMOTE_CONTROLLER:\n            channelMessageHandler(payload);\n            break;\n        case constants.EVENT_TYPE.MUTE_TOGGLE:\n            if (validatePayload(payload, MuteToggleResult, constants.ERROR_TYPE.CAN_NOT_TOGGLE_MUTE, constants.EVENT_TYPE.MUTE_TOGGLE)) {\n                dispatchEvent(constants.EVENT_TYPE.MUTE_TOGGLE, payload, registerLog);\n            }\n            break;\n        case constants.EVENT_TYPE.HOLD_TOGGLE: {\n            const { isThirdPartyOnHold, isCustomerOnHold, calls} = payload;\n            if (validatePayload(payload, HoldToggleResult, constants.ERROR_TYPE.CAN_NOT_TOGGLE_HOLD, constants.EVENT_TYPE.HOLD_TOGGLE)) {\n                dispatchEvent(constants.EVENT_TYPE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold,\n                    calls\n                }, registerLog);\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.RECORDING_TOGGLE: {\n            const { isRecordingPaused,\n                contactId,\n                initialContactId,\n                instanceId,\n                region\n            } = payload;\n            if (validatePayload(payload, RecordingToggleResult, constants.ERROR_TYPE.CAN_NOT_TOGGLE_RECORD, constants.EVENT_TYPE.RECORDING_TOGGLE)) {\n                dispatchEvent(constants.EVENT_TYPE.RECORDING_TOGGLE, {\n                    isRecordingPaused,\n                    contactId,\n                    initialContactId,\n                    instanceId,\n                    region\n                }, registerLog);\n            }\n        break;\n        }\n        case constants.EVENT_TYPE.PARTICIPANTS_SWAPPED: {\n            if (validatePayload(payload, HoldToggleResult, constants.ERROR_TYPE.CAN_NOT_SWAP_PARTICIPANTS, constants.EVENT_TYPE.PARTICIPANTS_SWAPPED)) {\n                const { isThirdPartyOnHold, isCustomerOnHold, calls } = payload;\n                dispatchEvent(constants.EVENT_TYPE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold,\n                    calls\n                }, registerLog);\n            }\n        }\n        break;\n        case constants.EVENT_TYPE.PARTICIPANTS_CONFERENCED: {\n            if (validatePayload(payload, HoldToggleResult, constants.ERROR_TYPE.CAN_NOT_CONFERENCE, constants.EVENT_TYPE.PARTICIPANTS_CONFERENCED)) {\n                const { isThirdPartyOnHold, isCustomerOnHold } = payload;\n                dispatchEvent(constants.EVENT_TYPE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold\n                }, registerLog);\n            }\n        break;\n        }\n        case constants.EVENT_TYPE.UPDATE_AUDIO_STATS: {\n            if (validatePayload(payload, AudioStats)) {\n                if (payload.stats) {\n                    updateAudioStats(payload.stats);\n                }\n                if (payload.isAudioStatsCompleted && payload.callId) {\n                    const callId = payload.callId;\n                    const mos = getMOS();\n                    dispatchEvent(constants.EVENT_TYPE.UPDATE_AUDIO_STATS_COMPLETED, {callId, mos}, registerLog);\n                }\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.SUPERVISOR_BARGED_IN: {\n            if (validatePayload(payload, SuperviseCallResult, constants.ERROR_TYPE.CAN_NOT_BARGE_IN_SUPERVISOR, constants.EVENT_TYPE.SUPERVISOR_BARGED_IN)) {\n                dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_BARGED_IN, payload.call, registerLog);\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.CALL_BARGED_IN: {\n            if (validatePayload(payload, SupervisedCallInfo,  constants.ERROR_TYPE.GENERIC_ERROR, constants.EVENT_TYPE.CALL_BARGED_IN)) {\n                dispatchEvent(constants.EVENT_TYPE.CALL_BARGED_IN, payload, registerLog);\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.SUPERVISOR_CALL_STARTED: {\n            if (validatePayload(payload, SuperviseCallResult,  constants.ERROR_TYPE.CAN_NOT_SUPERVISE_CALL, constants.EVENT_TYPE.SUPERVISOR_CALL_STARTED)) {\n                isSupervisorConnected = true;\n                dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_CALL_STARTED, payload.call, registerLog);\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.SUPERVISOR_CALL_CONNECTED: {\n            if (validatePayload(payload, SuperviseCallResult,  constants.ERROR_TYPE.CAN_NOT_SUPERVISE_CALL, constants.EVENT_TYPE.SUPERVISOR_CALL_CONNECTED)) {\n                isSupervisorConnected = true;\n                dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_CALL_CONNECTED, payload.call, registerLog);\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.SUPERVISOR_HANGUP: {\n            if (validatePayload(payload, SupervisorHangupResult,  constants.ERROR_TYPE.CAN_NOT_DISCONNECT_SUPERVISOR, constants.EVENT_TYPE.SUPERVISOR_HANGUP)) {\n                isSupervisorConnected = false;\n                dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_HANGUP, payload.calls, registerLog);\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.SET_AGENT_STATUS: {\n            if (validatePayload(payload, AgentStatusInfo,  constants.ERROR_TYPE.CAN_NOT_SET_AGENT_STATUS, constants.EVENT_TYPE.SET_AGENT_STATUS)) {\n                const statusId = payload.statusId;\n                dispatchEvent(constants.EVENT_TYPE.SET_AGENT_STATUS, { statusId }, registerLog);\n            }\n            break;\n        }\n\n        /**\n         * NOTE: SALESFORCE INTERNAL USE ONLY\n         */\n        case constants.EVENT_TYPE.GET_AGENT_STATUS: {\n            if (validatePayload(payload, AgentVendorStatusInfo, constants.ERROR_TYPE.CAN_NOT_GET_AGENT_STATUS, constants.EVENT_TYPE.GET_AGENT_STATUS)) {\n                dispatchEvent(constants.EVENT_TYPE.GET_AGENT_STATUS, payload);\n            }\n            break;\n        }\n\n        /**\n         * NOTE: SALESFORCE INTERNAL USE ONLY\n         */\n        case constants.EVENT_TYPE.STATE_CHANGE: {\n            if(validatePayload(payload, StateChangeResult, constants.ERROR_TYPE.INVALID_STATE_CHANGE_RESULT, constants.EVENT_TYPE.STATE_CHANGE)) {\n                dispatchEvent(constants.EVENT_TYPE.STATE_CHANGE, payload);\n            }\n            break;\n        }\n    }\n}"],"sourceRoot":""}
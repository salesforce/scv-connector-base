{"version":3,"file":"scv-connector-base.js","mappings":"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","sources":["webpack://SCVConnectorBase/webpack/universalModuleDefinition","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/OverloadYield.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/regeneratorKeys.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/regeneratorDefine.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/regeneratorValues.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/regeneratorRuntime.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/typeof.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/regenerator/index.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/regeneratorAsyncIterator.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/regeneratorAsync.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/regeneratorAsyncGen.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/regenerator.js","webpack://SCVConnectorBase/webpack/bootstrap","webpack://SCVConnectorBase/webpack/runtime/compat get default export","webpack://SCVConnectorBase/webpack/runtime/define property getters","webpack://SCVConnectorBase/webpack/runtime/hasOwnProperty shorthand","webpack://SCVConnectorBase/webpack/runtime/make namespace object","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/toPrimitive.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","webpack://SCVConnectorBase/./src/main/constants.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/createClass.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/classCallCheck.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/inherits.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/construct.js","webpack://SCVConnectorBase/./src/main/logger.js","webpack://SCVConnectorBase/./src/main/downloadData.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack://SCVConnectorBase/./src/main/types.js","webpack://SCVConnectorBase/./src/main/mosUtil.js","webpack://SCVConnectorBase/./src/main/baseConnector.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SCVConnectorBase\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SCVConnectorBase\"] = factory();\n\telse\n\t\troot[\"SCVConnectorBase\"] = factory();\n})(this, () => {\nreturn ","function _OverloadYield(e, d) {\n  this.v = e, this.k = d;\n}\nmodule.exports = _OverloadYield, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _regeneratorKeys(e) {\n  var n = Object(e),\n    r = [];\n  for (var t in n) r.unshift(t);\n  return function e() {\n    for (; r.length;) if ((t = r.pop()) in n) return e.value = t, e.done = !1, e;\n    return e.done = !0, e;\n  };\n}\nmodule.exports = _regeneratorKeys, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _regeneratorDefine(e, r, n, t) {\n  var i = Object.defineProperty;\n  try {\n    i({}, \"\", {});\n  } catch (e) {\n    i = 0;\n  }\n  module.exports = _regeneratorDefine = function regeneratorDefine(e, r, n, t) {\n    function o(r, n) {\n      _regeneratorDefine(e, r, function (e) {\n        return this._invoke(r, n, e);\n      });\n    }\n    r ? i ? i(e, r, {\n      value: n,\n      enumerable: !t,\n      configurable: !t,\n      writable: !t\n    }) : e[r] = n : (o(\"next\", 0), o(\"throw\", 1), o(\"return\", 2));\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _regeneratorDefine(e, r, n, t);\n}\nmodule.exports = _regeneratorDefine, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _regeneratorValues(e) {\n  if (null != e) {\n    var t = e[\"function\" == typeof Symbol && Symbol.iterator || \"@@iterator\"],\n      r = 0;\n    if (t) return t.call(e);\n    if (\"function\" == typeof e.next) return e;\n    if (!isNaN(e.length)) return {\n      next: function next() {\n        return e && r >= e.length && (e = void 0), {\n          value: e && e[r++],\n          done: !e\n        };\n      }\n    };\n  }\n  throw new TypeError(_typeof(e) + \" is not iterable\");\n}\nmodule.exports = _regeneratorValues, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var OverloadYield = require(\"./OverloadYield.js\");\nvar regenerator = require(\"./regenerator.js\");\nvar regeneratorAsync = require(\"./regeneratorAsync.js\");\nvar regeneratorAsyncGen = require(\"./regeneratorAsyncGen.js\");\nvar regeneratorAsyncIterator = require(\"./regeneratorAsyncIterator.js\");\nvar regeneratorKeys = require(\"./regeneratorKeys.js\");\nvar regeneratorValues = require(\"./regeneratorValues.js\");\nfunction _regeneratorRuntime() {\n  \"use strict\";\n\n  var r = regenerator(),\n    e = r.m(_regeneratorRuntime),\n    t = (Object.getPrototypeOf ? Object.getPrototypeOf(e) : e.__proto__).constructor;\n  function n(r) {\n    var e = \"function\" == typeof r && r.constructor;\n    return !!e && (e === t || \"GeneratorFunction\" === (e.displayName || e.name));\n  }\n  var o = {\n    \"throw\": 1,\n    \"return\": 2,\n    \"break\": 3,\n    \"continue\": 3\n  };\n  function a(r) {\n    var e, t;\n    return function (n) {\n      e || (e = {\n        stop: function stop() {\n          return t(n.a, 2);\n        },\n        \"catch\": function _catch() {\n          return n.v;\n        },\n        abrupt: function abrupt(r, e) {\n          return t(n.a, o[r], e);\n        },\n        delegateYield: function delegateYield(r, o, a) {\n          return e.resultName = o, t(n.d, regeneratorValues(r), a);\n        },\n        finish: function finish(r) {\n          return t(n.f, r);\n        }\n      }, t = function t(r, _t, o) {\n        n.p = e.prev, n.n = e.next;\n        try {\n          return r(_t, o);\n        } finally {\n          e.next = n.n;\n        }\n      }), e.resultName && (e[e.resultName] = n.v, e.resultName = void 0), e.sent = n.v, e.next = n.n;\n      try {\n        return r.call(this, e);\n      } finally {\n        n.p = e.prev, n.n = e.next;\n      }\n    };\n  }\n  return (module.exports = _regeneratorRuntime = function _regeneratorRuntime() {\n    return {\n      wrap: function wrap(e, t, n, o) {\n        return r.w(a(e), t, n, o && o.reverse());\n      },\n      isGeneratorFunction: n,\n      mark: r.m,\n      awrap: function awrap(r, e) {\n        return new OverloadYield(r, e);\n      },\n      AsyncIterator: regeneratorAsyncIterator,\n      async: function async(r, e, t, o, u) {\n        return (n(e) ? regeneratorAsyncGen : regeneratorAsync)(a(r), e, t, o, u);\n      },\n      keys: regeneratorKeys,\n      values: regeneratorValues\n    };\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports)();\n}\nmodule.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _typeof(o);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","// TODO(Babel 8): Remove this file.\n\nvar runtime = require(\"../helpers/regeneratorRuntime\")();\nmodule.exports = runtime;\n\n// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","var OverloadYield = require(\"./OverloadYield.js\");\nvar regeneratorDefine = require(\"./regeneratorDefine.js\");\nfunction AsyncIterator(t, e) {\n  function n(r, o, i, f) {\n    try {\n      var c = t[r](o),\n        u = c.value;\n      return u instanceof OverloadYield ? e.resolve(u.v).then(function (t) {\n        n(\"next\", t, i, f);\n      }, function (t) {\n        n(\"throw\", t, i, f);\n      }) : e.resolve(u).then(function (t) {\n        c.value = t, i(c);\n      }, function (t) {\n        return n(\"throw\", t, i, f);\n      });\n    } catch (t) {\n      f(t);\n    }\n  }\n  var r;\n  this.next || (regeneratorDefine(AsyncIterator.prototype), regeneratorDefine(AsyncIterator.prototype, \"function\" == typeof Symbol && Symbol.asyncIterator || \"@asyncIterator\", function () {\n    return this;\n  })), regeneratorDefine(this, \"_invoke\", function (t, o, i) {\n    function f() {\n      return new e(function (e, r) {\n        n(t, i, e, r);\n      });\n    }\n    return r = r ? r.then(f, f) : f();\n  }, !0);\n}\nmodule.exports = AsyncIterator, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var regeneratorAsyncGen = require(\"./regeneratorAsyncGen.js\");\nfunction _regeneratorAsync(n, e, r, t, o) {\n  var a = regeneratorAsyncGen(n, e, r, t, o);\n  return a.next().then(function (n) {\n    return n.done ? n.value : a.next();\n  });\n}\nmodule.exports = _regeneratorAsync, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var regenerator = require(\"./regenerator.js\");\nvar regeneratorAsyncIterator = require(\"./regeneratorAsyncIterator.js\");\nfunction _regeneratorAsyncGen(r, e, t, o, n) {\n  return new regeneratorAsyncIterator(regenerator().w(r, e, t, o), n || Promise);\n}\nmodule.exports = _regeneratorAsyncGen, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var regeneratorDefine = require(\"./regeneratorDefine.js\");\nfunction _regenerator() {\n  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */\n  var e,\n    t,\n    r = \"function\" == typeof Symbol ? Symbol : {},\n    n = r.iterator || \"@@iterator\",\n    o = r.toStringTag || \"@@toStringTag\";\n  function i(r, n, o, i) {\n    var c = n && n.prototype instanceof Generator ? n : Generator,\n      u = Object.create(c.prototype);\n    return regeneratorDefine(u, \"_invoke\", function (r, n, o) {\n      var i,\n        c,\n        u,\n        f = 0,\n        p = o || [],\n        y = !1,\n        G = {\n          p: 0,\n          n: 0,\n          v: e,\n          a: d,\n          f: d.bind(e, 4),\n          d: function d(t, r) {\n            return i = t, c = 0, u = e, G.n = r, a;\n          }\n        };\n      function d(r, n) {\n        for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) {\n          var o,\n            i = p[t],\n            d = G.p,\n            l = i[2];\n          r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0));\n        }\n        if (o || r > 1) return a;\n        throw y = !0, n;\n      }\n      return function (o, p, l) {\n        if (f > 1) throw TypeError(\"Generator is already running\");\n        for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) {\n          i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u);\n          try {\n            if (f = 2, i) {\n              if (c || (o = \"next\"), t = i[o]) {\n                if (!(t = t.call(i, u))) throw TypeError(\"iterator result is not an object\");\n                if (!t.done) return t;\n                u = t.value, c < 2 && (c = 0);\n              } else 1 === c && (t = i[\"return\"]) && t.call(i), c < 2 && (u = TypeError(\"The iterator does not provide a '\" + o + \"' method\"), c = 1);\n              i = e;\n            } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break;\n          } catch (t) {\n            i = e, c = 1, u = t;\n          } finally {\n            f = 1;\n          }\n        }\n        return {\n          value: t,\n          done: y\n        };\n      };\n    }(r, o, i), !0), u;\n  }\n  var a = {};\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  t = Object.getPrototypeOf;\n  var c = [][n] ? t(t([][n]())) : (regeneratorDefine(t = {}, n, function () {\n      return this;\n    }), t),\n    u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c);\n  function f(e) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, regeneratorDefine(e, o, \"GeneratorFunction\")), e.prototype = Object.create(u), e;\n  }\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, regeneratorDefine(u, \"constructor\", GeneratorFunctionPrototype), regeneratorDefine(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = \"GeneratorFunction\", regeneratorDefine(GeneratorFunctionPrototype, o, \"GeneratorFunction\"), regeneratorDefine(u), regeneratorDefine(u, o, \"Generator\"), regeneratorDefine(u, n, function () {\n    return this;\n  }), regeneratorDefine(u, \"toString\", function () {\n    return \"[object Generator]\";\n  }), (module.exports = _regenerator = function _regenerator() {\n    return {\n      w: i,\n      m: f\n    };\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports)();\n}\nmodule.exports = _regenerator, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nexport { _typeof as default };","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nexport { toPropertyKey as default };","import _typeof from \"./typeof.js\";\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nexport { toPrimitive as default };","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nexport { _defineProperty as default };","function asyncGeneratorStep(n, t, e, r, o, a, c) {\n  try {\n    var i = n[a](c),\n      u = i.value;\n  } catch (n) {\n    return void e(n);\n  }\n  i.done ? t(u) : Promise.resolve(u).then(r, o);\n}\nfunction _asyncToGenerator(n) {\n  return function () {\n    var t = this,\n      e = arguments;\n    return new Promise(function (r, o) {\n      var a = n.apply(t, e);\n      function _next(n) {\n        asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n);\n      }\n      function _throw(n) {\n        asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n);\n      }\n      _next(void 0);\n    });\n  };\n}\nexport { _asyncToGenerator as default };","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nexport default {\n    SHARED_MESSAGE_TYPE: {\n        // Telephony Message Types: sent from SFDC to Telephony Vendor\n        // Framework Message Types\n        SETUP_CONNECTOR: 'SETUP_CONNECTOR',\n        CONNECTOR_READY: 'CONNECTOR_READY',\n        LOG: 'LOG',\n        TELEPHONY_EVENT_DISPATCHED: 'TELEPHONY_EVENT_DISPATCHED',\n        SET_AGENT_STATUS: 'SET_AGENT_STATUS',\n        GET_AGENT_STATUS: 'GET_AGENT_STATUS',\n        LOGOUT: 'LOGOUT',\n        MESSAGE: 'MESSAGE',\n        DOWNLOAD_VENDOR_LOGS: 'DOWNLOAD_VENDOR_LOGS',\n        AGENT_WORK_EVENT: 'AGENT_WORK_EVENT',\n        GET_CONTACTS: 'GET_CONTACTS'\n    },\n    VOICE_MESSAGE_TYPE: {\n        ACCEPT_CALL: 'ACCEPT_CALL',\n        DECLINE_CALL: 'DECLINE_CALL',\n        END_CALL: 'END_CALL',\n        MUTE: 'MUTE',\n        UNMUTE: 'UNMUTE',\n        HOLD: 'HOLD',\n        RESUME: 'RESUME',\n        DIAL: 'DIAL',\n        SEND_DIGITS: 'SEND_DIGITS',\n        GET_PHONE_CONTACTS: 'GET_PHONE_CONTACTS',\n        SWAP_PARTICIPANTS: 'SWAP_PARTICIPANTS',\n        ADD_PARTICIPANT: 'ADD_PARTICIPANT',\n        CONFERENCE: 'CONFERENCE',\n        PAUSE_RECORDING: 'PAUSE_RECORDING',\n        RESUME_RECORDING: 'RESUME_RECORDING',\n        SUPERVISE_CALL: 'SUPERVISE_CALL',\n        SUPERVISOR_BARGE_IN : 'SUPERVISOR_BARGE_IN',\n        SUPERVISOR_DISCONNECT: 'SUPERVISOR_DISCONNECT',\n        SET_AGENT_CONFIG: 'SET_AGENT_CONFIG',\n        GET_SIGNED_RECORDING_URL: 'GET_SIGNED_RECORDING_URL',\n        WRAP_UP_CALL: 'WRAP_UP_CALL',\n        AGENT_AVAILABLE: 'AGENT_AVAILABLE',\n        GET_AUDIO_DEVICES: 'GET_AUDIO_DEVICES'\n    },\n    SHARED_EVENT_TYPE: {\n        ERROR: 'ERROR',\n        WARNING: 'WARNING',\n        INFO: 'INFO',\n        LOGIN_STARTED: 'LOGIN_STARTED',\n        LOGIN_RESULT: 'LOGIN_RESULT', // info about timeout, error, success etc\n        LOGOUT_RESULT: 'LOGOUT_RESULT',\n        SHOW_LOGIN: 'SHOW_LOGIN',\n        SET_AGENT_STATUS_RESULT: 'SET_AGENT_STATUS_RESULT',\n        GET_AGENT_STATUS_RESULT: 'GET_AGENT_STATUS_RESULT',\n        MESSAGE: 'MESSAGE',\n        SET_AGENT_STATUS: 'SET_AGENT_STATUS',\n        GET_AGENT_STATUS: 'GET_AGENT_STATUS',\n        STATE_CHANGE: 'STATE_CHANGE',\n        REMOTE_CONTROLLER: 'REMOTE_CONTROLLER',\n        SHOW_STORAGE_ACCESS: 'SHOW_STORAGE_ACCESS',\n        STORAGE_ACCESS_RESULT: 'STORAGE_ACCESS_RESULT',\n        GET_CONTACTS_RESULT: 'GET_CONTACTS_RESULT',\n        AFTER_CONVERSATION_WORK_STARTED: 'AFTER_CONVERSATION_WORK_STARTED',\n        AFTER_CONVERSATION_WORK_ENDED: 'AFTER_CONVERSATION_WORK_ENDED'\n    },\n    VOICE_EVENT_TYPE: {\n        QUEUED_CALL_STARTED: 'QUEUED_CALL_STARTED',\n        CALL_STARTED: 'CALL_STARTED',\n        CALL_CONNECTED: 'CALL_CONNECTED',\n        CALL_FAILED: 'CALL_FAILED',\n        MUTE_TOGGLE: 'MUTE_TOGGLE',\n        HOLD_TOGGLE: 'HOLD_TOGGLE',\n        PHONE_CONTACTS: 'PHONE_CONTACTS',\n        PARTICIPANT_ADDED: 'PARTICIPANT_ADDED',\n        PARTICIPANT_CONNECTED: 'PARTICIPANT_CONNECTED',\n        PARTICIPANT_REMOVED: 'PARTICIPANT_REMOVED',\n        RECORDING_TOGGLE: 'RECORDING_TOGGLE',\n        PARTICIPANTS_SWAPPED: 'PARTICIPANTS_SWAPPED',\n        PARTICIPANTS_CONFERENCED: 'PARTICIPANTS_CONFERENCED',\n        SIGNED_RECORDING_URL: 'SIGNED_RECORDING_URL',\n        UPDATE_AUDIO_STATS: 'UPDATE_AUDIO_STATS',\n        UPDATE_AUDIO_STATS_COMPLETED: 'UPDATE_AUDIO_STATS_COMPLETED',\n        SUPERVISOR_BARGED_IN: 'SUPERVISOR_BARGED_IN',\n        SUPERVISOR_CALL_STARTED : 'SUPERVISOR_CALL_STARTED',\n        SUPERVISOR_CALL_CONNECTED: 'SUPERVISOR_CALL_CONNECTED',\n        SUPERVISOR_HANGUP : 'SUPERVISOR_HANGUP',\n        CALL_BARGED_IN : 'CALL_BARGED_IN',\n        WRAP_UP_ENDED: 'WRAP_UP_ENDED',\n        AFTER_CALL_WORK_STARTED: 'AFTER_CALL_WORK_STARTED',\n        AGENT_CONFIG_UPDATED: 'AGENT_CONFIG_UPDATED',\n        AGENT_ERROR: 'AGENT_ERROR',\n        HANGUP: 'HANGUP',\n        SOFTPHONE_ERROR: 'SOFTPHONE_ERROR',\n        SHOW_TRANSFER_VIEW: 'SHOW_TRANSFER_VIEW',\n        GET_AUDIO_DEVICES: 'GET_AUDIO_DEVICES',\n        AUDIO_STATS: 'AUDIO_STATS',\n        CALL_UPDATED: 'CALL_UPDATED' //sent during a call to update call controls\n    },\n    INFO_TYPE: {\n        CAN_NOT_ACCEPT_THE_CALL: 'CAN_NOT_ACCEPT_THE_CALL'\n    },\n    SHARED_ERROR_TYPE: {\n        CUSTOM_ERROR: 'CUSTOM_ERROR',\n        GENERIC_ERROR: 'GENERIC_ERROR',\n        AUTHENTICATION_ERROR: 'AUTHENTICATION_ERROR',\n        INVALID_AGENT_STATUS: 'INVALID_AGENT_STATUS',\n        CAN_NOT_GET_AGENT_STATUS: 'CAN_NOT_GET_AGENT_STATUS',\n        CAN_NOT_SET_AGENT_STATUS: 'CAN_NOT_SET_AGENT_STATUS',\n        LOGIN_REQUIRED: 'LOGIN_REQUIRED',\n        CAN_NOT_LOG_IN: 'CAN_NOT_LOG_IN',\n        CAN_NOT_LOG_OUT: 'CAN_NOT_LOG_OUT',\n        INVALID_STATE_CHANGE_RESULT: 'INVALID_STATE_CHANGE_RESULT',\n        INVALID_STORAGE_ACCESS_RESULT: 'INVALID_STORAGE_ACCESS_RESULT',\n        INVALID_ACW_INFO: 'INVALID_ACW_INFO'\n    },\n    VOICE_ERROR_TYPE: {\n        CAN_NOT_DECLINE_THE_CALL: 'CAN_NOT_DECLINE_THE_CALL',\n        CAN_NOT_END_THE_CALL: 'CAN_NOT_END_THE_CALL',\n        CAN_NOT_HOLD_CALL: 'CAN_NOT_HOLD_CALL',\n        CAN_NOT_RESUME_CALL: 'CAN_NOT_RESUME_CALL',\n        CAN_NOT_MUTE_CALL: 'CAN_NOT_MUTE_CALL',\n        CAN_NOT_UNMUTE_CALL: 'CAN_NOT_UNMUTE_CALL',\n        CAN_NOT_TOGGLE_MUTE: 'CAN_NOT_TOGGLE_MUTE',\n        CAN_NOT_TOGGLE_HOLD: 'CAN_NOT_TOGGLE_HOLD',\n        CAN_NOT_TOGGLE_RECORD: 'CAN_NOT_TOGGLE_RECORD',\n        INVALID_PARTICIPANT: 'INVALID_PARTICIPANT',\n        INVALID_PARAMS: 'INVALID_PARAMS',\n        CAN_NOT_GET_PHONE_CONTACTS: 'CAN_NOT_GET_PHONE_CONTACTS',\n        CAN_NOT_SWAP_PARTICIPANTS: 'CAN_NOT_SWAP_PARTICIPANTS',\n        CAN_NOT_CONFERENCE: 'CAN_NOT_CONFERENCE',\n        INVALID_DESTINATION: 'INVALID_DESTINATION',\n        INVALID_PHONE_NUMBER: 'INVALID_PHONE_NUMBER',\n        CAN_NOT_HANGUP_PARTICIPANT: 'CAN_NOT_HANGUP_PARTICIPANT',\n        CAN_NOT_ADD_PARTICIPANT: 'CAN_NOT_ADD_PARTICIPANT',\n        CAN_NOT_CONNECT_PARTICIPANT: 'CAN_NOT_CONNECT_PARTICIPANT',\n        CAN_NOT_START_THE_CALL: 'CAN_NOT_START_THE_CALL',\n        CAN_NOT_PAUSE_RECORDING: 'CAN_NOT_PAUSE_RECORDING',\n        CAN_NOT_RESUME_RECORDING: 'CAN_NOT_RESUME_RECORDING',\n        CAN_NOT_SET_AGENT_CONFIG: 'CAN_NOT_SET_AGENT_CONFIG',\n        CAN_NOT_SET_CAPABILITIES: 'CAN_NOT_SET_CAPABILITIES',\n        CAN_NOT_UPDATE_PHONE_NUMBER: 'CAN_NOT_UPDATE_PHONE_NUMBER',\n        CAN_NOT_GET_SIGNED_RECORDING_URL: 'CAN_NOT_GET_SIGNED_RECORDING_URL',\n        CAN_NOT_SUPERVISE_CALL : 'CAN_NOT_SUPERVISE_CALL',\n        CAN_NOT_DISCONNECT_SUPERVISOR : 'CAN_NOT_DISCONNECT_SUPERVISOR',\n        CAN_NOT_BARGE_IN_SUPERVISOR: 'CAN_NOT_BARGE_IN_SUPERVISOR',\n        CAN_NOT_BARGE_IN_CALL: 'CAN_NOT_BARGE_IN_CALL',\n        AGENT_ERROR: 'AGENT_ERROR',\n        MICROPHONE_NOT_SHARED: 'MICROPHONE_NOT_SHARED',\n        UNSUPPORTED_BROWSER: 'UNSUPPORTED_BROWSER',\n        USER_BUSY_ERROR: 'USER_BUSY_ERROR',\n        WEBRTC_ERROR: 'WEBRTC_ERROR',\n        CAN_NOT_GET_AUDIO_DEVICES: 'CAN_NOT_GET_AUDIO_DEVICES',\n        CAN_NOT_UPDATE_CALL: 'CAN_NOT_UPDATE_CALL'\n    },\n    AGENT_STATUS: {\n        ONLINE: 'Online',\n        OFFLINE: 'Offline',\n        ACW : 'AfterCallWork'\n    },\n    PARTICIPANT_TYPE: {\n        AGENT: 'Agent',\n        INITIAL_CALLER: 'Initial_Caller',\n        THIRD_PARTY: 'Third_Party',\n        SUPERVISOR: 'Supervisor'\n    },\n    CALL_TYPE: {\n        INBOUND: 'Inbound',\n        OUTBOUND: 'Outbound',\n        CALLBACK: 'Callback',\n        ADD_PARTICIPANT: 'AddParticipant',\n        TRANSFER:'Transfer',\n        INTERNAL_CALL: 'InternalCall',\n        DIALED_CALLBACK: 'DialedCallback',\n        CONSULT: 'Consult'\n    },\n    CALL_SUBTYPE: {\n        PSTN: 'PSTN',\n        WEB_RTC: 'WebRTC'\n    },\n    DIALER_TYPE: {\n        OUTBOUND_PREVIEW: 'OutboundPreview',\n        NONE: 'None'\n    },\n    CONTACT_TYPE: {\n        PHONEBOOK: 'PhoneBook',\n        QUEUE: 'Queue',\n        PHONENUMBER: 'PhoneNumber',\n        AGENT: 'Agent',\n        FLOW: 'Flow'\n    },\n    CONTACT_LIST_TYPE: {\n        TRANSFER: 'Transfer',\n        CONFERENCE: 'Conference',\n        ALL: 'All'\n    },\n    AGENT_CONFIG_TYPE: {\n        SHOW_AGENT_SETTINGS: 'SHOW_AGENT_SETTINGS',\n        PHONES: 'PHONES',\n        SELECTED_PHONE: 'SELECTED_PHONE'\n    },\n    SHARED_CAPABILITIES_TYPE: {\n        DEBUG_ENABLED: 'DEBUG_ENABLED',\n        CONTACT_SEARCH: 'CONTACT_SEARCH',\n        VENDOR_PROVIDED_AVAILABILITY: 'VENDOR_PROVIDED_AVAILABILITY',\n        VENDOR_PROVIDED_QUEUE_WAIT_TIME: 'VENDOR_PROVIDED_QUEUE_WAIT_TIME',\n        TRANSFER_TO_OMNI_FLOW: 'TRANSFER_TO_OMNI_FLOW',\n        PENDING_STATUS_CHANGE: 'PENDING_STATUS_CHANGE',\n        SFDC_PENDING_STATE: 'SFDC_PENDING_STATE',\n        AUTO_ACCEPT_ENABLED:'AUTO_ACCEPT_ENABLED'\n    },\n    VOICE_CAPABILITIES_TYPE: {\n        MUTE: 'MUTE',\n        RECORD: 'RECORD',\n        MERGE: 'MERGE',\n        SWAP: 'SWAP',\n        BLIND_TRANSFER: 'BLIND_TRANSFER',\n        SIGNED_RECORDING_URL: 'SIGNED_RECORDING_URL',\n        SUPERVISOR_LISTEN_IN: 'SUPERVISOR_LISTEN_IN',\n        SUPERVISOR_BARGE_IN: 'SUPERVISOR_BARGE_IN',\n        MOS: 'MOS',\n        PHONEBOOK: 'PHONEBOOK',\n        HAS_GET_EXTERNAL_SPEAKER: 'HAS_GET_EXTERNAL_SPEAKER',\n        HAS_SET_EXTERNAL_SPEAKER: 'HAS_SET_EXTERNAL_SPEAKER',\n        HAS_GET_EXTERNAL_MICROPHONE: 'HAS_GET_EXTERNAL_MICROPHONE',\n        HAS_SET_EXTERNAL_MICROPHONE: 'HAS_SET_EXTERNAL_MICROPHONE',\n        CAN_CONSULT: 'CAN_CONSULT',\n        DIAL_PAD: 'DIAL_PAD',\n        HAS_HID_SUPPORT: 'HAS_HID_SUPPORT',\n        PHONEBOOK_DISABLE: 'PHONEBOOK_DISABLE'\n    },\n    CALL_STATE: {\n        RINGING: 'ringing',\n        CONNECTED: 'connected',\n        TRANSFERRING: 'transferring',\n        TRANSFERRED: 'transferred',\n        ENDED: 'ended'\n    },\n    PHONE_TYPE: {\n        DESK_PHONE: 'DESK_PHONE',\n        SOFT_PHONE: 'SOFT_PHONE'\n    },\n    HANGUP_REASON: {\n        PHONE_CALL_ERROR: \"error\",\n        PHONE_CALL_ENDED: \"ended\"\n    },\n    AGENT_AVAILABILITY: {\n        AVAILABLE: \"AVAILABLE\",\n        BUSY: \"BUSY\",\n        OFFLINE: \"OFFLINE\"\n    },\n    REMOVE_PARTICIPANT_VARIANT: {\n        ALWAYS : 'ALWAYS',\n        NEVER: 'NEVER',\n        ALWAYS_EXCEPT_ON_HOLD: 'ALWAYS_EXCEPT_ON_HOLD'\n    },\n    LOG_LEVEL: {\n        ERROR: \"ERROR\",\n        INFO: \"INFO\"\n    },\n    LOG_SOURCE: {\n        SYSTEM: \"SYSTEM\",\n        PARTNER: \"PARTNER\"\n    },\n    CONTACTS_FILTER_TYPES: {\n        AGENT: \"AGENT\",\n        QUEUE: \"QUEUE\",\n        CONTACT: \"CONTACT\",\n        DIRECTORY: \"DIRECTORY\",\n        FLOW: \"FLOW\",\n        AVAILABLE: \"AVAILABLE\"\n    },\n    WORK_EVENT: {\n        ASSIGNED: 'ASSIGNED',\n        ACCEPTED: 'ACCEPTED',\n        DECLINED: 'DECLINED',\n        COMPLETED: 'COMPLETED',\n        CLOSED: 'CLOSED',\n        PAUSED: 'PAUSED',\n        UNPAUSED: 'UNPAUSED'\n    },\n    DIAL_OPTIONS: {\n        CALLBACK: \"isCallback=true\",\n        CONSULT: \"isConsultCall\"\n    },\n    HANGUP_STATUS: {\n        MISSED_AGENT: \"MissedCallAgent\",\n        DECLINED: \"DeclinedByAgent\",\n        FAILED_CONNECT_AGENT: \"FailedConnectAgent\",\n        FAILED_CONNECT_CUSTOMER: \"FailedConnectCustomer\",\n        CALLBACK_MISSED_OR_REJECTED: 'CallbackMissedOrRejected' // Used only for Amazon; workaround for https://github.com/amazon-connect/amazon-connect-streams/issues/344\n    }\n};\n\n/**\n * Fields in the connector configuration that are logged. \n */\nexport const CONNECTOR_CONFIG_EXPOSED_FIELDS = [\n    \"/internalNameLabel\",\n    \"/reqGeneralInfo/reqAdapterUrl\",\n    \"/reqGeneralInfo/reqVendorInfoApiName\",\n    \"isACWAllowed\",\n    \"isHVSEnabled\",\n    \"orgDomainName\",\n    \"phoneServiceChannelId\",\n    \"telephonySettingsComponentFqn\"\n];\n\n/**\n * Fields that starts with string in the connector configuration that are logged. \n */\nexport const CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH = [\n    \"/reqHvcc\"\n];\n\n/**\n * Fields in the connector configuration that are NOT logged. \n */\nexport const CONNECTOR_CONFIG_EXCEPTION_FIELDS = [\n    \"/reqHvcc/reqTelephonyIntegrationCertificate\"\n];\n","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperties(e, r) {\n  for (var t = 0; t < r.length; t++) {\n    var o = r[t];\n    o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, toPropertyKey(o.key), o);\n  }\n}\nfunction _createClass(e, r, t) {\n  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), e;\n}\nexport { _createClass as default };","function _classCallCheck(a, n) {\n  if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _classCallCheck as default };","function _getPrototypeOf(t) {\n  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {\n    return t.__proto__ || Object.getPrototypeOf(t);\n  }, _getPrototypeOf(t);\n}\nexport { _getPrototypeOf as default };","function _setPrototypeOf(t, e) {\n  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n    return t.__proto__ = e, t;\n  }, _setPrototypeOf(t, e);\n}\nexport { _setPrototypeOf as default };","import setPrototypeOf from \"./setPrototypeOf.js\";\nfunction _inherits(t, e) {\n  if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\");\n  t.prototype = Object.create(e && e.prototype, {\n    constructor: {\n      value: t,\n      writable: !0,\n      configurable: !0\n    }\n  }), Object.defineProperty(t, \"prototype\", {\n    writable: !1\n  }), e && setPrototypeOf(t, e);\n}\nexport { _inherits as default };","function _isNativeReflectConstruct() {\n  try {\n    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n  } catch (t) {}\n  return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {\n    return !!t;\n  })();\n}\nexport { _isNativeReflectConstruct as default };","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeFunction from \"./isNativeFunction.js\";\nimport construct from \"./construct.js\";\nfunction _wrapNativeSuper(t) {\n  var r = \"function\" == typeof Map ? new Map() : void 0;\n  return _wrapNativeSuper = function _wrapNativeSuper(t) {\n    if (null === t || !isNativeFunction(t)) return t;\n    if (\"function\" != typeof t) throw new TypeError(\"Super expression must either be null or a function\");\n    if (void 0 !== r) {\n      if (r.has(t)) return r.get(t);\n      r.set(t, Wrapper);\n    }\n    function Wrapper() {\n      return construct(t, arguments, getPrototypeOf(this).constructor);\n    }\n    return Wrapper.prototype = Object.create(t.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: !1,\n        writable: !0,\n        configurable: !0\n      }\n    }), setPrototypeOf(Wrapper, t);\n  }, _wrapNativeSuper(t);\n}\nexport { _wrapNativeSuper as default };","function _isNativeFunction(t) {\n  try {\n    return -1 !== Function.toString.call(t).indexOf(\"[native code]\");\n  } catch (n) {\n    return \"function\" == typeof t;\n  }\n}\nexport { _isNativeFunction as default };","import isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nfunction _construct(t, e, r) {\n  if (isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);\n  var o = [null];\n  o.push.apply(o, e);\n  var p = new (t.bind.apply(t, o))();\n  return r && setPrototypeOf(p, r.prototype), p;\n}\nexport { _construct as default };","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport { downloadData } from './downloadData.js';\nimport constants from './constants';\n\n//The max size of the logs in # of characaters\nconst MAX_LOGS_SIZE = 1.5e7/2; //15 MB or 7.5M characters\n\nconst _strify = obj => (typeof obj === 'string') ? obj : JSON.stringify(obj);\n\nlet LOGS_SIZE = 0;\nlet logs = [];\n\nfunction _log(logLevel, logMessage, logSource) {\n    if(!logMessage) {\n        throw new Error(\"Log Message required\");\n    }\n    logLevel  = logLevel  || constants.LOG_LEVEL.INFO;\n    logSource = logSource || constants.LOG_SOURCE.PARTNER;\n\n    const logStr = [new Date().toISOString(), _strify(logLevel), _strify(logSource), `${_strify(logMessage)}\\n`].join(\"|\");\n    \n    //If logs size is greater than max size, empty it.\n    if(LOGS_SIZE + logStr.length >= MAX_LOGS_SIZE) {\n        logs = []; \n        LOGS_SIZE = 0;\n    }\n    LOGS_SIZE += logStr.length;\n    logs.push(logStr);\n}\n\n/**\n * Log a message at a custom level.\n * @param {object} logMessage\n * @param {string} logLevel \n * @param {string} [logSource]\n */\nexport function log(logMessage, logLevel, logSource) {\n    _log(logLevel, logMessage, logSource);\n}\n\n/**\n * \n * @returns a deep copy of the logs array\n */\nexport function getLogs() {\n    return JSON.parse(JSON.stringify(logs));\n}\n\n/**\n * Download the logs as a file\n */\nexport function downloadLogs() {\n    downloadData(logs.join(''), `log-${new Date().getTime()}.txt`, 'text/plain');\n}\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * Download data as a file.\n * @param {object} data \n * @param {string} fileName \n * @param {string} fileType\n */\n export function downloadData(data, fileName, fileType) {\n    if(!document || !data) return;\n    \n    const dataStr = (typeof data === 'string') ? data : JSON.stringify(data);\n    const file = new Blob([dataStr], {type: fileType});\n    let a = document.createElement(\"a\") \n    const blobURL = URL.createObjectURL(file);\n    a.download = fileName;\n    a.href = blobURL;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(blobURL);\n}","import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nfunction _possibleConstructorReturn(t, e) {\n  if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e;\n  if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\");\n  return assertThisInitialized(t);\n}\nexport { _possibleConstructorReturn as default };","function _assertThisInitialized(e) {\n  if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return e;\n}\nexport { _assertThisInitialized as default };","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/* eslint-disable no-unused-vars */\nimport constants from './constants.js';\nimport { downloadLogs } from './logger.js';\n\nexport const Constants = {\n    /**\n    * @enum {string}\n    */\n    SHARED_EVENT_TYPE: {\n        LOGIN_RESULT: constants.SHARED_EVENT_TYPE.LOGIN_RESULT,\n        LOGOUT_RESULT: constants.SHARED_EVENT_TYPE.LOGOUT_RESULT,\n        MESSAGE: constants.SHARED_EVENT_TYPE.MESSAGE,\n        SET_AGENT_STATUS: constants.SHARED_EVENT_TYPE.SET_AGENT_STATUS,\n        GET_AGENT_STATUS: constants.SHARED_EVENT_TYPE.GET_AGENT_STATUS,\n        STATE_CHANGE: constants.SHARED_EVENT_TYPE.STATE_CHANGE,\n        STORAGE_ACCESS_RESULT: constants.SHARED_EVENT_TYPE.STORAGE_ACCESS_RESULT,\n        GET_CONTACTS_RESULT: constants.SHARED_EVENT_TYPE.GET_CONTACTS_RESULT,\n        AFTER_CONVERSATION_WORK_STARTED: constants.SHARED_EVENT_TYPE.AFTER_CONVERSATION_WORK_STARTED,\n        AFTER_CONVERSATION_WORK_ENDED: constants.SHARED_EVENT_TYPE.AFTER_CONVERSATION_WORK_ENDED\n    },\n    /**\n    * @enum {string}\n    */\n    VOICE_EVENT_TYPE: {\n        CALL_STARTED: constants.VOICE_EVENT_TYPE.CALL_STARTED,\n        QUEUED_CALL_STARTED: constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED,\n        CALL_CONNECTED: constants.VOICE_EVENT_TYPE.CALL_CONNECTED,\n        HANGUP: constants.VOICE_EVENT_TYPE.HANGUP,\n        MUTE_TOGGLE: constants.VOICE_EVENT_TYPE.MUTE_TOGGLE,\n        HOLD_TOGGLE: constants.VOICE_EVENT_TYPE.HOLD_TOGGLE,\n        RECORDING_TOGGLE: constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE,\n        PARTICIPANTS_SWAPPED: constants.VOICE_EVENT_TYPE.PARTICIPANTS_SWAPPED,\n        PARTICIPANTS_CONFERENCED: constants.VOICE_EVENT_TYPE.PARTICIPANTS_CONFERENCED,\n        PARTICIPANT_ADDED: constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED, \n        PARTICIPANT_CONNECTED: constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED,\n        PARTICIPANT_REMOVED: constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED,\n        AFTER_CALL_WORK_STARTED: constants.VOICE_EVENT_TYPE.AFTER_CALL_WORK_STARTED,\n        WRAP_UP_ENDED: constants.VOICE_EVENT_TYPE.WRAP_UP_ENDED,\n        AGENT_ERROR: constants.VOICE_EVENT_TYPE.AGENT_ERROR,\n        SOFTPHONE_ERROR: constants.VOICE_EVENT_TYPE.SOFTPHONE_ERROR,\n        UPDATE_AUDIO_STATS: constants.VOICE_EVENT_TYPE.UPDATE_AUDIO_STATS,\n        CALL_BARGED_IN: constants.VOICE_EVENT_TYPE.CALL_BARGED_IN,\n        SUPERVISOR_BARGED_IN: constants.VOICE_EVENT_TYPE.SUPERVISOR_BARGED_IN,\n        SUPERVISOR_CALL_STARTED : constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_STARTED,\n        SUPERVISOR_CALL_CONNECTED: constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_CONNECTED,\n        SUPERVISOR_HANGUP : constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP,\n        SHOW_TRANSFER_VIEW: constants.VOICE_EVENT_TYPE.SHOW_TRANSFER_VIEW,\n        AUDIO_STATS: constants.VOICE_EVENT_TYPE.AUDIO_STATS,\n        CALL_UPDATED: constants.VOICE_EVENT_TYPE.CALL_UPDATED\n    },\n    /**\n    * @enum {string}\n    */\n    SHARED_ERROR_TYPE: {\n        GENERIC_ERROR: constants.SHARED_ERROR_TYPE.GENERIC_ERROR,\n        INVALID_AGENT_STATUS: constants.SHARED_ERROR_TYPE.INVALID_AGENT_STATUS\n    },\n    /**\n    * @enum {string}\n    */\n    VOICE_ERROR_TYPE: {\n        INVALID_PARTICIPANT: constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT,\n        INVALID_DESTINATION: constants.VOICE_ERROR_TYPE.INVALID_DESTINATION,\n        CAN_NOT_UPDATE_PHONE_NUMBER: constants.VOICE_ERROR_TYPE.CAN_NOT_UPDATE_PHONE_NUMBER,\n        INVALID_PARAMS: constants.VOICE_ERROR_TYPE.INVALID_PARAMS\n    },\n    /**\n    * @enum {string}\n    */\n    AGENT_STATUS: { ...constants.AGENT_STATUS },\n    /**\n    * @enum {string}\n    */\n    PARTICIPANT_TYPE: { ...constants.PARTICIPANT_TYPE },\n    /**\n    * @enum {string}\n    */\n    CALL_TYPE: { ...constants.CALL_TYPE },\n    /**\n     * @enum {string}\n     */\n    CALL_SUBTYPE: { ...constants.CALL_SUBTYPE },\n    /**\n     * @enum {string}\n     */\n    DIALER_TYPE: { ...constants.DIALER_TYPE },\n    /**\n    * @enum {string}\n    */\n    CONTACT_TYPE: { ...constants.CONTACT_TYPE },\n    /**\n    * @enum {string}\n    */\n    CONTACT_LIST_TYPE: { ...constants.CONTACT_LIST_TYPE },\n    /**\n    * @enum {string}\n    */\n    CALL_STATE: { ...constants.CALL_STATE },\n    /**\n    * @enum {string}\n    */\n    HANGUP_REASON: { ...constants.HANGUP_REASON },\n    /**\n    * @enum {string}\n    */\n    PHONE_TYPE: { ...constants.PHONE_TYPE },\n    /**\n     * @enum {String}\n     */\n    AGENT_AVAILABILITY: { ...constants.AGENT_AVAILABILITY },\n    /**\n     * @enum (String)\n     */\n    REMOVE_PARTICIPANT_VARIANT: { ...constants.REMOVE_PARTICIPANT_VARIANT },\n    /**\n     * @enum {String}\n     */\n    LOG_LEVEL: { ...constants.LOG_LEVEL },\n    /**\n     * @enum {String}\n     */\n    CONTACTS_FILTER_TYPES: { ...constants.CONTACTS_FILTER_TYPES },\n    /**\n     * @enum {String}\n     */\n    WORK_EVENT: { ...constants.WORK_EVENT },\n    /**\n     * @enum {String}\n     */\n    HANGUP_STATUS: { ...constants.HANGUP_STATUS }\n};\n\n/**\n * Class representing a Custom Error\n */\nexport class CustomError extends Error {\n    /**\n     * Custom error\n     * @param {object} param\n     * @param {String} param.labelName\n     * @param {String} param.namespace\n     * @param {String} [param.message]\n     */\n    constructor({ labelName, namespace, message }) {\n        super(message);\n\n        Validator.validateString(labelName);\n        Validator.validateString(namespace);\n        if (message) {\n            Validator.validateString(message);\n        }\n        this.labelName = labelName;\n        this.namespace = namespace;\n        this.message = message;\n    }\n}\n\n/**\n * Class representing a Phone type\n */\n export class Phone {\n    /**\n     * Create Phone\n     * @param {object} param\n     * @param {PHONE_TYPE} param.type\n     * @param {string} [param.number]\n     */\n    constructor({ type, number}) {\n        Validator.validateEnum(type, Object.values(constants.PHONE_TYPE));\n        if(number) {\n            Validator.validateString(number);\n        }\n        this.type = type;\n        this.number = number;\n    }\n}\n\n/**\n * Class representing a Hid Device\n */\nexport class HidDevice {\n    /**\n     * Create Hid Device\n     * @param productId\n     * @param vendorId\n     */\n     constructor({ productId, vendorId }) {\n         if (productId) {\n             Validator.validateNumber(productId);\n         }\n         if (vendorId) {\n             Validator.validateNumber(vendorId);\n         }\n\n         this.productId = productId;\n         this.vendorId = vendorId;\n     }\n}\n\n/**\n * Class representing result type for mute() & unmute()\n */\nexport class MuteToggleResult {\n    /**\n     * Create MuteToggleResult\n     * @param {object} param\n     * @param {boolean} param.isMuted\n     * @param {PhoneCall} param.call\n     * @param {boolean} param.isGlobal\n     */\n    constructor({ isMuted, call, isGlobal }) {\n        this.isMuted = isMuted;\n        this.call = call;\n        this.isGlobal = isGlobal;\n    }\n}\n\n/**\n * Class representing result type for getActiveCalls()\n */\nexport class ActiveCallsResult {\n    /**\n     * Create ActiveCallsResult\n     * @param {object} param\n     * @param {PhoneCall[]} [param.activeCalls]\n     */\n    constructor({ activeCalls = [] }) {\n        if (activeCalls.length > 0) {\n            activeCalls.forEach(activeCall => {\n                Validator.validateClassObject(activeCall, PhoneCall);\n            });\n        }\n        this.activeCalls = activeCalls;\n    }\n}\n\n/**\n * Class representing result type for getAudioDevices()\n */\nexport class AudioDevicesResult {\n    /**\n     * Create AudioDevicesResult\n     * @param {object} param\n     * @param {AudioDevice[]} param.audioDevices\n     */\n    constructor({ audioDevices = [] }) {\n        this.audioDevices = audioDevices;\n    }\n}\n\n/**\n * Class representing result type for getSharedCapabilities()\n */\nexport class SharedCapabilitiesResult {\n    /**\n     * Create SharedCapabilitiesResult\n     * @param {object} param\n     * @param {boolean} [param.debugEnabled]\n     * @param {boolean} [param.hasContactSearch] True if getPhoneContacts uses the 'contain' filter\n     * @param {boolean} [param.hasAgentAvailability] True if getPhoneContacts also provides agent availability, false if Salesforce provides it.\n     * @param {boolean} [param.hasQueueWaitTime] True if getPhoneContacts also provides estimated queue wait time, false if Salesforce provides it.\n     * @param {boolean} [param.hasTransferToOmniFlow] True if vendor supports transfer to omni flows\n     * @param {boolean} [param.hasPendingStatusChange] True if vendor supports Pending Status Change\n     * @param {boolean} [param.hasSFDCPendingState] True if amazon connect has sfdc_pending state\n     * @param {boolean} [param.hasAutoAcceptEnabled] True if agent has enabled auto accept\n     */\n    constructor({\n        debugEnabled = true,\n        hasContactSearch = false,\n        hasAgentAvailability = false,\n        hasQueueWaitTime = false,\n        hasTransferToOmniFlow = false,\n        hasPendingStatusChange = false,\n        hasSFDCPendingState = false,\n        hasAutoAcceptEnabled = false\n    }){\n        Validator.validateBoolean(debugEnabled);\n        Validator.validateBoolean(hasContactSearch);\n        Validator.validateBoolean(hasAgentAvailability);\n        Validator.validateBoolean(hasQueueWaitTime);\n        Validator.validateBoolean(hasTransferToOmniFlow);\n        Validator.validateBoolean(hasPendingStatusChange);\n        Validator.validateBoolean(hasSFDCPendingState);\n        Validator.validateBoolean(hasAutoAcceptEnabled);\n\n        this.debugEnabled = debugEnabled;\n        this.hasContactSearch = hasContactSearch;\n        this.hasAgentAvailability = hasAgentAvailability;\n        this.hasQueueWaitTime = hasQueueWaitTime;\n        this.hasTransferToOmniFlow = hasTransferToOmniFlow;\n        this.hasPendingStatusChange = hasPendingStatusChange;\n        this.hasSFDCPendingState = hasSFDCPendingState;\n        this.hasAutoAcceptEnabled = hasAutoAcceptEnabled;\n    }\n}\n\n/**\n * Class representing result type for getVoiceCapabilities()\n */\nexport class VoiceCapabilitiesResult {\n    /**\n     * Create VoiceCapabilitiesResult\n     * @param {object} param\n     * @param {boolean} [param.hasMute]\n     * @param {boolean} [param.hasRecord]\n     * @param {boolean} [param.hasMerge]\n     * @param {boolean} [param.hasSwap]\n     * @param {boolean} [param.hasBlindTransfer] True if vendor supports blind transfers\n     * @param {boolean} [param.hasSignedRecordingUrl]\n     * @param {boolean} [param.supportsMos] True if vendor support MOS\n     * @param {boolean} [param.hasSupervisorListenIn] True if vendor supports supervisor listening  to a ongoing call\n     * @param {boolean} [param.hasSupervisorBargeIn] True if vendor supports Supervisor  barging into a ongoing call\n     * @param {boolean} [param.hasPhoneBook] True if vendor supports the phoneBook UI\n     * @param {boolean} [param.hasGetExternalSpeakerDeviceSetting] True if vendor supports retrieving the speaker device ID\n     * @param {boolean} [param.hasSetExternalSpeakerDeviceSetting] True if vendor supports setting the speaker device ID\n     * @param {boolean} [param.hasGetExternalMicrophoneDeviceSetting] True if vendor supports retrieving the microphone device ID\n     * @param {boolean} [param.hasSetExternalMicrophoneDeviceSetting] True if vendor supports setting the microphone device ID\n     * @param {boolean} [param.canConsult] True if can consult\n     * @param {boolean} [param.isDialPadDisabled] True if dial pad is disabled\n     * @param {boolean} [param.isHidSupported] True if vendor supports hid or headset controllers\n     * @param {boolean} [param.isPhoneBookDisabled] True if phone book is disabled\n     */\n    constructor({\n        hasMute = true,\n        hasRecord = true,\n        hasMerge = true,\n        hasSwap = true,\n        hasBlindTransfer = false,\n        hasSignedRecordingUrl = false,\n        supportsMos = false,\n        hasSupervisorListenIn = false,\n        hasSupervisorBargeIn = false,\n        hasPhoneBook = false,\n        hasGetExternalSpeakerDeviceSetting = false,\n        hasSetExternalSpeakerDeviceSetting = false,\n        hasGetExternalMicrophoneDeviceSetting = false,\n        hasSetExternalMicrophoneDeviceSetting = false,\n        canConsult= false,\n        isDialPadDisabled = false,\n        isHidSupported = false,\n        isPhoneBookDisabled = false\n    }) {\n        Validator.validateBoolean(hasMute);\n        Validator.validateBoolean(hasRecord);\n        Validator.validateBoolean(hasMerge);\n        Validator.validateBoolean(hasSwap);\n        Validator.validateBoolean(hasBlindTransfer);\n        Validator.validateBoolean(hasSignedRecordingUrl);\n        Validator.validateBoolean(supportsMos);\n        Validator.validateBoolean(hasSupervisorListenIn);\n        Validator.validateBoolean(hasSupervisorBargeIn);\n        Validator.validateBoolean(hasPhoneBook);\n        Validator.validateBoolean(hasGetExternalSpeakerDeviceSetting);\n        Validator.validateBoolean(hasSetExternalSpeakerDeviceSetting);\n        Validator.validateBoolean(hasGetExternalMicrophoneDeviceSetting);\n        Validator.validateBoolean(hasSetExternalMicrophoneDeviceSetting);\n        Validator.validateBoolean(canConsult);\n        Validator.validateBoolean(isDialPadDisabled);\n        Validator.validateBoolean(isHidSupported);\n        Validator.validateBoolean(isPhoneBookDisabled);\n\n        this.hasMute = hasMute;\n        this.hasRecord = hasRecord;\n        this.hasMerge = hasMerge;\n        this.hasSwap = hasSwap;\n        this.hasBlindTransfer = hasBlindTransfer;\n        this.hasSignedRecordingUrl = hasSignedRecordingUrl;\n        this.supportsMos = supportsMos;\n        this.hasSupervisorListenIn = hasSupervisorListenIn;\n        this.hasSupervisorBargeIn = hasSupervisorBargeIn;\n        this.hasPhoneBook = hasPhoneBook;\n        this.hasGetExternalSpeakerDeviceSetting = hasGetExternalSpeakerDeviceSetting;\n        this.hasSetExternalSpeakerDeviceSetting = hasSetExternalSpeakerDeviceSetting;\n        this.hasGetExternalMicrophoneDeviceSetting = hasGetExternalMicrophoneDeviceSetting;\n        this.hasSetExternalMicrophoneDeviceSetting = hasSetExternalMicrophoneDeviceSetting;\n        this.canConsult = canConsult;\n        this.isDialPadDisabled = isDialPadDisabled;\n        this.isHidSupported = isHidSupported;\n        this.isPhoneBookDisabled = isPhoneBookDisabled;\n    }\n}\n\n/**\n * Class representing result type for getAgentConfig()\n */\nexport class AgentConfigResult {\n    /**\n     * Create AgentConfigResult\n     * @param {object} param\n     * @param {Phone[]} param.phones\n     * @param {Phone} param.selectedPhone\n     * @param {string} param.speakerDeviceId\n     * @param {string} param.microphoneDeviceId\n     */\n    constructor({ phones = [constants.PHONE_TYPE.SOFT_PHONE], selectedPhone = new Phone({type: constants.PHONE_TYPE.SOFT_PHONE}),\n                    speakerDeviceId = '', microphoneDeviceId = ''}) {\n        Validator.validateClassObject(phones, Array);\n        Validator.validateClassObject(selectedPhone, Phone);\n        Validator.validateString(speakerDeviceId);\n        Validator.validateString(microphoneDeviceId);\n\n        this.phones = phones;\n        this.selectedPhone = selectedPhone;\n        this.speakerDeviceId = speakerDeviceId;\n        this.microphoneDeviceId = microphoneDeviceId;\n    }\n}\n\n/**\n * Class representing AgentConfig type for setAgentConfig()\n */\nexport class AgentConfig {\n    /**\n     * Create AgentConfig\n     * @param {object} param\n     * @param {Phone} param.selectedPhone\n     * @param {string} param.speakerDeviceId\n     * @param {string} param.microphoneDeviceId\n     * @param {HidDevice} param.hidDeviceInfo\n     */\n    constructor({ selectedPhone,speakerDeviceId, microphoneDeviceId, hidDeviceInfo }) {\n        Validator.validateClassObject(selectedPhone, Phone);\n        //Hid device info is optional\n        if (hidDeviceInfo !== undefined) {\n            Validator.validateClassObject(hidDeviceInfo, HidDevice);\n        }\n        this.selectedPhone = selectedPhone;\n        this.speakerDeviceId = speakerDeviceId;\n        this.microphoneDeviceId = microphoneDeviceId;\n        this.hidDeviceInfo = hidDeviceInfo;\n    }\n}\n\n/**\n * Class representing result type for pauseRecording() & resumeRecording\n */\nexport class RecordingToggleResult {\n    /**\n     * Create RecordingToggleResult\n     * @param {object} param\n     * @param {boolean} param.isRecordingPaused\n     * @param {string} [param.contactId]\n     * @param {string} [param.initialContactId]\n     * @param {string} [param.instanceId]\n     * @param {string} [param.region]\n     */\n    constructor({ isRecordingPaused, contactId = null, initialContactId = null, instanceId = null, region = null }) {\n        this.isRecordingPaused = isRecordingPaused;\n        this.contactId = contactId;\n        this.initialContactId = initialContactId;\n        this.instanceId = instanceId;\n        this.region = region;\n    }\n}\n\n/**\n * Class representing result type for addParticipant()\n */\nexport class ParticipantResult {\n    /**\n     * Create ParticipantResult\n     * @param {object} param\n     * @param {boolean} param.initialCallHasEnded\n     * @param {CallInfo} param.callInfo\n     * @param {PhoneCallAttributes} [param.callAttributes] - Any additional call attributes\n     * @param {string} param.phoneNumber\n     * @param {string} param.callId\n     * @param {Contact} param.contact\n     * @param {string} param.connectionId - optional connectionID representing a call leg.\n     */\n    constructor({ initialCallHasEnded, callInfo, callAttributes, phoneNumber, callId, contact = null , connectionId}) {\n        Validator.validateClassObject(callInfo, CallInfo);\n        this.initialCallHasEnded = initialCallHasEnded;\n        this.callInfo = callInfo;\n        this.callAttributes = callAttributes;\n        this.phoneNumber = phoneNumber;\n        this.callId = callId;\n        this.contact = contact\n        if (connectionId) {\n            this.connectionId = connectionId;\n        } else {\n            this.connectionId = callId;\n        }\n    }\n}\n\n/**\n * Class representing result type for getContacts()\n */\nexport class ContactsResult {\n     /**\n     * Create ContactsResult\n     * @param {object} param\n     * @param {Contact[]} [param.contacts]\n     * @param {Array} [param.contactTypes]\n     */\n    constructor({ contacts = [], contactTypes = [] }) {\n        if (contacts.length > 0) {\n            contacts.forEach(contact => {\n                Validator.validateClassObject(contact, Contact);\n            });\n        }\n        if (contactTypes.length > 0) {\n            contactTypes.forEach(filterType => {\n                Validator.validateEnum(filterType, Object.values(constants.CONTACT_TYPE));\n            });\n        }\n        this.contacts = contacts;\n        this.contactTypes = contactTypes;\n    }\n}\n\n/**\n * Class representing result type for getPhoneContacts()\n * NOTE: TO BE DEPRECATED, Use ContactsResult instead\n */\nexport class PhoneContactsResult extends ContactsResult {\n    /**\n     * Create PhoneContactsResult\n     * @param {object} param\n     * @param {Contact[]} [param.contacts]\n     * @param {Array} [param.contactTypes]\n     */\n    constructor({ contacts = [], contactTypes = [] }) {\n        super({ contacts, contactTypes });\n    }\n}\n\n\n\n/**\n * Class representing result type for accept(), decline(), dial()\n */\nexport class CallResult {\n    /**\n     * Create CallResult\n     * @param {object} param\n     * @param {PhoneCall} [param.call]\n     */\n    constructor({ call }) {\n        if (call !== undefined) {\n            Validator.validateClassObject(call, PhoneCall);\n        }\n        this.call = call;\n    }\n}\n\n/**\n * Class representing result type for endCall(), hangup()\n */\nexport class HangupResult {\n    /**\n     * Create CallResult\n     * @param {object} param\n     * @param {PhoneCall[]|PhoneCall} param.calls - one or more calls (can be multiple calls in case of agent endcall/hangup)\n     */\n    constructor({ calls }) {\n        if (calls instanceof Array) {\n            calls.forEach(call => Validator.validateClassObject(call, PhoneCall));\n            this.calls = calls;\n        } else {\n            Validator.validateClassObject(calls, PhoneCall);\n            this.calls = [calls];\n        }\n    }\n}\n\n/**\n * Class representing result type for hold() & resume()\n */\nexport class HoldToggleResult {\n    /**\n     * Create HoldToggleResult\n     * @param {object} param\n     * @param {boolean} param.isThirdPartyOnHold\n     * @param {boolean} param.isCustomerOnHold\n     * @param {PhoneCall[]} [param.calls]\n     * @param {boolean} param.isCallMerged\n     */\n    constructor({ isThirdPartyOnHold, isCustomerOnHold, calls , isCallMerged}) {\n        if (calls) {\n            Object.values(calls).forEach(call => {\n                Validator.validateClassObject(call, PhoneCall);\n            });\n            this.calls = calls;\n        }\n        this.isThirdPartyOnHold = isThirdPartyOnHold;\n        this.isCustomerOnHold = isCustomerOnHold;\n        this.isCallMerged = isCallMerged;\n    }\n}\n\n/**\n * Class representing result type for getRecordingUrl\n */\n export class SignedRecordingUrlResult {\n    /**\n     * Create SignedRecordingUrlResult\n     * @param {object} param\n     * @param {boolean} param.success\n     * @param {string} [param.url]\n     * @param {number} [param.duration] in seconds\n     * @param {string} [param.callId] Salesforce callId of the voice call\n     */\n    constructor({ success, url, duration, callId }) {\n        if (success) {\n            // For a successfull result, url is required\n            Validator.validateString(url);\n            Validator.validateString(callId);\n            if (duration) {\n                Validator.validateNumber(duration);\n            }\n        }\n        this.success = success;\n        this.url = url;\n        this.duration = duration;\n        this.callId = callId;\n    }\n}\n\n/**\n * Class representing result type for init()\n */\nexport class InitResult {\n    /**\n     * Create InitResult\n     * @param {object} param\n     * @param {boolean} [param.showLogin]\n     * @param {number} [param.loginFrameHeight]\n     * @param {boolean} [param.isSilentLogin]\n     * @param {boolean} [param.showStorageAccess]\n     */\n    constructor({ showLogin = false, loginFrameHeight = 350, isSilentLogin = false, showStorageAccess = false }) {\n        this.showLogin = showLogin;\n        this.loginFrameHeight = loginFrameHeight;\n        this.isSilentLogin = this.showLogin ? false : isSilentLogin;\n        this.showStorageAccess = showStorageAccess;\n    }\n}\n\n/**\n * Class representing dial options for outbound dialing \n */\nexport class DialOptions {\n    /**\n     * Create DialOptions\n     * @param {boolean} [param.isCallback]\n     * @param {boolean} [param.isConsultCall]\n     */\n    constructor({ isCallback = false, isConsultCall = false }) {\n        this.isCallback = isCallback;\n        this.isConsultCall = isConsultCall;\n    }\n}\n\n/**\n * Class representing generic result type\n */\nexport class GenericResult {\n    /**\n     * Create GenericResult\n     * @param {object} param\n     * @param {boolean} param.success\n     */\n    constructor({ success }) {\n        this.success = success;\n    }\n}\n\n/**\n * Class representing result type for setAgentStatus()\n */\nexport class SetAgentStateResult extends GenericResult {\n    /**\n     * Create AgentState\n     * @param {object} param\n     */\n    constructor({ success, isStatusSyncNeeded = true }) {\n        super({ success });\n        this.isStatusSyncNeeded = isStatusSyncNeeded;\n    }\n}\n\n/**\n * Class representing result type for setAgentConfig()\n */\nexport class SetAgentConfigResult extends GenericResult {\n    /**\n     * Create AgentConfig\n     * @param {object} param\n     */\n    constructor({ success, isSystemEvent = false }) {\n        super({ success });\n        this.isSystemEvent = isSystemEvent;\n    }\n    \n    setIsSystemEvent(isSystemEvent) {\n        this.isSystemEvent = isSystemEvent;\n    }\n}\n\n/**\n * Class representing logout result type\n */\n export class LogoutResult {\n    /**\n     * Create LogoutResult\n     * @param {object} param\n     * @param {boolean} param.success\n     * @param {number} [param.loginFrameHeight]\n     */\n    constructor({ success, loginFrameHeight = 350 }) {\n        this.success = success;\n        this.loginFrameHeight = loginFrameHeight;\n    }\n}\n\n/**\n * Class representing callInfo class (call metadata)\n */\nexport class CallInfo {\n    /**\n     * Create CallInfo\n     * @param {object} param\n     * @param {boolean} param.isOnHold\n     * @param {boolean} param.isRecordingPaused\n     * @param {boolean} param.isMuted\n     * @param {string} [param.initialCallId]\n     * @param {Date} [param.callStateTimestamp]\n     * @param {string} [param.queueName]\n     * @param {string} [param.queueId]\n     * @param {Date} [param.queueTimestamp]\n     * @param {boolean} [param.isSoftphoneCall] - is it a softphone call \n     * @param {boolean} [param.acceptEnabled]\n     * @param {boolean} [param.declineEnabled]\n     * @param {boolean} [param.muteEnabled]\n     * @param {boolean} [param.swapEnabled]\n     * @param {boolean} [param.conferenceEnabled]\n     * @param {boolean} [param.holdEnabled]\n     * @param {boolean} [param.recordEnabled]\n     * @param {boolean} [param.addCallerEnabled]\n     * @param {boolean} [param.extensionEnabled]\n     * @param {boolean} [param.isReplayable]\n     * @param {boolean} [param.isBargeable]\n     * @param {boolean} [param.isExternalTransfer]\n     * @param {boolean} [param.showMuteButton]\n     * @param {boolean} [param.showRecordButton]\n     * @param {boolean} [param.showAddCallerButton]\n     * @param {boolean} [param.showAddBlindTransferButton]\n     * @param {boolean} [param.showMergeButton]\n     * @param {boolean} [param.showSwapButton]\n     * @param {(\"ALWAYS\"|\"NEVER\"|\"ALWAYS_EXCEPT_ON_HOLD\")} [param.removeParticipantVariant] - The type of remove participant variant when in a transfer call.\n     * @param {String} [param.additionalFields] - Represents additional standard and custom fields in the voice call record, where each key-value pair value corresponds to a standard or custom field and its values.\n     * @param {boolean} [param.isMultiParty]\n     * @param {boolean} [param.isHIDCall]\n     * @param {boolean} [param.endCallDisabled]\n     * @param {string} [param.renderContactId]\n     */\n    constructor({ callStateTimestamp = null, isOnHold, isMuted = false, isRecordingPaused = false, initialCallId, queueId = null, queueName = null, queueTimestamp = null, isSoftphoneCall = true, \n        acceptEnabled = true, declineEnabled = true, muteEnabled = true, swapEnabled = true, conferenceEnabled = true, holdEnabled = true,\n        recordEnabled = true, addCallerEnabled = true, extensionEnabled = true, isReplayable = true, isBargeable = false, isExternalTransfer, \n        showMuteButton = true, showRecordButton = true, showAddCallerButton = true, showAddBlindTransferButton = true, showMergeButton = true,\n\n        showSwapButton = true, removeParticipantVariant = Constants.REMOVE_PARTICIPANT_VARIANT.ALWAYS, additionalFields = null, isMultiParty = false, isHIDCall = false, endCallDisabled = false, renderContactId = null }) {\n\n        if (callStateTimestamp) {\n            Validator.validateDate(callStateTimestamp);\n        }\n        if (queueTimestamp) {\n            Validator.validateDate(queueTimestamp);\n        }\n        if (queueId) {\n            Validator.validateString(queueId);\n        }\n        if (queueName) {\n            Validator.validateString(queueName);\n        }\n        Validator.validateBoolean(isRecordingPaused);\n        Validator.validateBoolean(isMuted);\n        Validator.validateBoolean(isSoftphoneCall);\n        Validator.validateBoolean(acceptEnabled);\n        Validator.validateBoolean(declineEnabled);\n        Validator.validateBoolean(muteEnabled);\n        Validator.validateBoolean(swapEnabled);\n        Validator.validateBoolean(conferenceEnabled);\n        Validator.validateBoolean(holdEnabled);\n        Validator.validateBoolean(recordEnabled);\n        Validator.validateBoolean(addCallerEnabled);\n        Validator.validateBoolean(extensionEnabled);\n        Validator.validateBoolean(isBargeable);\n        Validator.validateBoolean(showMuteButton);\n        Validator.validateBoolean(showRecordButton);\n        Validator.validateBoolean(showAddCallerButton);\n        Validator.validateBoolean(showAddBlindTransferButton);\n        Validator.validateBoolean(showMergeButton);\n        Validator.validateBoolean(showSwapButton);\n        Validator.validateBoolean(isHIDCall);\n        Validator.validateBoolean(endCallDisabled);\n        if (isExternalTransfer !== undefined) {\n            Validator.validateBoolean(isExternalTransfer);\n        }\n        Validator.validateEnum(removeParticipantVariant, Object.values(constants.REMOVE_PARTICIPANT_VARIANT));\n        if (additionalFields) {\n            Validator.validateString(additionalFields);\n        }\n        Validator.validateBoolean(isMultiParty);\n        if (renderContactId) {\n            Validator.validateString(renderContactId);\n        }\n        this.callStateTimestamp = callStateTimestamp;\n        this.isRecordingPaused = isRecordingPaused;\n        this.isMuted = isMuted;\n        this.isOnHold = isOnHold;\n        this.initialCallId = initialCallId;\n        this.queueName = queueName;\n        this.queueId = queueId;\n        this.queueTimestamp = queueTimestamp;\n        this.isSoftphoneCall = isSoftphoneCall;\n        this.acceptEnabled = acceptEnabled;\n        this.declineEnabled = declineEnabled;\n        this.muteEnabled = muteEnabled;\n        this.swapEnabled = swapEnabled;\n        this.conferenceEnabled = conferenceEnabled;\n        this.holdEnabled = holdEnabled;\n        this.recordEnabled = recordEnabled;\n        this.addCallerEnabled = addCallerEnabled;\n        this.extensionEnabled = extensionEnabled;\n        this.isReplayable = isReplayable;\n        this.isBargeable = isBargeable;\n        this.isExternalTransfer = isExternalTransfer;\n        this.removeParticipantVariant = removeParticipantVariant;\n        this.showMuteButton = showMuteButton;\n        this.showRecordButton = showRecordButton;\n        this.showAddCallerButton = showAddCallerButton;\n        this.showAddBlindTransferButton = showAddBlindTransferButton;\n        this.showMergeButton = showMergeButton;\n        this.showSwapButton = showSwapButton;\n        this.additionalFields = additionalFields;\n        this.isMultiParty = isMultiParty;\n        this.isHIDCall = isHIDCall;\n        this.endCallDisabled = endCallDisabled;\n        this.renderContactId = renderContactId;\n    }\n}\n\n/** \n * Class representing a Contact. This object is used to represent \n * phone system contact or any call target\n */\n\nexport class Contact {\n    /**\n     * Create a Contact.\n     * @param {object} param\n     * @param {string} [param.id] - The unique contactId\n     * @param {(\"PhoneBook\"|\"Queue\"|\"PhoneNumber\"|\"Agent\")} [param.type] - The type of the contact, one of the CONTACT_TYPE values\n     * @param {string} [param.name] - The label for this contact to be displayed in the UI\n     * @param {(\"Transfer\"|\"Conference\"|\"All\")} [param.listType] - The type of contact List, one of the CONTACT_LIST_TYPE values. Messaging Only\n     * @param {string} [param.phoneNumber] - The phone number associcated with this contact\n     * @param {string} [param.prefix] - Any prefix to be dialed before dialing the number (i.e. +1)\n     * @param {string} [param.extension] - Any extension to be dialed after dialing the number\n     * @param {string} [param.endpointARN]\n     * @param {string} [param.queue]\n     * @param {string} [param.availability]\n     * @param {string} [param.recordId] - Salesforce RecordId\n     * @param {string} [param.description] - Contact Description\n     * @param {string} [param.queueWaitTime] - Estimated Queue Wait Time\n     */\n    constructor({phoneNumber, id, type, name, listType, prefix, extension, endpointARN, queue, availability, recordId, description, queueWaitTime}) {\n        if (phoneNumber) {\n            Validator.validateString(phoneNumber);\n        }\n        if (type) {\n            Validator.validateEnum(type, Object.values(constants.CONTACT_TYPE));\n        }\n        if (id) {\n            Validator.validateString(id);\n        }\n        if (name) {\n            Validator.validateString(name);\n        }\n        if (listType) {\n            Validator.validateEnum(listType, Object.values(Constants.CONTACT_LIST_TYPE));\n        }\n        if (prefix) {\n            Validator.validateString(prefix);\n        }\n        if (extension) {\n            Validator.validateString(extension);\n        }\n        if (availability) {\n            Validator.validateEnum(availability, Object.values(constants.AGENT_AVAILABILITY));\n        }\n        if (recordId) {\n            Validator.validateString(recordId);\n        }\n        if (description) {\n            Validator.validateString(description);\n        }\n        if (queueWaitTime) {\n            Validator.validateString(queueWaitTime);\n        }\n\n        this.phoneNumber = phoneNumber;\n        this.id = id;\n        this.type = type;\n        this.name = name;\n        this.listType = listType;\n        this.prefix = prefix;\n        this.extension = extension;\n        this.endpointARN = endpointARN;\n        this.queue = queue;\n        if (constants.CONTACT_TYPE.AGENT === this.type) {\n            this.availability = availability;\n        } else {\n            this.availability = null;\n        }\n        this.queueWaitTime = queueWaitTime;\n        this.recordId = recordId;\n        this.description = description;\n    }\n}\n\n/** \n* Class representing PhoneCallAttributes\n*/\n\nexport class PhoneCallAttributes {\n    /**\n     * Create PhoneCallAttributes.\n     * @param {object} param\n     * @param {string} [param.voiceCallId] - The voice call id\n     * @param {PARTICIPANT_TYPE} [param.participantType] - The participant type of the call\n     * @param {DIALER_TYPE} [param.dialerType] - The dialer type of the call\n     * @param {string} [param.parentId] - The parent call id of the call\n     * @param {boolean} [param.isOnHold]\n     * @param {boolean} [param.hasSupervisorBargedIn]\n     * @param {boolean} [param.isAutoMergeOn] - for multiparty conference, the call cannot be put on hold, and is being auto-merged\n     * @param {boolean} [param.isConsultCall] - true if the call is a Consult call\n     */\n    constructor({ voiceCallId, participantType, dialerType = Constants.DIALER_TYPE.NONE, parentId, isOnHold, hasSupervisorBargedIn = false, isAutoMergeOn = false, isConsultCall = false }) {\n        if (voiceCallId) {\n            Validator.validateString(voiceCallId);\n        }\n        if (participantType) {\n            Validator.validateEnum(participantType, Object.values(constants.PARTICIPANT_TYPE));\n        }\n        if (parentId) {\n            Validator.validateString(parentId);\n        }\n        if (isOnHold !== undefined) {\n            Validator.validateBoolean(isOnHold);\n        }\n\n        Validator.validateBoolean(hasSupervisorBargedIn);\n        Validator.validateEnum(dialerType, Object.values(constants.DIALER_TYPE));\n        Validator.validateBoolean(isAutoMergeOn);\n        Validator.validateBoolean(isConsultCall);\n        \n        this.voiceCallId = voiceCallId;\n        this.participantType = participantType;\n        this.parentId = parentId;\n        this.isOnHold = isOnHold;\n        this.dialerType = dialerType;\n        this.hasSupervisorBargedIn = hasSupervisorBargedIn;\n        this.isAutoMergeOn = isAutoMergeOn;\n        this.isConsultCall = isConsultCall;\n    }\n}\n\n/** \n* Class representing a PhoneCall (PSTN or WebRTC).\n*/\n\nexport class PhoneCall {\n    /**\n     * Create a PhoneCall.\n     * @param {object} param\n     * @param {string} [param.callId] - The unique callId. This is a required parameter\n     * @param {string} [param.connectionId] - optional connectionID representing a call leg.\n     * @param {CALL_TYPE} [param.callType] - The type of the call, one of the CALL_TYPE values\n     * @param {CALL_SUBTYPE} [param.callSubtype] - The subtype of the call, one of the CALL_SUBTYPE values\n     * @param {Contact} [param.contact] - The Call Target / Contact . TODO: to be deprecated, replace with toContact\n     * @param {string} [param.state] - The state of the call, i.e. ringing, connected, declined, failed \n     * @param {PhoneCallAttributes} [param.callAttributes] - Any additional call attributes\n     * @param {string} [param.phoneNumber] - The phone number associated with this call (usually external number)\n     * @param {CallInfo} [param.callInfo]\n     * @param {string} [param.reason]\n     * @param {boolean} [param.closeCallOnError]\n     * @param {string} [param.agentStatus]\n     * @param {string} [param.agentARN]\n     * @param {Contact} [param.fromContact] - This is optional, and being populated when dialing/consulting a contact or adding a participant\n     * @param {Contact} [param.toContact] - This is currently the same as param.contact (just rename)\n     */\n    constructor({callId, callType, callSubtype, contact, state, callAttributes, phoneNumber, callInfo, reason, closeCallOnError, agentStatus, agentARN, fromContact, toContact, connectionId }) {\n        // TODO: Revisit the required fields\n        if (callId) {\n            Validator.validateString(callId);\n            this.callId = callId;\n        }\n        // Salesforce uses connectionId to represent a call leg as provided or assumed to be same as callId\n        // if provided, connectionId can be used in the connector API instead of the callId\n        // if not provided, it will be a copy of the callId\n        if (connectionId) {\n            Validator.validateString(connectionId);\n            this.connectionId = connectionId;\n        } else if (callId) {\n            this.connectionId = callId;\n        }\n        if (callType) {\n            Validator.validateEnum(callType, Object.values(constants.CALL_TYPE));\n            this.callType = callType;\n        }\n        if (callSubtype) {\n            Validator.validateEnum(callSubtype, Object.values(constants.CALL_SUBTYPE));\n            this.callSubtype = callSubtype;\n        }\n        if (phoneNumber) {\n            Validator.validateString(phoneNumber);\n            this.phoneNumber = phoneNumber;\n        }\n        if (callInfo) {\n            Validator.validateClassObject(callInfo, CallInfo);\n            this.callInfo = callInfo;\n        }\n        if (contact) {\n            Validator.validateClassObject(contact, Contact);\n            this.contact = contact;\n        }\n        if (fromContact) {\n            Validator.validateClassObject(fromContact, Contact);\n            this.fromContact = fromContact;\n        }\n        if (toContact) {\n            Validator.validateClassObject(toContact, Contact);\n            this.toContact = toContact;\n        } else if (contact) {\n            this.toContact = contact;\n        }\n        if (reason) {\n            this.reason = reason;\n        }\n        if (closeCallOnError) {\n            this.closeCallOnError = closeCallOnError;\n        }\n        if (agentStatus) {\n            this.agentStatus = agentStatus;\n        }\n        if (agentARN) {\n            this.agentARN = agentARN;\n        }\n        this.state = state;\n        this.callAttributes = callAttributes;\n    }\n}\n\n/** \n* Class representing a TelephonyConnector\n*/\nexport class TelephonyConnector {\n    /**\n     * Get the currently active calls\n     * @returns {Promise<ActiveCallsResult>} \n     * \n     */\n    getActiveCalls() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Accept call\n     * @param {PhoneCall} call - The call to be accepted\n     * @returns {Promise<CallResult>} \n     * \n     */\n    acceptCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Decline call\n     * @param {PhoneCall} call - The call to be declined\n     * @returns {Promise<CallResult>} \n     * \n     */\n    declineCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * End call\n     * @param {PhoneCall} call - The call to be ended\n     * @param {AGENT_STATUS} agentStatus\n     * @returns {Promise<HangupResult>} \n     * \n     */\n    endCall(call, agentStatus) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Mute call\n     * @param {PhoneCall} call (an optional participant call to mute)\n     * @returns {Promise<MuteToggleResult>} \n     * \n     */\n    mute(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Unmute call\n     * @param {PhoneCall} call (an optional participant call to unmute)\n     * @returns {Promise<MuteToggleResult>} \n     * \n     */\n    unmute(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Hold call\n     * @param {PhoneCall} call - The call to be held\n     * @returns {Promise<HoldToggleResult>} \n     * \n     */\n    hold(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Resume call\n     * @param {PhoneCall} call - The call to be resumed\n     * @returns {Promise<HoldToggleResult>} \n     * \n     */\n    resume(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Dial out Number\n     * @param {Contact} contact\n     * @param {DialOptions} dialOptions\n     * @returns {Promise<CallResult>} \n     * \n     */\n    dial(contact, dialOptions) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Send digits\n     * @param {string} digits\n     */\n    sendDigits(digits) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get phone contacts\n     * @param {ContactsFilter} filterType\n     * @returns {Promise<PhoneContactsResult>} \n     */\n    getPhoneContacts(filter) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Swap calls\n     * @param {PhoneCall} call1\n     * @param {PhoneCall} call2\n     * @returns {Promise<HoldToggleResult>} \n     */\n    swap(call1, call2) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Conference calls\n     * @param {PhoneCall[]} calls\n     * @returns {Promise<HoldToggleResult>} \n     */\n    conference(calls) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Add participant to call\n     * @param {Contact} contact: The transfer target\n     * @param {PhoneCall} parentCall: The call to which a participant will be added\n     * @param {Boolean} isBlindTransfer: True if blind transfering a call and hanging up upon transfer\n     * @returns {Promise<ParticipantResult>} \n     */\n    addParticipant(contact, parentCall, isBlindTransfer) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Pause recording\n     * @returns {Promise<RecordingToggleResult>} \n     */\n    pauseRecording() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Resume recording\n     * @returns {Promise<RecordingToggleResult>} \n     */\n    resumeRecording() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get agentConfig\n     * @returns {Promise<AgentConfigResult>}\n     */\n    getAgentConfig() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Set Agent Config\n     * @param {AgentConfig} config\n     * @returns {Promise<GenericResult>}\n     */\n    setAgentConfig(config) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get voice capabilities\n     * @returns {Promise<VoiceCapabilitiesResult>}\n     */\n    getVoiceCapabilities() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Wrap up call\n     * @param {PhoneCall} call\n     */\n    wrapUpCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n    * Get the signed recording url\n    * @param {String} recordingUrl\n    * @param {String} vendorCallKey\n    * @param {String} callId\n    * @returns {Promise<SignedRecordingUrlResult>} \n    */\n    getSignedRecordingUrl(recordingUrl, vendorCallKey, callId) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Supervise a call\n     * @param {SupervisedCallInfo} supervisedCallInfo CallInfo of the call to be supervised\n     * @returns {Promise <SuperviseCallResult>}\n     */\n    superviseCall(supervisedCallInfo) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Supervisor disconnects from a call\n     * @param {SupervisedCallInfo} supervisedCallInfo CallInfo of the supervised call to be disconnected\n     * @returns {Promise <SupervisorHangupResult>}\n     */\n    supervisorDisconnect(supervisedCallInfo) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Supervisor Barges into a ongoing call\n     * @param {SupervisedCallInfo} supervisedCallInfo CallInfo of the supervised call which supervisor barges in\n     * @returns {Promise <SuperviseCallResult>}\n     */\n    supervisorBargeIn(supervisedCallInfo) {\n        throw new Error('Not implemented');\n    }\n}\n\n/** \n* Class representing a VendorConnector\n*/\nexport class VendorConnector {\n    /**\n     * Initialize the connector\n     * @param {object} connectorConfig\n     * @returns {Promise<InitResult>} \n     * \n     */\n    init(config) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Gets the telephonyConnector\n     * @returns {Promise<TelephonyConnector>} \n     * \n     */\n    getTelephonyConnector() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Sends non-voice agent work events to vendor such as work accepted, declined, etc\n     * @param {AgentWork} agentWork\n     * \n     */\n    onAgentWorkEvent(agentWork) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Set agent status\n     * @param {Constants.AGENT_STATUS} agentStatus\n     * @param {StatusInfo} statusInfo\n     * @param {Boolean} enqueueNextState - flag to determine if this status change request should be enqueued if neccessary\n     * @returns {Promise<GenericResult>} \n     * \n     */\n    setAgentStatus(agentStatus, statusInfo, enqueueNextState) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get agent status\n     * @returns {Promise<AgentStatusInfo>} \n     * \n     */\n     getAgentStatus() {\n        this.logMessageToVendor(constants.LOG_LEVEL.INFO, 'getAgentStatus API is NOT Implemented' );\n    }\n\n    /**\n     * Logout from Omni\n     * @returns {Promise<LogoutResult>} \n     */\n    logout() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Handle message from LWC/Aura component\n     * @param {object} message\n     */\n    handleMessage(message) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Triggers a browser download for Vendor Logs\n     * @param {String[]} logs Array of log messages.\n     */\n    downloadLogs(logs) {\n        downloadLogs();\n    }\n\n    /**\n     * Sends the logs with a logLevel and payload to the vendor connector.\n     * Does a no-op, if not implemented.\n     * @param {String} logLevel Log Level (INFO, WARN, ERROR)\n     * @param {String} message Message to be logged\n     * @param {Object} payload An optional payload to be logged\n     */\n    logMessageToVendor(logLevel, message, payload) {}\n\n    /**\n     * To get the Contacts for this workItem's transfer/other channel operation\n     * @param {ContactsFilter} filter It has fields like the search term  and contact Type\n     * @param {String} workItemId\n     * @returns {Promise<PhoneContactsResult>} \n     */\n    getContacts(filter, workItemId) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Returns a list of valid device IDs that can be used for the speaker and microphone devices.\n     */\n    getAudioDevices() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get shared capabilities\n     * @returns {Promise<SharedCapabilitiesResult>}\n     */\n    getSharedCapabilities() {\n        throw new Error('Not implemented');\n    }\n}\n\nexport class Validator {\n    static validateString(value) {\n        if (typeof value !== 'string') {\n            throw new Error(`Invalid argument. Expecting a string but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateNumber(value) {\n        if (typeof value !== 'number') {\n            throw new Error(`Invalid argument. Expecting a number but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateBoolean(value) {\n        if (typeof value !== 'boolean') {\n            throw new Error(`Invalid argument. Expecting a boolean but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateEnum(value, enumValues) {\n        const regex = new RegExp(enumValues.join( \"|\" ), \"i\");\n        if (!regex.test(value)) {\n            throw new Error(`Invalid argument. Expecting a value from ${JSON.stringify(enumValues)} but got ${value}`);\n        }\n        return this;\n    }\n\n    static validateDate(value) {\n        if (!(value instanceof Date)) {\n            throw new Error(`Invalid argument. Expecting a Date object but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateClassObject(object, className) {\n        if (!(object instanceof className)) {\n            throw new Error(`Invalid className. Expecting object of class ${className} but got ${typeof object}`);\n        }\n        return this;\n    }\n    \n    static validateClassObjects(object, ...classNames) {\n        let isValid = false;\n        for (let i = 0; i < classNames.length; i++) {\n            try {\n                this.validateClassObject(object, classNames[i]);\n                isValid = true;\n                break;\n            } catch(e) {\n                // continue on\n            }\n        }\n        if (!isValid) {\n            throw new Error(`Invalid className. Expecting object matching a class name in ${classNames} but got ${typeof object}`);\n        }\n        return this;\n    }\n}\n\n/** \n* Class representing an AgentWork\n*/\nexport class AgentWork {\n    /**\n     * Create an AgentWork.\n     * @param {object} param\n     * @param {string} [param.workItemId] - Salesforce agent work item Id\n     * @param {string} [param.workId] - Salesforce work Id\n     * @param {WORK_EVENT} [param.workEvent] - The work lifecycle event\n     */\n    constructor({ workItemId, workId, workEvent }) {\n        Validator.validateEnum(workEvent, Object.values(constants.WORK_EVENT));\n        this.workEvent = workEvent;\n        this.workItemId = workItemId;\n        this.workId = workId;\n    }\n }\n\n/** \n * Class representing an Agent status information. This object is used to represent \n * agent status information\n */\n\nexport class AgentStatusInfo {\n    /**\n     * Create a AgentStatusInfo.\n     * @param {object} param\n     * @param {string} [param.statusId] - The unique statusId (required)\n     * @param {string} [param.statusApiName] - The status API name\n     * @param {string} [param.statusName] - The label for this status to be displayed in the UI\n     */\n    constructor({statusId, statusApiName, statusName}) {\n        Validator.validateString(statusId);\n        if (statusApiName) {\n            Validator.validateString(statusApiName);\n        }\n        if (statusName) {\n            Validator.validateString(statusName);\n        }\n        this.statusId = statusId;\n        this.statusApiName = statusApiName;\n        this.statusName = statusName;\n    }\n}\n\n/** \n * Class representing an Agent Vendor status information. This object is used to represent \n * agent vendor side status information\n */\nexport class AgentVendorStatusInfo {\n    /**\n     * Create a AgentVendorStatusInfo.\n     * @param {object} param\n     * @param {string} [param.statusId] - The unique statusId (e.g agentStateARN)\n     * @param {string} [param.statusType] - The agent's current availability state type\n     * @param {string} [param.statusName] - The name of the agent's current availability state\n     */\n    constructor({statusId, statusType, statusName}) {\n        if (statusId) {\n            Validator.validateString(statusId);\n        }\n        if (statusType) {\n            Validator.validateString(statusType);\n        }\n        if (statusName) {\n            Validator.validateString(statusName);\n        }\n        this.statusId = statusId;\n        this.statusType = statusType;\n        this.statusName = statusName;\n    }\n}\n\n/** \n * NOTE: SALESFORCE INTERNAL USE ONLY\n * Class representing an State Change Result information. This object is used to represent \n * Agent State Change Infomation\n */\n export class StateChangeResult {\n    /**\n     * Create a StateChangeResult.\n     * @param {object} param\n     * @param {AgentVendorStatusInfo} [param.newVendorStateInfo] - newStateName (e.g 'Available') (required), newStateType (e.g 'routable')\n     * @param {AgentVendorStatusInfo} [param.oldVendorStateInfo] - oldStateName (e.g 'offline'), oldStateType (e.g 'Offline')\n     */\n    constructor({newVendorStateInfo, oldVendorStateInfo}) {\n        Validator.validateClassObject(newVendorStateInfo, AgentVendorStatusInfo);\n        Validator.validateString(newVendorStateInfo.statusName);\n        if (oldVendorStateInfo) {\n            Validator.validateClassObject(oldVendorStateInfo, AgentVendorStatusInfo);\n        }\n        this.newVendorStateInfo = newVendorStateInfo;\n        this.oldVendorStateInfo = oldVendorStateInfo;\n    }\n}\n\n/** \n * Class representing a Supervised Call Info. This object is used to represent \n * information about a call that is being supervised by a supervisor.\n */\nexport class SupervisedCallInfo {\n    /**\n     * Create a AgentStatusInfo.\n     * @param {object} param\n     * @param {string} [param.callId] - The unique supervised vendor call ID (required)\n     * @param {string} [param.connectionId] - optional connectionID representing a call leg.\n     * @param {string} [param.voiceCallId] - The supervised salesforce voice call ID\n     * @param {string} [param.callType] - The type of the call, one of the CALL_TYPE values\n     * @param {string} [param.from] - From phone number (for Inbound calls)\n     * @param {string} [param.to] - To phone number (for Outbound calls)\n     * @param {string} [param.supervisorName] - The supervisor name (shown to the supervised agent on barge in)\n     * @param {boolean} [param.isBargedIn] - True if the Supervisor has barged in, False if the supervisor is listening in.\n     */\n\n    constructor({callId, voiceCallId, callType, from, to, supervisorName, isBargedIn, connectionId }) {\n        Validator.validateString(callId);\n        this.callId = callId;\n        this.voiceCallId = voiceCallId;\n        this.callType = callType;\n        this.from = from;\n        this.to = to;\n        this.supervisorName = supervisorName;\n        this.isBargedIn = isBargedIn;\n        if (connectionId) {\n            this.connectionId = connectionId;\n        } else {\n            this.connectionId = callId;\n        }\n    }\n}\n\n/**\n * Class representing a Audio Stats, which contains array of AudioStats. This object is used to calculate the MOS Score\n */\n\nexport class AudioStats {\n    /**\n     * Create a AudioStats\n     * @param {object} param\n     * @param {string} [param.callId] - The unique callId.\n     * @param {AudioStatsElement[]} param.stats - array of AudioStatsElement\n     * @param {boolean} [param.isAudioStatsCompleted] - True if the audio stats is completed, will calculate MOS and update VoiceCall record\n     */\n    constructor({ callId, stats, isAudioStatsCompleted }) {\n        if (callId) {\n            Validator.validateString(callId);\n            this.callId = callId;\n        }\n\n        if (stats) {\n            Validator.validateClassObject(stats, Array);\n            stats.forEach(audioStatsElement => Validator.validateClassObject(audioStatsElement, AudioStatsElement));\n            this.stats = stats;\n        }\n\n        if (isAudioStatsCompleted) {\n            Validator.validateBoolean(isAudioStatsCompleted);\n            this.isAudioStatsCompleted = isAudioStatsCompleted;\n        }\n    }\n}\n\n/**\n * Class representing a Audio Stats Element. This object is used to calculate the MOS Score\n */\n\nexport class AudioStatsElement {\n    /**\n     * Create a AudioStatsElement\n     * @param {object} param\n     * @param {StatsInfo} [param.inputChannelStats] - the inputChannel stream stats\n     * @param {StatsInfo} [param.outputChannelStats] - the ouputChannel stream stats\n     */\n    constructor({inputChannelStats, outputChannelStats}) {\n        if (inputChannelStats) {\n            Validator.validateClassObject(inputChannelStats, StatsInfo);\n        }\n        if (outputChannelStats) {\n            Validator.validateClassObject(outputChannelStats, StatsInfo);\n        }\n        \n        this.inputChannelStats = inputChannelStats;\n        this.outputChannelStats = outputChannelStats;\n    }\n}\n\n/**\n * Class representing a Stream Stats. This object is used to calculate the MOS Score\n */\n\nexport class StatsInfo {\n    /**\n     * Create a StatsInfo\n     * @param {object} param\n     * @param {number} [param.packetsCount] - the packets count\n     * @param {number} [param.packetsLost] - packets lost count\n     * @param {number} [param.jitterBufferMillis] - jitter buffer in milliseconds\n     * @param {number} [param.roundTripTimeMillis] - round trip time in milliseconds\n     */\n    constructor({packetsCount, packetsLost, jitterBufferMillis, roundTripTimeMillis}) {\n        packetsCount = (packetsCount == null || packetsCount < 0) ? 0 : packetsCount;\n        packetsLost = (packetsLost == null || packetsLost < 0) ? 0 : packetsLost;\n        jitterBufferMillis = (jitterBufferMillis == null || jitterBufferMillis < 0) ? 0 : jitterBufferMillis;\n        roundTripTimeMillis = (roundTripTimeMillis == null || roundTripTimeMillis < 0) ? 0 : roundTripTimeMillis;\n\n        this.statsCount = 0;\n        this.packetsCount = packetsCount;\n        this.packetsLost = packetsLost;\n        this.jitterBufferMillis = jitterBufferMillis;\n        this.roundTripTimeMillis = roundTripTimeMillis;\n    }\n}\n\n/**\n * Class representing supervise call result\n */\n export class SuperviseCallResult {\n    /**\n     * Create a SuperviseCallResult\n     * @param {object} param\n     * @param {PhoneCall} param.call\n     */\n    constructor({call}) {\n        Validator.validateClassObject(call, PhoneCall);\n        this.call = call;\n    }\n}\n\n/**\n * Class representing result type for supervisorDisconnected()\n */\n export class SupervisorHangupResult extends HangupResult {\n     /**\n     * Create SupervisorHangupResult\n     * @param {object} param\n     * @param {PhoneCall[]|PhoneCall} param.calls - one or more calls when supervisor hangsup\n     */\n    constructor({ calls }) {\n        super({ calls });\n    }\n }\n\n/** \n * Class representing result type for STORAGE_ACCESS_RESULT\n * @param {object} param\n * @param {boolean} [param.success]\n * @param {boolean} [param.showLogin] \n * @param {number} [param.loginFrameHeight]\n */\nexport class ShowStorageAccessResult {\n    constructor({success= false, showLogin = false, loginFrameHeight = 350 }) {\n        this.success = success;\n        this.showLogin = showLogin;\n        this.loginFrameHeight = loginFrameHeight;\n    }\n}\n\n/**\n * Class used to filter contacts. Passed as a parameter to TelephonyConnector.getPhoneContacts\n * @param {object} param\n * @param {string} param.contains\n * @param {number} param.limit\n * @param {number} param.offset\n * @param {CONTACTS_FILTER_TYPES[]} param.types \n */ \nexport class ContactsFilter {\n    constructor(param) {\n        if (param) {\n            const {contains = null, limit = 50, offset = 0, types = []} = param;\n            if (contains) {\n                Validator.validateString(contains);\n            }\n            Validator.validateNumber(limit);\n            Validator.validateNumber(offset);\n            for (const type of types){\n                Validator.validateEnum(types, Object.values(constants.CONTACTS_FILTER_TYPES));\n            }\n            this.contains = contains;\n            this.limit = limit;\n            this.offset = offset;\n            this.types = types;\n        }\n    }\n}\n\n/**\n * Class used as a parameter to AFTER_CONVERSATION_WORK_STARTED and AFTER_CONVERSATION_WORK_ENDED\n */\nexport class ACWInfo {\n    /**\n     * @param {object} param\n     * @param {string} param.agentWorkId the id of the AgentWork\n     * @param {string} param.workItemId the id of the work item (voice call or messaging session)\n     */\n    constructor({agentWorkId, workItemId}) {\n        if (agentWorkId) {\n            Validator.validateString(agentWorkId);\n            this.agentWorkId = agentWorkId;\n        }\n        if (workItemId) {\n            Validator.validateString(workItemId);\n            this.workItemId = workItemId;\n        }\n        if (!agentWorkId && !workItemId) {\n            throw new Error('You must pass at least one of agent work id or work item (voice call or messaging session) id');\n        }\n    }\n}\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport { AudioStatsElement, StatsInfo } from './types';\nlet audioStatus;\nlet supportsMos = false;\n\nfunction getAvgStats(streamType) {\n    const stats = audioStatus[streamType];\n    return {\n        packetsCount: stats.packetsCount / stats.statsCount,\n        packetsLost: stats.packetsLost / stats.statsCount,\n        jitterBufferMillis: stats.jitterBufferMillis / stats.statsCount,\n        roundTripTimeMillis: stats.roundTripTimeMillis / stats.statsCount\n    };\n}\n\nfunction getMOSByStream(streamType) {\n    const avgStats = getAvgStats(streamType);\n    const effectiveLatency = avgStats.roundTripTimeMillis + (avgStats.jitterBufferMillis * 2) + 10.0;\n    let R = 0;\n    if (effectiveLatency < 160) {\n        R = 93.2 - (effectiveLatency / 40);\n    } else {\n        R = 93.2 - (effectiveLatency - 120) / 10;\n    }\n    R -= avgStats.packetsLost / avgStats.packetsCount * 2.50;\n    return 1 + (0.035) * R + (.000007) * R * (R - 60) * (100 - R);\n}\n\nexport function enableMos() {\n    supportsMos = true;\n}\n\nexport function getMOS() {\n    if (!supportsMos || !audioStatus) {\n        return undefined;\n    }\n    const inputChannelMOS = getMOSByStream('inputChannelStats');\n    const ouputChannelMOS = getMOSByStream('outputChannelStats');\n    audioStatus = null;\n    if (isNaN(ouputChannelMOS) && isNaN(inputChannelMOS)) {\n        return 0;\n    } else if (isNaN(ouputChannelMOS)) {\n        return inputChannelMOS;\n    } else if (isNaN(inputChannelMOS)) {\n        return ouputChannelMOS;\n    } else {\n        return Math.min(inputChannelMOS, ouputChannelMOS);\n    }\n}\n\nexport function initAudioStats() {\n    audioStatus = new AudioStatsElement({inputChannelStats: new StatsInfo({packetsCount: 0, packetsLost: 0, jitterBufferMillis: 0, roundTripTimeMillis: 0}), \n                               outputChannelStats: new StatsInfo({packetsCount: 0, packetsLost: 0, jitterBufferMillis: 0, roundTripTimeMillis: 0})});\n}\n\nexport function updateAudioStats(statsArray) {\n    if (audioStatus) {\n        statsArray.forEach((stats) => {\n            if (stats.inputChannelStats) {\n                audioStatus.inputChannelStats.statsCount++;\n                audioStatus.inputChannelStats.packetsCount += stats.inputChannelStats.packetsCount | 0;\n                audioStatus.inputChannelStats.packetsLost += stats.inputChannelStats.packetsLost | 0;\n                audioStatus.inputChannelStats.jitterBufferMillis += stats.inputChannelStats.jitterBufferMillis | 0;\n                audioStatus.inputChannelStats.roundTripTimeMillis += stats.inputChannelStats.roundTripTimeMillis | 0;\n            }\n            if (stats.outputChannelStats) {\n                audioStatus.outputChannelStats.statsCount++;\n                audioStatus.outputChannelStats.packetsCount += stats.outputChannelStats.packetsCount | 0;\n                audioStatus.outputChannelStats.packetsLost += stats.outputChannelStats.packetsLost | 0;\n                audioStatus.outputChannelStats.jitterBufferMillis += stats.outputChannelStats.jitterBufferMillis | 0;\n                audioStatus.outputChannelStats.roundTripTimeMillis += stats.outputChannelStats.roundTripTimeMillis | 0;\n            }\n        });\n    }\n}","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/* eslint-disable no-unused-vars */\nimport constants from './constants.js';\nimport { CONNECTOR_CONFIG_EXPOSED_FIELDS, CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH, CONNECTOR_CONFIG_EXCEPTION_FIELDS } from './constants.js';\nimport {\n    Validator,\n    GenericResult,\n    InitResult,\n    CallResult,\n    HangupResult,\n    HoldToggleResult,\n    ContactsResult,\n    PhoneContactsResult,\n    MuteToggleResult,\n    ParticipantResult,\n    RecordingToggleResult,\n    AgentConfigResult,\n    ActiveCallsResult,\n    SignedRecordingUrlResult,\n    LogoutResult,\n    VendorConnector,\n    Contact,\n    AudioStats,\n    SuperviseCallResult,\n    SupervisorHangupResult,\n    AgentStatusInfo,\n    SupervisedCallInfo,\n    SharedCapabilitiesResult,\n    VoiceCapabilitiesResult,\n    AgentVendorStatusInfo,\n    StateChangeResult,\n    CustomError,\n    DialOptions,\n    ShowStorageAccessResult,\n    AudioDevicesResult,\n    ACWInfo,\n    SetAgentConfigResult,\n    SetAgentStateResult\n} from './types';\nimport { enableMos, getMOS, initAudioStats, updateAudioStats } from './mosUtil';\nimport { log, getLogs } from './logger';\n\nlet channelPort;\nlet vendorConnector;\nlet agentAvailable;\nlet isSupervisorConnected;\n\n/**\n * Gets the error type from the error object\n * @param {object} e Error object representing the error\n */\nfunction getErrorType(e) {\n    return e && e.type ? e.type : e;\n}\n\n/**\n * Sanitizes the object by removing any PII data\n * @param {object} payload\n */\nfunction sanitizePayload(payload) {\n    if (payload) {\n        if (typeof (payload) === 'function') {\n            // remove functions from the payload, because they cannot be copied by the postMessage function\n            return;\n        } else if (typeof (payload) === 'object') {\n            const isArray = Array.isArray(payload);\n            const sanitizedPayload = isArray ? [] : {};\n\n            if (isArray) {\n                payload.forEach(element => {\n                    sanitizedPayload.push(sanitizePayload(element));\n                });\n            } else {\n                for (const property in payload) {\n                    if (property !== 'phoneNumber' &&\n                        property !== 'number' &&\n                        property !== 'name' &&\n                        property !== 'callAttributes' &&\n                        property !== '/reqHvcc/reqTelephonyIntegrationCertificate') {\n                        sanitizedPayload[property] = sanitizePayload(payload[property]);\n                    }\n                }\n            }\n            return sanitizedPayload;\n        }\n    }\n    return payload;\n}\n\n/**\n * Gets the error message from the error object\n * @param {object} e Error object representing the error\n */\nfunction getErrorMessage(e) {\n    return e && e.message ? e.message : e;\n}\n/** \n * Dispatch a telephony event log to Salesforce\n * @param {String} eventType event type, i.e. constants.VOICE_EVENT_TYPE.CALL_STARTED\n * @param {Object} payload event payload\n * @param {Boolean} isError error scenario\n */\nfunction dispatchEventLog(eventType, payload, isError) {\n    const sanitizedPayload = sanitizePayload(payload);\n    const logLevel = isError ? constants.LOG_LEVEL.ERROR : constants.LOG_LEVEL.INFO;\n    log({eventType, payload}, logLevel, constants.LOG_SOURCE.SYSTEM);\n    channelPort.postMessage({\n        type: constants.SHARED_MESSAGE_TYPE.LOG,\n        payload: { eventType, payload: sanitizedPayload, isError }\n    });\n}\n/** \n * Dispatch a telephony event to Salesforce\n * @param {String} eventType event type, i.e. constants.VOICE_EVENT_TYPE.CALL_STARTED\n * @param {Object} payload event payload\n * @param {Boolean} registerLog optional argument to not register the event\n */\nfunction dispatchEvent(eventType, payload, registerLog = true) {\n    channelPort.postMessage({\n        type: constants.SHARED_MESSAGE_TYPE.TELEPHONY_EVENT_DISPATCHED,\n        payload: { telephonyEventType: eventType, telephonyEventPayload: payload }\n    });\n    if (registerLog) {\n        dispatchEventLog(eventType, payload, false);\n    }\n}\n\n/**\n * Dispatch a telephony integration error to Salesforce\n * @param {constants.VOICE_ERROR_TYPE} errorType Error Type, ex: constants.VOICE_ERROR_TYPE.MICROPHONE_NOT_SHARED\n * @param {object} error Error object representing the error\n * @param {string} eventType The event that caused this error, ex: constants.VOICE_MESSAGE_TYPE.ACCEPT_CALL\n */\nfunction dispatchError(errorType, error, eventType) {\n    // eslint-disable-next-line no-console\n    console.error(`SCV dispatched error ${errorType} for eventType ${eventType}`, error);\n    dispatchEvent(constants.SHARED_EVENT_TYPE.ERROR, { message: errorType }, false);\n    dispatchEventLog(eventType, { errorType, error }, true);\n}\n\n/**\n * Dispatch a telephony integration error to Salesforce\n * @param {CustomError} error Error object representing the custom error\n * @param {string} eventType The event that caused this error, ex: constants.SHARED_MESSAGE_TYPE.ACCEPT_CALL\n */\nfunction dispatchCustomError(error, eventType) {\n    // eslint-disable-next-line no-console\n    const payload = {\n        customError: {\n            labelName: error.labelName,\n            namespace: error.namespace,\n            message: error.message\n        }\n    };\n    console.error(`SCV dispatched custom error for eventType ${eventType}`, payload);\n    dispatchEvent(constants.SHARED_EVENT_TYPE.ERROR, payload, false);\n    dispatchEventLog(eventType, { errorType: constants.SHARED_ERROR_TYPE.CUSTOM_ERROR, error }, true);\n}\n\nfunction dispatchInfo(eventType, payload) {\n    // eslint-disable-next-line no-console\n    console.info(`SCV info message dispatched for eventType ${eventType} with payload ${JSON.stringify(payload)}`);\n    dispatchEvent(constants.SHARED_EVENT_TYPE.INFO, { message: eventType }, false);\n    dispatchEventLog(eventType, payload, false);\n}\n\n/** \n * Notify Salesforce that the connector is ready\n */\nasync function setConnectorReady() {\n    try {\n        const telephonyConnector = await vendorConnector.getTelephonyConnector();\n        const agentConfigResult = await telephonyConnector.getAgentConfig();\n        const sharedCapabilitiesResult = await vendorConnector.getSharedCapabilities();\n        const voiceCapabilitiesResult = await telephonyConnector.getVoiceCapabilities();\n        Validator.validateClassObject(agentConfigResult, AgentConfigResult);\n        Validator.validateClassObject(voiceCapabilitiesResult, VoiceCapabilitiesResult);\n        if (voiceCapabilitiesResult.supportsMos) {\n            enableMos();\n        }\n        const activeCallsResult = await telephonyConnector.getActiveCalls();\n        Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n        const activeCalls = activeCallsResult.activeCalls;\n        const type = constants.SHARED_MESSAGE_TYPE.CONNECTOR_READY;\n        const payload = {\n            agentConfig: {\n\n                [constants.AGENT_CONFIG_TYPE.PHONES] : agentConfigResult.phones,\n                [constants.AGENT_CONFIG_TYPE.SELECTED_PHONE] : agentConfigResult.selectedPhone\n            },\n            capabilities: {\n                [constants.SHARED_CAPABILITIES_TYPE.DEBUG_ENABLED] : sharedCapabilitiesResult.debugEnabled,\n                [constants.SHARED_CAPABILITIES_TYPE.CONTACT_SEARCH] : sharedCapabilitiesResult.hasContactSearch,\n                [constants.SHARED_CAPABILITIES_TYPE.VENDOR_PROVIDED_AVAILABILITY] : sharedCapabilitiesResult.hasAgentAvailability,\n                [constants.SHARED_CAPABILITIES_TYPE.VENDOR_PROVIDED_QUEUE_WAIT_TIME] : sharedCapabilitiesResult.hasQueueWaitTime,\n                [constants.SHARED_CAPABILITIES_TYPE.TRANSFER_TO_OMNI_FLOW] : sharedCapabilitiesResult.hasTransferToOmniFlow,\n                [constants.SHARED_CAPABILITIES_TYPE.PENDING_STATUS_CHANGE] : sharedCapabilitiesResult.hasPendingStatusChange,\n                [constants.SHARED_CAPABILITIES_TYPE.SFDC_PENDING_STATE]: sharedCapabilitiesResult.hasSFDCPendingState,\n                [constants.SHARED_CAPABILITIES_TYPE.AUTO_ACCEPT_ENABLED]: sharedCapabilitiesResult.hasAutoAcceptEnabled,\n                [constants.VOICE_CAPABILITIES_TYPE.MUTE] : voiceCapabilitiesResult.hasMute,\n                [constants.VOICE_CAPABILITIES_TYPE.RECORD] : voiceCapabilitiesResult.hasRecord,\n                [constants.VOICE_CAPABILITIES_TYPE.MERGE] : voiceCapabilitiesResult.hasMerge,\n                [constants.VOICE_CAPABILITIES_TYPE.SWAP] : voiceCapabilitiesResult.hasSwap,\n                [constants.VOICE_CAPABILITIES_TYPE.BLIND_TRANSFER] : voiceCapabilitiesResult.hasBlindTransfer,\n                [constants.VOICE_CAPABILITIES_TYPE.SIGNED_RECORDING_URL] : voiceCapabilitiesResult.hasSignedRecordingUrl,\n                [constants.VOICE_CAPABILITIES_TYPE.SUPERVISOR_LISTEN_IN] : voiceCapabilitiesResult.hasSupervisorListenIn,\n                [constants.VOICE_CAPABILITIES_TYPE.SUPERVISOR_BARGE_IN] : voiceCapabilitiesResult.hasSupervisorBargeIn,\n                [constants.VOICE_CAPABILITIES_TYPE.MOS] : voiceCapabilitiesResult.supportsMos,\n                [constants.VOICE_CAPABILITIES_TYPE.PHONEBOOK] : voiceCapabilitiesResult.hasPhoneBook,\n                [constants.VOICE_CAPABILITIES_TYPE.HAS_GET_EXTERNAL_SPEAKER] : voiceCapabilitiesResult.hasGetExternalSpeakerDeviceSetting,\n                [constants.VOICE_CAPABILITIES_TYPE.HAS_SET_EXTERNAL_SPEAKER] : voiceCapabilitiesResult.hasSetExternalSpeakerDeviceSetting,\n                [constants.VOICE_CAPABILITIES_TYPE.HAS_GET_EXTERNAL_MICROPHONE] : voiceCapabilitiesResult.hasGetExternalMicrophoneDeviceSetting,\n                [constants.VOICE_CAPABILITIES_TYPE.HAS_SET_EXTERNAL_MICROPHONE] : voiceCapabilitiesResult.hasSetExternalMicrophoneDeviceSetting,\n                [constants.VOICE_CAPABILITIES_TYPE.CAN_CONSULT]: voiceCapabilitiesResult.canConsult,\n                [constants.VOICE_CAPABILITIES_TYPE.DIAL_PAD]: voiceCapabilitiesResult.isDialPadDisabled,\n                [constants.VOICE_CAPABILITIES_TYPE.HAS_HID_SUPPORT]: voiceCapabilitiesResult.isHidSupported,\n                [constants.VOICE_CAPABILITIES_TYPE.PHONEBOOK_DISABLE]: voiceCapabilitiesResult.isPhoneBookDisabled\n            },\n            callInProgress: activeCalls.length > 0 ? activeCalls[0] : null\n        }\n        channelPort.postMessage({\n            type,\n            payload\n        });\n        dispatchEventLog(type, payload, false);\n    } catch (e) {\n        // Post CONNECTOR_READY even if getAgentConfig is not implemented\n        channelPort.postMessage({\n            type: constants.SHARED_MESSAGE_TYPE.CONNECTOR_READY,\n            payload: {}\n        });\n        dispatchEventLog(constants.SHARED_MESSAGE_TYPE.CONNECTOR_READY, {}, false);\n    }\n}\n\n//TODO: 230 we should convert call object to PhoneCall object\nasync function channelMessageHandler(message) { \n    const eventType = message.data.type;\n    if (eventType !== constants.SHARED_MESSAGE_TYPE.LOG) {\n        dispatchEventLog(eventType, message.data, false);\n    }\n    switch (eventType) {\n        case constants.VOICE_MESSAGE_TYPE.ACCEPT_CALL:\n            try {\n                if (message.data.call && message.data.call.callType &&\n                    (message.data.call.callType.toLowerCase() === constants.CALL_TYPE.OUTBOUND.toLowerCase() ||\n                    message.data.call.callType.toLowerCase() === constants.CALL_TYPE.DIALED_CALLBACK.toLowerCase())) {\n                    return;\n                }\n                initAudioStats();\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                if (isSupervisorConnected) {\n                    const hangupPayload = await telephonyConnector.supervisorDisconnect();\n                    Validator.validateClassObject(hangupPayload, SupervisorHangupResult);\n                    isSupervisorConnected = false;\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP, hangupPayload.calls);\n                }\n                let payload = await telephonyConnector.acceptCall(message.data.call);\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                dispatchEvent(call.callType.toLowerCase() === constants.CALL_TYPE.CALLBACK.toLowerCase() ?\n                    constants.VOICE_EVENT_TYPE.CALL_STARTED : constants.VOICE_EVENT_TYPE.CALL_CONNECTED, call);\n            } catch (e) {\n                isSupervisorConnected = false;\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.ACCEPT_CALL);\n                } else {\n                    dispatchInfo(constants.INFO_TYPE.CAN_NOT_ACCEPT_THE_CALL, {messagetype: constants.VOICE_MESSAGE_TYPE.ACCEPT_CALL, additionalInfo: e});\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.DECLINE_CALL:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload =  await telephonyConnector.declineCall(message.data.call);\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.HANGUP, call);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.DECLINE_CALL);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_DECLINE_THE_CALL, e, constants.VOICE_MESSAGE_TYPE.DECLINE_CALL);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.END_CALL:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.endCall(message.data.call, message.data.agentStatus);\n                Validator.validateClassObject(payload, HangupResult);\n                const activeCallsResult = await telephonyConnector.getActiveCalls();\n                Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n                const activeCalls = activeCallsResult.activeCalls;\n                const { calls } = payload;\n                // after end calls from vendor side, if no more active calls, fire HANGUP, otherwise, fire PARTICIPANT_REMOVED\n                if (activeCalls.length === 0) {\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.HANGUP, calls);\n                } else {\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED, calls.length > 0 && calls[0]);\n                }\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.END_CALL);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_END_THE_CALL, e, constants.VOICE_MESSAGE_TYPE.END_CALL);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.MUTE:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.mute(message.data.call);\n                publishEvent({eventType: constants.VOICE_EVENT_TYPE.MUTE_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.MUTE);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_MUTE_CALL, e, constants.VOICE_MESSAGE_TYPE.MUTE);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.UNMUTE:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.unmute(message.data.call);\n                publishEvent({eventType: constants.VOICE_EVENT_TYPE.MUTE_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.UNMUTE);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_UNMUTE_CALL, e, constants.VOICE_MESSAGE_TYPE.UNMUTE);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.HOLD:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.hold(message.data.call);\n                publishEvent({eventType: constants.VOICE_EVENT_TYPE.HOLD_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.HOLD);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT:\n                            dispatchError(constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.HOLD);\n                            break;\n                        default:\n                            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_HOLD_CALL, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.HOLD);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.RESUME:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.resume(message.data.call);\n                publishEvent({eventType: constants.VOICE_EVENT_TYPE.HOLD_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.RESUME);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT:\n                            dispatchError(constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.RESUME);\n                            break;\n                        default:\n                            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_RESUME_CALL, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.RESUME);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.SET_AGENT_STATUS:\n            try {\n                const statusInfo = message.data.statusInfo || {};\n                const enqueueNextState = message.data.enqueueNextState || false;\n                const payload = await vendorConnector.setAgentStatus(message.data.agentStatus, statusInfo, enqueueNextState);\n                Validator.validateClassObject(payload, GenericResult, SetAgentStateResult);\n                const { success, isStatusSyncNeeded } = payload;\n                dispatchEvent(constants.SHARED_EVENT_TYPE.SET_AGENT_STATUS_RESULT, \n                    isStatusSyncNeeded !== undefined ? { success, isStatusSyncNeeded } : { success });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.SHARED_MESSAGE_TYPE.SET_AGENT_STATUS);\n                } else {\n                    if (message.data.statusInfo) {\n                        dispatchEvent(constants.SHARED_EVENT_TYPE.SET_AGENT_STATUS_RESULT, { success: false });\n                    }\n                    switch(getErrorType(e)) {\n                        case constants.SHARED_ERROR_TYPE.INVALID_AGENT_STATUS:\n                            dispatchError(constants.SHARED_ERROR_TYPE.INVALID_AGENT_STATUS, getErrorMessage(e), constants.SHARED_MESSAGE_TYPE.SET_AGENT_STATUS);\n                            break;\n                        default:\n                            dispatchError(constants.SHARED_ERROR_TYPE.CAN_NOT_SET_AGENT_STATUS, getErrorMessage(e), constants.SHARED_MESSAGE_TYPE.SET_AGENT_STATUS);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.GET_AGENT_STATUS:\n            try {\n                const payload = await vendorConnector.getAgentStatus();\n                Validator.validateClassObject(payload, AgentVendorStatusInfo);\n                dispatchEvent(constants.SHARED_EVENT_TYPE.GET_AGENT_STATUS_RESULT, payload);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.SHARED_MESSAGE_TYPE.GET_AGENT_STATUS);\n                } else {\n                    dispatchError(constants.SHARED_ERROR_TYPE.CAN_NOT_GET_AGENT_STATUS, getErrorMessage(e), constants.SHARED_MESSAGE_TYPE.GET_AGENT_STATUS);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.DIAL:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const isCallback = message.data.params && message.data.params.indexOf(constants.DIAL_OPTIONS.CALLBACK) >= 0;\n                const isConsultCall = message.data.params && message.data.params.indexOf(constants.DIAL_OPTIONS.CONSULT) >= 0;\n                const payload = await telephonyConnector.dial(new Contact(message.data.contact),\n                                                              new DialOptions({ isCallback, isConsultCall }));\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                // If connectors wants this to be created as callback \n                if (constants.CALL_TYPE.DIALED_CALLBACK.toLowerCase() === call.callType.toLowerCase() && isCallback) {\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED, call);\n                } else { // continue treating this as outbound\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_STARTED, call);\n                }\n            } catch (e) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_FAILED);\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.DIAL);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.VOICE_ERROR_TYPE.INVALID_DESTINATION:\n                            dispatchError(constants.VOICE_ERROR_TYPE.INVALID_DESTINATION, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.DIAL);\n                            break;\n                        case constants.SHARED_ERROR_TYPE.GENERIC_ERROR:\n                            dispatchError(constants.SHARED_ERROR_TYPE.GENERIC_ERROR, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.DIAL);\n                            break;\n                        default:\n                            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.DIAL);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.SEND_DIGITS:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                await telephonyConnector.sendDigits(message.data.digits);\n            } catch (e) {\n                dispatchEventLog(constants.VOICE_MESSAGE_TYPE.SEND_DIGITS, message.data.digits, true);\n            }\n            break;\n        case constants.VOICE_MESSAGE_TYPE.GET_PHONE_CONTACTS:\n            try  {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.getPhoneContacts(message.data.filter);\n                Validator.validateClassObject(payload, PhoneContactsResult);\n                const contacts = payload.contacts.map((contact) => {\n                    return {\n                        id: contact.id,\n                        type: contact.type,\n                        name: contact.name,\n                        listType: contact.listType,\n                        phoneNumber: contact.phoneNumber,\n                        prefix: contact.prefix,\n                        extension: contact.extension,\n                        endpointARN: contact.endpointARN,\n                        queue: contact.queue,\n                        availability: contact.availability,\n                        queueWaitTime: contact.queueWaitTime,\n                        recordId: contact.recordId,\n                        description: contact.description\n                    };\n                });\n                dispatchEvent(constants.VOICE_EVENT_TYPE.PHONE_CONTACTS, {\n                    contacts, contactTypes: payload.contactTypes\n                });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.GET_PHONE_CONTACTS);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_GET_PHONE_CONTACTS, e, constants.VOICE_MESSAGE_TYPE.GET_PHONE_CONTACTS);\n                }\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.GET_CONTACTS:\n            try  {\n                const payload = await vendorConnector.getContacts(message.data.filter, message.data.workItemId);\n                Validator.validateClassObject(payload, ContactsResult);\n                const contacts = payload.contacts.map((contact) => {\n                    return {\n                        id: contact.id,\n                        type: contact.type,\n                        name: contact.name,\n                        listType: contact.listType,\n                        phoneNumber: contact.phoneNumber,\n                        prefix: contact.prefix,\n                        extension: contact.extension,\n                        endpointARN: contact.endpointARN,\n                        queue: contact.queue,\n                        availability: contact.availability,\n                        queueWaitTime: contact.queueWaitTime,\n                        recordId: contact.recordId,\n                        description: contact.description\n                    };\n                });\n                dispatchEvent(constants.SHARED_EVENT_TYPE.GET_CONTACTS_RESULT, {\n                    contacts, contactTypes: payload.contactTypes\n                });\n            } catch (e) {\n                dispatchCustomError(e, constants.SHARED_MESSAGE_TYPE.GET_CONTACTS);\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.SWAP_PARTICIPANTS:\n            try {\n                // TODO: Create PhoneCall from call1.callId & call2.callId\n                // TODO: rename to call1 and call2\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.swap(message.data.callToHold, message.data.callToResume);\n                publishEvent({ eventType: constants.VOICE_EVENT_TYPE.PARTICIPANTS_SWAPPED, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.SWAP_PARTICIPANTS);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_SWAP_PARTICIPANTS, e, constants.VOICE_MESSAGE_TYPE.SWAP_PARTICIPANTS);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.CONFERENCE:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.conference(message.data.calls);\n                publishEvent({ eventType: constants.VOICE_EVENT_TYPE.PARTICIPANTS_CONFERENCED, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.CONFERENCE);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_CONFERENCE, e, constants.VOICE_MESSAGE_TYPE.CONFERENCE);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.ADD_PARTICIPANT:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.addParticipant(new Contact(message.data.contact), message.data.call, message.data.isBlindTransfer);\n                publishEvent({ eventType: constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED, payload });\n                if (message.data.isBlindTransfer) {\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.HANGUP, message.data.call);\n                }\n            } catch (e) {\n                // TODO: Can we avoid passing in reason field\n                dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED, {\n                    reason: constants.SHARED_EVENT_TYPE.ERROR.toLowerCase()\n                });\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.ADD_PARTICIPANT);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.VOICE_ERROR_TYPE.INVALID_DESTINATION:\n                            dispatchError(constants.VOICE_ERROR_TYPE.INVALID_DESTINATION, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.ADD_PARTICIPANT);\n                            break;\n                        default:\n                            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_ADD_PARTICIPANT, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.ADD_PARTICIPANT);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.PAUSE_RECORDING:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.pauseRecording(message.data.call);\n                publishEvent({ eventType: constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.PAUSE_RECORDING);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_PAUSE_RECORDING, e, constants.VOICE_MESSAGE_TYPE.PAUSE_RECORDING);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.RESUME_RECORDING:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.resumeRecording(message.data.call);\n                publishEvent({ eventType: constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.RESUME_RECORDING);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_RESUME_RECORDING, e, constants.VOICE_MESSAGE_TYPE.RESUME_RECORDING);\n                }\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.LOGOUT:\n            try {\n                const payload = await vendorConnector.logout();\n                Validator.validateClassObject(payload, LogoutResult);\n                const { success, loginFrameHeight } = payload;\n                dispatchEvent(constants.SHARED_EVENT_TYPE.LOGOUT_RESULT, { success, loginFrameHeight });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.SHARED_MESSAGE_TYPE.LOGOUT);\n                } else {\n                    dispatchError(constants.SHARED_ERROR_TYPE.CAN_NOT_LOG_OUT, e, constants.SHARED_MESSAGE_TYPE.LOGOUT);\n                }\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.MESSAGE:\n            // TODO: Define a return type for handling message\n            vendorConnector.handleMessage(message.data.message);\n        break;\n        case constants.VOICE_MESSAGE_TYPE.WRAP_UP_CALL: {\n            const telephonyConnector = await vendorConnector.getTelephonyConnector();\n            telephonyConnector.wrapUpCall(message.data.call);\n        }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.AGENT_AVAILABLE: {\n            if (message.data && message.data.isAvailable) {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const activeCallsResult = await telephonyConnector.getActiveCalls();\n                Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n                const activeCalls = activeCallsResult.activeCalls;\n                for (const callId in activeCalls) {\n                    const call = activeCalls[callId];\n                    const shouldReplay = call.callInfo ? call.callInfo.isReplayable : true;\n                    const isSupervisorCall = call.callAttributes && call.callAttributes.participantType === constants.PARTICIPANT_TYPE.SUPERVISOR;\n                    const hasSupervisorBargedIn = isSupervisorCall && call.callAttributes && call.callAttributes.hasSupervisorBargedIn;\n                    if (shouldReplay) {\n                        call.isReplayedCall = true;\n                        switch(call.state) {\n                            case constants.CALL_STATE.CONNECTED:\n                                if (isSupervisorCall) {\n                                    isSupervisorConnected = true;\n                                    dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_CONNECTED, call);\n                                    if (hasSupervisorBargedIn) {\n                                        dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_BARGED_IN, call);\n                                    }\n                                    break;\n                                }\n                                dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_CONNECTED, call);\n                                break;\n                            case constants.CALL_STATE.RINGING:\n                                if (isSupervisorCall) {\n                                    isSupervisorConnected = true;\n                                    dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_STARTED, call);\n                                    break;\n                                }\n                                dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_STARTED, call);\n                                break;\n                            case constants.CALL_STATE.TRANSFERRING:\n                                dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED, {\n                                    phoneNumber: call.contact.phoneNumber,\n                                    contact:call.contact,\n                                    callInfo: call.callInfo,\n                                    callAttributes: call.callAttributes,\n                                    initialCallHasEnded: call.callAttributes.initialCallHasEnded,\n                                    callId: call.callId,\n                                    connectionId: call.connectionId\n                                });\n                                break;\n                            case constants.CALL_STATE.TRANSFERRED:\n                                dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED, {\n                                    phoneNumber: call.contact.phoneNumber,\n                                    contact:call.contact,\n                                    callInfo: call.callInfo,\n                                    callAttributes: call.callAttributes,\n                                    initialCallHasEnded: call.callAttributes.initialCallHasEnded,\n                                    callId: call.callId,\n                                    connectionId: call.connectionId\n                                });\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.SET_AGENT_CONFIG:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.setAgentConfig(message.data.config);\n                Validator.validateClassObjects(result, GenericResult, SetAgentConfigResult);\n                if (result instanceof SetAgentConfigResult) {\n                    result.setIsSystemEvent(!!message.data.config.isSystemEvent);\n                }\n                dispatchEvent(constants.VOICE_EVENT_TYPE.AGENT_CONFIG_UPDATED, result);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.SET_AGENT_CONFIG);\n                } else {\n                    dispatchError(getErrorType(e) === constants.VOICE_ERROR_TYPE.CAN_NOT_UPDATE_PHONE_NUMBER ? constants.VOICE_ERROR_TYPE.CAN_NOT_UPDATE_PHONE_NUMBER : constants.VOICE_ERROR_TYPE.CAN_NOT_SET_AGENT_CONFIG , getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.SET_AGENT_CONFIG);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.GET_AUDIO_DEVICES:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.getAudioDevices();\n                Validator.validateClassObject(result, AudioDevicesResult);\n                dispatchEvent(constants.VOICE_EVENT_TYPE.GET_AUDIO_DEVICES, result);\n            } catch (e) {\n                dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_GET_AUDIO_DEVICES, getErrorMessage(e), constants.VOICE_MESSAGE_TYPE.GET_AUDIO_DEVICES);\n            }\n            break;\n        case constants.VOICE_MESSAGE_TYPE.GET_SIGNED_RECORDING_URL:\n            try {\n                const { recordingUrl, vendorCallKey, callId } = message.data;\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.getSignedRecordingUrl(recordingUrl, vendorCallKey, callId);\n                Validator.validateClassObject(result, SignedRecordingUrlResult);\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SIGNED_RECORDING_URL, result);\n            } catch (e) {\n                // In case of an error, we want to show an error message in the recording player\n                const signedRecordingUrlResult = new SignedRecordingUrlResult({\n                    success: false\n                });\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SIGNED_RECORDING_URL, signedRecordingUrlResult, false);\n                dispatchEventLog(constants.VOICE_MESSAGE_TYPE.GET_SIGNED_RECORDING_URL, signedRecordingUrlResult, true);\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.DOWNLOAD_VENDOR_LOGS:\n            vendorConnector.downloadLogs(getLogs());\n        break;\n        case constants.SHARED_MESSAGE_TYPE.LOG: {\n                const { logLevel, logMessage, payload } = message.data;\n                vendorConnector.logMessageToVendor(logLevel, logMessage, payload);\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.SUPERVISE_CALL:\n            try {\n                isSupervisorConnected = true;\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.superviseCall(message.data.call);\n                Validator.validateClassObject(result, SuperviseCallResult);\n                const agentConfigResult = await telephonyConnector.getAgentConfig();\n                if(agentConfigResult.selectedPhone.type === constants.PHONE_TYPE.SOFT_PHONE) {\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_CONNECTED, result.call);\n                } else {\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_STARTED, result.call);\n                }\n            } catch (e){\n                isSupervisorConnected = false;\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.SUPERVISE_CALL);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_SUPERVISE_CALL, e, constants.VOICE_MESSAGE_TYPE.SUPERVISE_CALL);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.SUPERVISOR_DISCONNECT:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.supervisorDisconnect(message.data.call);\n                Validator.validateClassObject(result, SupervisorHangupResult);\n                isSupervisorConnected = false;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP, result.calls);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.SUPERVISOR_DISCONNECT);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_DISCONNECT_SUPERVISOR, e, constants.VOICE_MESSAGE_TYPE.SUPERVISOR_DISCONNECT);\n                }\n            }\n        break;\n        case constants.VOICE_MESSAGE_TYPE.SUPERVISOR_BARGE_IN:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.supervisorBargeIn(message.data.call);\n                Validator.validateClassObject(result, SuperviseCallResult);\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_BARGED_IN, result.call );\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.VOICE_MESSAGE_TYPE.SUPERVISOR_BARGE_IN);\n                } else {\n                    dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_BARGE_IN_SUPERVISOR, e, constants.VOICE_MESSAGE_TYPE.SUPERVISOR_BARGE_IN);\n                }\n            }\n        break;\n        case constants.SHARED_MESSAGE_TYPE.AGENT_WORK_EVENT: {\n            let { workItemId, workId, workEvent } = message.data.agentWork;\n            vendorConnector.onAgentWorkEvent({\n                workItemId,\n                workId,\n                workEvent\n            });\n        }\n        break;\n        default:\n            break;\n    }\n}\n\n\nasync function windowMessageHandler(message) {\n    switch (message.data.type) {\n        case constants.SHARED_MESSAGE_TYPE.SETUP_CONNECTOR: {\n            const sfDomain = /^https:\\/\\/[\\w-.]+(lightning\\.[\\w]+\\.soma\\.force\\.com|\\.lightning\\.force\\.com|\\.lightning\\.pc-rnd\\.force\\.com|\\.stm\\.force\\.com|\\.vf\\.force\\.com|\\.salesforce\\.com|\\.my\\.salesforce-sites\\.com|\\.lightning\\.localhost\\.[\\w]+\\.force.com|\\.lightning\\.force-com\\.[\\w.-]+\\.crm\\.dev|\\.[\\w-]+\\.(salesforce|crmforce)\\.mil|\\.lightning\\.(salesforce|crmforce)\\.mil|\\.sandbox\\.lightning\\.(salesforce|crmforce)\\.mil)$/;\n            const originUrl = new URL(message.origin);\n            const url = originUrl.protocol + '//' + originUrl.hostname;\n\n            if (sfDomain.test(url)) {\n                channelPort = message.ports[0];\n                channelPort.onmessage = channelMessageHandler;\n                dispatchEventLog(constants.SHARED_MESSAGE_TYPE.SETUP_CONNECTOR, exposedConnectorConfig(message.data.connectorConfig), false);\n                try {\n                    const payload = await vendorConnector.init(message.data.connectorConfig);\n                    Validator.validateClassObject(payload, InitResult);\n                    if (payload.showStorageAccess) {\n                        dispatchEvent(constants.SHARED_EVENT_TYPE.SHOW_STORAGE_ACCESS, {\n                            success: true\n                        });\n                    } else if (payload.showLogin) {\n                        dispatchEvent(constants.SHARED_EVENT_TYPE.SHOW_LOGIN, {\n                            loginFrameHeight: payload.loginFrameHeight\n                        });\n                    } else if (payload.isSilentLogin) {\n                        dispatchEvent(constants.SHARED_EVENT_TYPE.SHOW_LOGIN, {\n                            isSilentLogin: payload.isSilentLogin\n                        });\n                    } else {\n                        setConnectorReady();\n                    }\n                } catch (e) {\n                    if (e instanceof CustomError) {\n                        dispatchCustomError(e, constants.SHARED_MESSAGE_TYPE.SETUP_CONNECTOR);\n                    } else {\n                        switch(getErrorType(e)) {\n                            case constants.VOICE_ERROR_TYPE.INVALID_PARAMS:\n                                dispatchError(constants.VOICE_ERROR_TYPE.INVALID_PARAMS, getErrorMessage(e), constants.SHARED_MESSAGE_TYPE.SETUP_CONNECTOR);\n                                break;\n                            default:\n                                dispatchError(constants.SHARED_ERROR_TYPE.CAN_NOT_LOG_IN, getErrorMessage(e), constants.SHARED_MESSAGE_TYPE.SETUP_CONNECTOR);\n                                break;\n                        }\n                    }\n                }\n            }\n            window.removeEventListener('message', windowMessageHandler);\n        }\n            break;\n        default:\n            break;\n    }\n}\n\nfunction exposedConnectorConfig(payload) {\n    payload = payload || {};\n    let obj = {};\n    //properties that are equal to key\n    CONNECTOR_CONFIG_EXPOSED_FIELDS.forEach(prop => {\n        if (payload.hasOwnProperty(prop)) {\n            obj[prop] = payload[prop];\n        }\n    });\n    //properties that start with key\n    CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH.forEach(prop => {\n        Object.keys(payload).forEach(key => {\n            if (key.startsWith(prop) && !CONNECTOR_CONFIG_EXCEPTION_FIELDS.includes(key)) {\n                obj[key] = payload[key];\n            }\n        });\n    });\n\n    return obj;\n}\n\nfunction validatePayload(payload, payloadType, errorType, eventType) {\n    try {\n        Validator.validateClassObject(payload, payloadType);\n        return true;\n    } catch (e) {\n        if (errorType) {\n            dispatchError(errorType, e, eventType);\n        }\n        return false;\n    }\n}\n\n/*========================== Exported Functions ==========================*/\n/**\n * Initialize a vendor connector\n * @param {VendorConnector} connector\n */\nexport function initializeConnector(connector) {\n    vendorConnector = connector;\n    window.addEventListener('message', windowMessageHandler);\n}\n\n/**\n * Publish an event or error log to Salesforce\n * @param {object} param\n * @param {string} param.eventType Any event type to be logged\n * @param {object} param.payload Any payload for the log that needs to be logged\n * @param {boolean} param.isError\n */\nexport function publishLog({ eventType, payload, isError }) {\n    dispatchEventLog(eventType, payload, isError);\n}\n\n/**\n * Publish a telephony error to Salesforce\n * @param {object} param\n * @param {(\"LOGIN_RESULT\"|\"LOGOUT_RESULT\"|\"CALL_STARTED\"|\"QUEUED_CALL_STARTED\"|\"CALL_CONNECTED\"|\"HANGUP\"|\"PARTICIPANT_CONNECTED\"|\"PARTICIPANT_ADDED\"|\"PARTICIPANTS_SWAPPED\"|\"PARTICIPANTS_CONFERENCED\"|\"MESSAGE\"|\"MUTE_TOGGLE\"|\"HOLD_TOGGLE\"|\"RECORDING_TOGGLE\"|\"AGENT_ERROR\"|\"SOFTPHONE_ERROR\")} param.eventType Event type to publish.\n * @param {object} param.error Error object representing the error\n */\nexport function publishError({ eventType, error }) {\n    if (error instanceof CustomError) {\n        dispatchCustomError(error, eventType);\n        return;\n    }\n\n    switch(eventType) {\n        case constants.SHARED_EVENT_TYPE.LOGIN_RESULT:\n            dispatchError(constants.SHARED_ERROR_TYPE.CAN_NOT_LOG_IN, error, constants.SHARED_EVENT_TYPE.LOGIN_RESULT);\n            break;\n        case constants.SHARED_EVENT_TYPE.LOGOUT_RESULT:\n            dispatchError(constants.SHARED_ERROR_TYPE.CAN_NOT_LOG_OUT, error, constants.SHARED_EVENT_TYPE.LOGOUT_RESULT);\n            break;\n        case constants.VOICE_EVENT_TYPE.CALL_STARTED:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, error, constants.VOICE_EVENT_TYPE.CALL_STARTED);\n            break;\n        case constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, error, constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED);\n            break;\n        case constants.VOICE_EVENT_TYPE.CALL_CONNECTED:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, error, constants.VOICE_EVENT_TYPE.CALL_CONNECTED);\n            break;\n        case constants.VOICE_EVENT_TYPE.HANGUP: \n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_END_THE_CALL, error, constants.VOICE_EVENT_TYPE.HANGUP);\n            break;\n        case constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED:\n            dispatchError(getErrorType(error) === constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT ? constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT : constants.VOICE_ERROR_TYPE.CAN_NOT_ADD_PARTICIPANT, error, constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED);\n            break;\n        case constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_CONNECT_PARTICIPANT, error, constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED);\n            break;\n        case constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_HANGUP_PARTICIPANT, error, constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED); \n            break;\n        case constants.VOICE_EVENT_TYPE.MUTE_TOGGLE:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_TOGGLE_MUTE, error, constants.VOICE_EVENT_TYPE.MUTE_TOGGLE);\n            break;\n        case constants.VOICE_EVENT_TYPE.HOLD_TOGGLE: \n            dispatchError(getErrorType(error) === constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT ? constants.VOICE_ERROR_TYPE.INVALID_PARTICIPANT : constants.VOICE_ERROR_TYPE.CAN_NOT_TOGGLE_HOLD, error, constants.VOICE_EVENT_TYPE.HOLD_TOGGLE);\n            break;\n        case constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_TOGGLE_RECORD, error, constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE);\n            break;\n        case constants.VOICE_EVENT_TYPE.PARTICIPANTS_SWAPPED: \n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_SWAP_PARTICIPANTS, error, constants.VOICE_EVENT_TYPE.PARTICIPANTS_SWAPPED);\n            break;\n        case constants.VOICE_EVENT_TYPE.PARTICIPANTS_CONFERENCED:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_CONFERENCE, error, constants.VOICE_EVENT_TYPE.PARTICIPANTS_CONFERENCED);\n            break;\n        case constants.VOICE_EVENT_TYPE.AGENT_ERROR:\n            dispatchError(constants.VOICE_ERROR_TYPE.AGENT_ERROR, error, constants.VOICE_EVENT_TYPE.AGENT_ERROR);\n            break;\n        case constants.VOICE_EVENT_TYPE.SOFTPHONE_ERROR:\n            switch(getErrorType(error)) {\n                case constants.VOICE_ERROR_TYPE.UNSUPPORTED_BROWSER:\n                case constants.VOICE_ERROR_TYPE.MICROPHONE_NOT_SHARED:\n                case constants.VOICE_ERROR_TYPE.USER_BUSY_ERROR:\n                case constants.VOICE_ERROR_TYPE.WEBRTC_ERROR:\n                    dispatchError(getErrorType(error), error, constants.VOICE_EVENT_TYPE.SOFTPHONE_ERROR);\n                    break;\n                default:\n                    dispatchError(constants.SHARED_ERROR_TYPE.GENERIC_ERROR, error, constants.VOICE_EVENT_TYPE.SOFTPHONE_ERROR);\n            }\n            break;\n        case constants.VOICE_EVENT_TYPE.CALL_UPDATED:\n            dispatchError(constants.VOICE_ERROR_TYPE.CAN_NOT_UPDATE_CALL, error, constants.VOICE_EVENT_TYPE.CALL_UPDATED);\n            break;\n        default:\n            console.error('Unhandled error scenario with arguments ', arguments);\n    }\n}\n\n/**\n * Publish an event to Sfdc. The event payload will be verified to be the correct type before being published. \n * @param {object} param\n * @param {(\"LOGIN_RESULT\"|\"LOGOUT_RESULT\"|\"CALL_STARTED\"|\"QUEUED_CALL_STARTED\"|\"CALL_CONNECTED\"|\"HANGUP\"|\"PARTICIPANT_CONNECTED\"|\"PARTICIPANT_ADDED\"|\"PARTICIPANTS_SWAPPED\"|\"PARTICIPANTS_CONFERENCED\"|\"MESSAGE\"|\"MUTE_TOGGLE\"|\"HOLD_TOGGLE\"|\"RECORDING_TOGGLE\")} param.eventType Event type to publish\n * @param {object} param.payload Payload for the event. Must to be an object of the payload class associated with the EVENT_TYPE else the event is NOT dispatched\n * @param {boolean} param.registerLog Boolean to opt out of registering logs for events\n * LOGIN_RESULT - GenericResult\n * LOGOUT_RESULT - LogoutResult\n * CALL_STARTED - CallResult\n * QUEUED_CALL_STARTED - CallResult\n * CALL_CONNECTED - CallResult\n * HANGUP - CallResult\n * PARTICIPANT_CONNECTED - ParticipantResult\n * PARTICIPANT_ADDED - ParticipantResult\n * PARTICIPANTS_SWAPPED - HoldToggleResult\n * PARTICIPANTS_CONFERENCED - HoldToggleResult\n * MESSAGE - object\n * MUTE_TOGGLE - MuteToggleResult\n * HOLD_TOGGLE - HoldToggleResult\n * RECORDING_TOGGLE - RecordingToggleResult\n * AUDIO_STATS - AudioStats\n */\nexport async function publishEvent({ eventType, payload, registerLog = true }) {\n    switch(eventType) {\n        case constants.SHARED_EVENT_TYPE.LOGIN_RESULT: {\n            if (validatePayload(payload, GenericResult, constants.SHARED_ERROR_TYPE.CAN_NOT_LOG_IN, constants.SHARED_EVENT_TYPE.LOGIN_RESULT)) {\n                dispatchEvent(constants.SHARED_EVENT_TYPE.LOGIN_RESULT, payload, registerLog);\n                if (payload.success) {\n                    setConnectorReady();\n                }\n            }\n            break;\n        }\n        case constants.SHARED_EVENT_TYPE.LOGOUT_RESULT:\n            if (validatePayload(payload, LogoutResult, constants.SHARED_ERROR_TYPE.CAN_NOT_LOG_OUT, constants.SHARED_EVENT_TYPE.LOGOUT_RESULT)) {\n                dispatchEvent(constants.SHARED_EVENT_TYPE.LOGOUT_RESULT, {\n                    success: payload.success,\n                    loginFrameHeight: payload.loginFrameHeight\n                }, registerLog);\n            }\n            break;\n        case constants.VOICE_EVENT_TYPE.CALL_STARTED:\n            if (validatePayload(payload, CallResult, constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, constants.VOICE_EVENT_TYPE.CALL_STARTED)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_STARTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        case constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED:\n            if (validatePayload(payload, CallResult, constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.QUEUED_CALL_STARTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        case constants.VOICE_EVENT_TYPE.CALL_CONNECTED:\n            if (validatePayload(payload, CallResult, constants.VOICE_ERROR_TYPE.CAN_NOT_START_THE_CALL, constants.VOICE_EVENT_TYPE.CALL_CONNECTED)) {\n                initAudioStats();\n                if (isSupervisorConnected) {\n                    const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                    const hangupPayload = await telephonyConnector.supervisorDisconnect();\n                    Validator.validateClassObject(hangupPayload, SupervisorHangupResult);\n                    isSupervisorConnected = false;\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP, hangupPayload, true /* ignoring registerLog for critical event*/);\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_CONNECTED, payload.call, true /* ignoring registerLog for critical event*/);\n                    break;\n                } \n                dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_CONNECTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        case constants.VOICE_EVENT_TYPE.HANGUP: {\n            if (validatePayload(payload, HangupResult, constants.VOICE_ERROR_TYPE.CAN_NOT_END_THE_CALL, constants.VOICE_EVENT_TYPE.HANGUP)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.HANGUP, payload.calls, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n        case constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED: {\n            if (validatePayload(payload, ParticipantResult, constants.VOICE_ERROR_TYPE.CAN_NOT_ADD_PARTICIPANT, constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED)) {\n                const { contact, initialCallHasEnded, callInfo, callAttributes, phoneNumber, callId, connectionId } = payload;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED, {\n                    contact,\n                    initialCallHasEnded,\n                    callInfo,\n                    callAttributes,\n                    phoneNumber,\n                    callId,\n                    connectionId\n                }, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n        case constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED: {\n            if (validatePayload(payload, ParticipantResult, constants.VOICE_ERROR_TYPE.CAN_NOT_CONNECT_PARTICIPANT, constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED)) {\n                const { initialCallHasEnded, callInfo, callAttributes, phoneNumber, callId, contact, connectionId } = payload;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED, {\n                    initialCallHasEnded,\n                    callInfo,\n                    callAttributes,\n                    phoneNumber,\n                    callId,\n                    contact,\n                    connectionId\n                }, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n        case constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED: {\n            // TODO: The logic here needs to be modified. Ideally firing CallResult with \n            // correct participantType should do the trick but we are firing PARTICIPANT_CONNECTED because of a bug W-8601645\n            // Once the bug is fixed, this code needs to be updated\n            if (validatePayload(payload, CallResult, constants.VOICE_ERROR_TYPE.CAN_NOT_HANGUP_PARTICIPANT, constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED)) { \n                const { call } = payload;\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const activeCallsResult = await telephonyConnector.getActiveCalls();\n                if (validatePayload(activeCallsResult, ActiveCallsResult)) {\n                    // when no more active calls, fire HANGUP\n                    const activeCalls = activeCallsResult.activeCalls;\n                    if (activeCalls.length === 0) {\n                        dispatchEvent(constants.VOICE_EVENT_TYPE.HANGUP, call, true /* ignoring registerLog for critical event*/);\n                    } else if (call &&\n                        call.callAttributes &&\n                        call.callType !== constants.CALL_TYPE.CONSULT &&\n                        call.callAttributes.participantType === constants.PARTICIPANT_TYPE.INITIAL_CALLER) {\n                        // when there is still transfer call, based on the state of the transfer call, fire PARTICIPANT_ADDED or PARTICIPANT_CONNECTED\n                        const transferCall = Object.values(activeCalls).filter((obj) => obj['callType'] === constants.CALL_TYPE.ADD_PARTICIPANT).pop();\n                        const event = transferCall.state === constants.CALL_STATE.TRANSFERRING ? constants.VOICE_EVENT_TYPE.PARTICIPANT_ADDED : constants.VOICE_EVENT_TYPE.PARTICIPANT_CONNECTED;\n                        dispatchEvent(event, {\n                            initialCallHasEnded : true\n                        }, true /* ignoring registerLog for critical event*/)\n                    } else {\n                        dispatchEvent(constants.VOICE_EVENT_TYPE.PARTICIPANT_REMOVED, {\n                            callId:  call? call.callId : null,\n                            connectionId:  call? call.connectionId : null,\n                            reason: call? call.reason : null\n                        }, true /* ignoring registerLog for critical event*/);\n                    }\n                }\n            }\n            break;\n        }\n        case constants.SHARED_EVENT_TYPE.MESSAGE:\n            dispatchEvent(constants.SHARED_EVENT_TYPE.MESSAGE, payload, registerLog);\n            break;\n        // TODO: Add validations for the ACW & Wrap up ended\n        case constants.VOICE_EVENT_TYPE.AFTER_CALL_WORK_STARTED:\n            dispatchEvent(constants.VOICE_EVENT_TYPE.AFTER_CALL_WORK_STARTED, payload, registerLog);\n            break;\n        case constants.VOICE_EVENT_TYPE.WRAP_UP_ENDED:\n            dispatchEvent(constants.VOICE_EVENT_TYPE.WRAP_UP_ENDED, payload, registerLog);\n            break;\n        /* This is only added to aid in connector development */\n        case constants.SHARED_EVENT_TYPE.REMOTE_CONTROLLER:\n            channelMessageHandler(payload);\n            break;\n        case constants.VOICE_EVENT_TYPE.MUTE_TOGGLE:\n            if (validatePayload(payload, MuteToggleResult, constants.VOICE_ERROR_TYPE.CAN_NOT_TOGGLE_MUTE, constants.VOICE_EVENT_TYPE.MUTE_TOGGLE)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.MUTE_TOGGLE, payload, registerLog);\n            }\n            break;\n        case constants.VOICE_EVENT_TYPE.HOLD_TOGGLE: {\n            const { isThirdPartyOnHold, isCustomerOnHold, calls, isCallMerged } = payload;\n            if (validatePayload(payload, HoldToggleResult, constants.VOICE_ERROR_TYPE.CAN_NOT_TOGGLE_HOLD, constants.VOICE_EVENT_TYPE.HOLD_TOGGLE)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold,\n                    calls,\n                    isCallMerged\n                }, registerLog);\n            }\n            break;\n        }\n        case constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE: {\n            const { isRecordingPaused,\n                contactId,\n                initialContactId,\n                instanceId,\n                region\n            } = payload;\n            if (validatePayload(payload, RecordingToggleResult, constants.VOICE_ERROR_TYPE.CAN_NOT_TOGGLE_RECORD, constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.RECORDING_TOGGLE, {\n                    isRecordingPaused,\n                    contactId,\n                    initialContactId,\n                    instanceId,\n                    region\n                }, registerLog);\n            }\n        break;\n        }\n        case constants.VOICE_EVENT_TYPE.PARTICIPANTS_SWAPPED: {\n            if (validatePayload(payload, HoldToggleResult, constants.VOICE_ERROR_TYPE.CAN_NOT_SWAP_PARTICIPANTS, constants.VOICE_EVENT_TYPE.PARTICIPANTS_SWAPPED)) {\n                const { isThirdPartyOnHold, isCustomerOnHold, calls } = payload;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold,\n                    calls\n                }, true /* ignoring registerLog for critical event*/);\n            }\n        }\n        break;\n        case constants.VOICE_EVENT_TYPE.PARTICIPANTS_CONFERENCED: {\n            if (validatePayload(payload, HoldToggleResult, constants.VOICE_ERROR_TYPE.CAN_NOT_CONFERENCE, constants.VOICE_EVENT_TYPE.PARTICIPANTS_CONFERENCED)) {\n                const { isThirdPartyOnHold, isCustomerOnHold, calls , isCallMerged} = payload;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold,\n                    isCallMerged,\n                    calls\n                }, true /* ignoring registerLog for critical event*/);\n            }\n        break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.CALL_UPDATED: {\n            if (validatePayload(payload, CallResult, constants.VOICE_ERROR_TYPE.CAN_NOT_UPDATE_CALL, constants.VOICE_EVENT_TYPE.CALL_UPDATED)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_UPDATED, payload, registerLog);\n            }\n            break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.UPDATE_AUDIO_STATS: {\n            if (validatePayload(payload, AudioStats)) {\n                if (payload.stats) {\n                    updateAudioStats(payload.stats);\n                    let audioStats;\n                    if (payload.callId) {\n                        audioStats = {stats: payload.stats, callId: payload.callId};\n                    } else {\n                        audioStats = {stats: payload.stats}\n                    }\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.AUDIO_STATS, {audioStats}, registerLog);\n                }\n                if (payload.isAudioStatsCompleted && payload.callId) {\n                    const callId = payload.callId;\n                    const mos = getMOS();\n                    dispatchEvent(constants.VOICE_EVENT_TYPE.UPDATE_AUDIO_STATS_COMPLETED, {callId, mos}, registerLog);\n                }\n            }\n            break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.SUPERVISOR_BARGED_IN: {\n            if (validatePayload(payload, SuperviseCallResult, constants.VOICE_ERROR_TYPE.CAN_NOT_BARGE_IN_SUPERVISOR, constants.VOICE_EVENT_TYPE.SUPERVISOR_BARGED_IN)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_BARGED_IN, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.CALL_BARGED_IN: {\n            if (validatePayload(payload, SupervisedCallInfo,  constants.SHARED_ERROR_TYPE.GENERIC_ERROR, constants.VOICE_EVENT_TYPE.CALL_BARGED_IN)) {\n                dispatchEvent(constants.VOICE_EVENT_TYPE.CALL_BARGED_IN, payload, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_STARTED: {\n            if (validatePayload(payload, SuperviseCallResult,  constants.VOICE_ERROR_TYPE.CAN_NOT_SUPERVISE_CALL, constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_STARTED)) {\n                isSupervisorConnected = true;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_STARTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_CONNECTED: {\n            if (validatePayload(payload, SuperviseCallResult,  constants.VOICE_ERROR_TYPE.CAN_NOT_SUPERVISE_CALL, constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_CONNECTED)) {\n                isSupervisorConnected = true;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_CALL_CONNECTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP: {\n            if (validatePayload(payload, SupervisorHangupResult,  constants.VOICE_ERROR_TYPE.CAN_NOT_DISCONNECT_SUPERVISOR, constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP)) {\n                isSupervisorConnected = false;\n                dispatchEvent(constants.VOICE_EVENT_TYPE.SUPERVISOR_HANGUP, payload.calls, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.SHARED_EVENT_TYPE.SET_AGENT_STATUS: {\n            if (validatePayload(payload, AgentStatusInfo,  constants.SHARED_ERROR_TYPE.CAN_NOT_SET_AGENT_STATUS, constants.SHARED_EVENT_TYPE.SET_AGENT_STATUS)) {\n                const statusId = payload.statusId;\n                dispatchEvent(constants.SHARED_EVENT_TYPE.SET_AGENT_STATUS, { statusId }, registerLog);\n            }\n            break;\n        }\n\n        case constants.VOICE_EVENT_TYPE.SHOW_TRANSFER_VIEW: {\n            dispatchEvent(constants.VOICE_EVENT_TYPE.SHOW_TRANSFER_VIEW, payload);\n            break;\n        }\n\n        case constants.SHARED_EVENT_TYPE.STORAGE_ACCESS_RESULT: {\n            if(validatePayload(payload, ShowStorageAccessResult, constants.SHARED_ERROR_TYPE.INVALID_STORAGE_ACCESS_RESULT, constants.SHARED_EVENT_TYPE.STORAGE_ACCESS_RESULT)) {\n                dispatchEvent(constants.SHARED_EVENT_TYPE.STORAGE_ACCESS_RESULT, payload);\n                if(payload.success) {\n                    if (payload.showLogin) {\n                        dispatchEvent(constants.SHARED_EVENT_TYPE.SHOW_LOGIN, {\n                            loginFrameHeight: payload.loginFrameHeight\n                        }, registerLog);\n                    } else {\n                        setConnectorReady();\n                    }   \n                }\n            }\n            break;\n        }\n        case constants.SHARED_EVENT_TYPE.AFTER_CONVERSATION_WORK_STARTED: {\n            if (validatePayload(payload, ACWInfo, constants.SHARED_ERROR_TYPE.INVALID_ACW_INFO, constants.SHARED_EVENT_TYPE.AFTER_CONVERSATION_WORK_STARTED)){\n                dispatchEvent(constants.SHARED_EVENT_TYPE.AFTER_CONVERSATION_WORK_STARTED, payload, registerLog);\n            }\n            break;\n        }\n        case constants.SHARED_EVENT_TYPE.AFTER_CONVERSATION_WORK_ENDED: {\n            if (validatePayload(payload, ACWInfo, constants.SHARED_ERROR_TYPE.INVALID_ACW_INFO, constants.SHARED_EVENT_TYPE.AFTER_CONVERSATION_WORK_ENDED)){\n                dispatchEvent(constants.SHARED_EVENT_TYPE.AFTER_CONVERSATION_WORK_ENDED, payload, registerLog);\n            }\n            break;\n        }\n\n        /**\n         * NOTE: SALESFORCE INTERNAL USE ONLY\n         */\n        case constants.SHARED_EVENT_TYPE.GET_AGENT_STATUS: {\n            if (validatePayload(payload, AgentVendorStatusInfo, constants.SHARED_ERROR_TYPE.CAN_NOT_GET_AGENT_STATUS, constants.SHARED_EVENT_TYPE.GET_AGENT_STATUS)) {\n                dispatchEvent(constants.SHARED_EVENT_TYPE.GET_AGENT_STATUS, payload, registerLog);\n            }\n            break;\n        }\n\n        /**\n         * NOTE: SALESFORCE INTERNAL USE ONLY\n         */\n        case constants.SHARED_EVENT_TYPE.STATE_CHANGE: {\n            if(validatePayload(payload, StateChangeResult, constants.SHARED_ERROR_TYPE.INVALID_STATE_CHANGE_RESULT, constants.SHARED_EVENT_TYPE.STATE_CHANGE)) {\n                dispatchEvent(constants.SHARED_EVENT_TYPE.STATE_CHANGE, payload);\n            }\n            break;\n        }\n    }\n}\n"],"names":["root","factory","exports","module","define","amd","this","e","d","v","k","__esModule","n","Object","r","t","unshift","length","pop","value","done","_regeneratorDefine","i","defineProperty","o","_invoke","enumerable","configurable","writable","_typeof","Symbol","iterator","call","next","isNaN","TypeError","OverloadYield","regenerator","regeneratorAsync","regeneratorAsyncGen","regeneratorAsyncIterator","regeneratorKeys","regeneratorValues","_regeneratorRuntime","m","getPrototypeOf","__proto__","constructor","displayName","name","a","stop","abrupt","delegateYield","resultName","finish","f","_t","p","prev","sent","wrap","w","reverse","isGeneratorFunction","mark","awrap","AsyncIterator","async","u","keys","values","prototype","runtime","regeneratorRuntime","accidentalStrictMode","globalThis","Function","regeneratorDefine","c","resolve","then","asyncIterator","Promise","_regenerator","toStringTag","Generator","create","y","G","bind","l","GeneratorFunction","GeneratorFunctionPrototype","setPrototypeOf","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","getter","definition","key","get","obj","prop","hasOwnProperty","toPropertyKey","toPrimitive","String","_defineProperty","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","SHARED_MESSAGE_TYPE","SETUP_CONNECTOR","CONNECTOR_READY","LOG","TELEPHONY_EVENT_DISPATCHED","SET_AGENT_STATUS","GET_AGENT_STATUS","LOGOUT","MESSAGE","DOWNLOAD_VENDOR_LOGS","AGENT_WORK_EVENT","GET_CONTACTS","VOICE_MESSAGE_TYPE","ACCEPT_CALL","DECLINE_CALL","END_CALL","MUTE","UNMUTE","HOLD","RESUME","DIAL","SEND_DIGITS","GET_PHONE_CONTACTS","SWAP_PARTICIPANTS","ADD_PARTICIPANT","CONFERENCE","PAUSE_RECORDING","RESUME_RECORDING","SUPERVISE_CALL","SUPERVISOR_BARGE_IN","SUPERVISOR_DISCONNECT","SET_AGENT_CONFIG","GET_SIGNED_RECORDING_URL","WRAP_UP_CALL","AGENT_AVAILABLE","GET_AUDIO_DEVICES","SHARED_EVENT_TYPE","ERROR","WARNING","INFO","LOGIN_STARTED","LOGIN_RESULT","LOGOUT_RESULT","SHOW_LOGIN","SET_AGENT_STATUS_RESULT","GET_AGENT_STATUS_RESULT","STATE_CHANGE","REMOTE_CONTROLLER","SHOW_STORAGE_ACCESS","STORAGE_ACCESS_RESULT","GET_CONTACTS_RESULT","AFTER_CONVERSATION_WORK_STARTED","AFTER_CONVERSATION_WORK_ENDED","VOICE_EVENT_TYPE","QUEUED_CALL_STARTED","CALL_STARTED","CALL_CONNECTED","CALL_FAILED","MUTE_TOGGLE","HOLD_TOGGLE","PHONE_CONTACTS","PARTICIPANT_ADDED","PARTICIPANT_CONNECTED","PARTICIPANT_REMOVED","RECORDING_TOGGLE","PARTICIPANTS_SWAPPED","PARTICIPANTS_CONFERENCED","SIGNED_RECORDING_URL","UPDATE_AUDIO_STATS","UPDATE_AUDIO_STATS_COMPLETED","SUPERVISOR_BARGED_IN","SUPERVISOR_CALL_STARTED","SUPERVISOR_CALL_CONNECTED","SUPERVISOR_HANGUP","CALL_BARGED_IN","WRAP_UP_ENDED","AFTER_CALL_WORK_STARTED","AGENT_CONFIG_UPDATED","AGENT_ERROR","HANGUP","SOFTPHONE_ERROR","SHOW_TRANSFER_VIEW","AUDIO_STATS","CALL_UPDATED","INFO_TYPE","CAN_NOT_ACCEPT_THE_CALL","SHARED_ERROR_TYPE","CUSTOM_ERROR","GENERIC_ERROR","AUTHENTICATION_ERROR","INVALID_AGENT_STATUS","CAN_NOT_GET_AGENT_STATUS","CAN_NOT_SET_AGENT_STATUS","LOGIN_REQUIRED","CAN_NOT_LOG_IN","CAN_NOT_LOG_OUT","INVALID_STATE_CHANGE_RESULT","INVALID_STORAGE_ACCESS_RESULT","INVALID_ACW_INFO","VOICE_ERROR_TYPE","CAN_NOT_DECLINE_THE_CALL","CAN_NOT_END_THE_CALL","CAN_NOT_HOLD_CALL","CAN_NOT_RESUME_CALL","CAN_NOT_MUTE_CALL","CAN_NOT_UNMUTE_CALL","CAN_NOT_TOGGLE_MUTE","CAN_NOT_TOGGLE_HOLD","CAN_NOT_TOGGLE_RECORD","INVALID_PARTICIPANT","INVALID_PARAMS","CAN_NOT_GET_PHONE_CONTACTS","CAN_NOT_SWAP_PARTICIPANTS","CAN_NOT_CONFERENCE","INVALID_DESTINATION","INVALID_PHONE_NUMBER","CAN_NOT_HANGUP_PARTICIPANT","CAN_NOT_ADD_PARTICIPANT","CAN_NOT_CONNECT_PARTICIPANT","CAN_NOT_START_THE_CALL","CAN_NOT_PAUSE_RECORDING","CAN_NOT_RESUME_RECORDING","CAN_NOT_SET_AGENT_CONFIG","CAN_NOT_SET_CAPABILITIES","CAN_NOT_UPDATE_PHONE_NUMBER","CAN_NOT_GET_SIGNED_RECORDING_URL","CAN_NOT_SUPERVISE_CALL","CAN_NOT_DISCONNECT_SUPERVISOR","CAN_NOT_BARGE_IN_SUPERVISOR","CAN_NOT_BARGE_IN_CALL","MICROPHONE_NOT_SHARED","UNSUPPORTED_BROWSER","USER_BUSY_ERROR","WEBRTC_ERROR","CAN_NOT_GET_AUDIO_DEVICES","CAN_NOT_UPDATE_CALL","AGENT_STATUS","ONLINE","OFFLINE","ACW","PARTICIPANT_TYPE","AGENT","INITIAL_CALLER","THIRD_PARTY","SUPERVISOR","CALL_TYPE","INBOUND","OUTBOUND","CALLBACK","TRANSFER","INTERNAL_CALL","DIALED_CALLBACK","CONSULT","CALL_SUBTYPE","PSTN","WEB_RTC","DIALER_TYPE","OUTBOUND_PREVIEW","NONE","CONTACT_TYPE","PHONEBOOK","QUEUE","PHONENUMBER","FLOW","CONTACT_LIST_TYPE","ALL","AGENT_CONFIG_TYPE","SHOW_AGENT_SETTINGS","PHONES","SELECTED_PHONE","SHARED_CAPABILITIES_TYPE","DEBUG_ENABLED","CONTACT_SEARCH","VENDOR_PROVIDED_AVAILABILITY","VENDOR_PROVIDED_QUEUE_WAIT_TIME","TRANSFER_TO_OMNI_FLOW","PENDING_STATUS_CHANGE","SFDC_PENDING_STATE","AUTO_ACCEPT_ENABLED","VOICE_CAPABILITIES_TYPE","RECORD","MERGE","SWAP","BLIND_TRANSFER","SUPERVISOR_LISTEN_IN","MOS","HAS_GET_EXTERNAL_SPEAKER","HAS_SET_EXTERNAL_SPEAKER","HAS_GET_EXTERNAL_MICROPHONE","HAS_SET_EXTERNAL_MICROPHONE","CAN_CONSULT","DIAL_PAD","HAS_HID_SUPPORT","PHONEBOOK_DISABLE","CALL_STATE","RINGING","CONNECTED","TRANSFERRING","TRANSFERRED","ENDED","PHONE_TYPE","DESK_PHONE","SOFT_PHONE","HANGUP_REASON","PHONE_CALL_ERROR","PHONE_CALL_ENDED","AGENT_AVAILABILITY","AVAILABLE","BUSY","REMOVE_PARTICIPANT_VARIANT","ALWAYS","NEVER","ALWAYS_EXCEPT_ON_HOLD","LOG_LEVEL","LOG_SOURCE","SYSTEM","PARTNER","CONTACTS_FILTER_TYPES","CONTACT","DIRECTORY","WORK_EVENT","ASSIGNED","ACCEPTED","DECLINED","COMPLETED","CLOSED","PAUSED","UNPAUSED","DIAL_OPTIONS","HANGUP_STATUS","MISSED_AGENT","FAILED_CONNECT_AGENT","FAILED_CONNECT_CUSTOMER","CALLBACK_MISSED_OR_REJECTED","CONNECTOR_CONFIG_EXPOSED_FIELDS","CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH","CONNECTOR_CONFIG_EXCEPTION_FIELDS","_defineProperties","_createClass","_classCallCheck","_getPrototypeOf","_setPrototypeOf","_inherits","_isNativeReflectConstruct","Boolean","valueOf","Reflect","construct","_wrapNativeSuper","Map","toString","indexOf","has","set","Wrapper","push","MAX_LOGS_SIZE","_strify","JSON","stringify","LOGS_SIZE","logs","log","logMessage","logLevel","logSource","Error","constants","logStr","Date","toISOString","concat","join","_log","getLogs","parse","downloadLogs","data","fileName","document","dataStr","file","Blob","type","createElement","blobURL","URL","createObjectURL","download","href","body","appendChild","click","removeChild","revokeObjectURL","downloadData","getTime","ReferenceError","audioStatus","channelPort","vendorConnector","isSupervisorConnected","Constants","_objectSpread","CustomError","_Error","_ref","_this","labelName","namespace","message","_callSuper","Validator","validateString","Phone","_ref2","number","validateEnum","HidDevice","_ref3","productId","vendorId","validateNumber","MuteToggleResult","_ref4","isMuted","isGlobal","ActiveCallsResult","_ref5","_ref5$activeCalls","activeCalls","forEach","activeCall","validateClassObject","PhoneCall","AudioDevicesResult","_ref6","_ref6$audioDevices","audioDevices","SharedCapabilitiesResult","_ref7","_ref7$debugEnabled","debugEnabled","_ref7$hasContactSearc","hasContactSearch","_ref7$hasAgentAvailab","hasAgentAvailability","_ref7$hasQueueWaitTim","hasQueueWaitTime","_ref7$hasTransferToOm","hasTransferToOmniFlow","_ref7$hasPendingStatu","hasPendingStatusChange","_ref7$hasSFDCPendingS","hasSFDCPendingState","_ref7$hasAutoAcceptEn","hasAutoAcceptEnabled","validateBoolean","VoiceCapabilitiesResult","_ref8","_ref8$hasMute","hasMute","_ref8$hasRecord","hasRecord","_ref8$hasMerge","hasMerge","_ref8$hasSwap","hasSwap","_ref8$hasBlindTransfe","hasBlindTransfer","_ref8$hasSignedRecord","hasSignedRecordingUrl","_ref8$supportsMos","supportsMos","_ref8$hasSupervisorLi","hasSupervisorListenIn","_ref8$hasSupervisorBa","hasSupervisorBargeIn","_ref8$hasPhoneBook","hasPhoneBook","_ref8$hasGetExternalS","hasGetExternalSpeakerDeviceSetting","_ref8$hasSetExternalS","hasSetExternalSpeakerDeviceSetting","_ref8$hasGetExternalM","hasGetExternalMicrophoneDeviceSetting","_ref8$hasSetExternalM","hasSetExternalMicrophoneDeviceSetting","_ref8$canConsult","canConsult","_ref8$isDialPadDisabl","isDialPadDisabled","_ref8$isHidSupported","isHidSupported","_ref8$isPhoneBookDisa","isPhoneBookDisabled","AgentConfigResult","_ref9","_ref9$phones","phones","_ref9$selectedPhone","selectedPhone","_ref9$speakerDeviceId","speakerDeviceId","_ref9$microphoneDevic","microphoneDeviceId","Array","AgentConfig","_ref0","hidDeviceInfo","RecordingToggleResult","_ref1","isRecordingPaused","_ref1$contactId","contactId","_ref1$initialContactI","initialContactId","_ref1$instanceId","instanceId","_ref1$region","region","ParticipantResult","_ref10","initialCallHasEnded","callInfo","callAttributes","phoneNumber","callId","_ref10$contact","contact","connectionId","CallInfo","ContactsResult","_ref11","_ref11$contacts","contacts","_ref11$contactTypes","contactTypes","Contact","filterType","PhoneContactsResult","_ContactsResult","_ref12","_ref12$contacts","_ref12$contactTypes","CallResult","_ref13","HangupResult","_ref14","calls","HoldToggleResult","_ref15","isThirdPartyOnHold","isCustomerOnHold","isCallMerged","SignedRecordingUrlResult","_ref16","success","url","duration","InitResult","_ref17","_ref17$showLogin","showLogin","_ref17$loginFrameHeig","loginFrameHeight","_ref17$isSilentLogin","isSilentLogin","_ref17$showStorageAcc","showStorageAccess","DialOptions","_ref18","_ref18$isCallback","isCallback","_ref18$isConsultCall","isConsultCall","GenericResult","_ref19","SetAgentStateResult","_GenericResult","_ref20","_this2","_ref20$isStatusSyncNe","isStatusSyncNeeded","SetAgentConfigResult","_GenericResult2","_ref21","_this3","_ref21$isSystemEvent","isSystemEvent","LogoutResult","_ref22","_ref22$loginFrameHeig","_ref23","_ref23$callStateTimes","callStateTimestamp","isOnHold","_ref23$isMuted","_ref23$isRecordingPau","initialCallId","_ref23$queueId","queueId","_ref23$queueName","queueName","_ref23$queueTimestamp","queueTimestamp","_ref23$isSoftphoneCal","isSoftphoneCall","_ref23$acceptEnabled","acceptEnabled","_ref23$declineEnabled","declineEnabled","_ref23$muteEnabled","muteEnabled","_ref23$swapEnabled","swapEnabled","_ref23$conferenceEnab","conferenceEnabled","_ref23$holdEnabled","holdEnabled","_ref23$recordEnabled","recordEnabled","_ref23$addCallerEnabl","addCallerEnabled","_ref23$extensionEnabl","extensionEnabled","_ref23$isReplayable","isReplayable","_ref23$isBargeable","isBargeable","isExternalTransfer","_ref23$showMuteButton","showMuteButton","_ref23$showRecordButt","showRecordButton","_ref23$showAddCallerB","showAddCallerButton","_ref23$showAddBlindTr","showAddBlindTransferButton","_ref23$showMergeButto","showMergeButton","_ref23$showSwapButton","showSwapButton","_ref23$removeParticip","removeParticipantVariant","_ref23$additionalFiel","additionalFields","_ref23$isMultiParty","isMultiParty","_ref23$isHIDCall","isHIDCall","_ref23$endCallDisable","endCallDisabled","_ref23$renderContactI","renderContactId","validateDate","_ref24","id","listType","prefix","extension","endpointARN","queue","availability","recordId","description","queueWaitTime","PhoneCallAttributes","_ref25","voiceCallId","participantType","_ref25$dialerType","dialerType","parentId","_ref25$hasSupervisorB","hasSupervisorBargedIn","_ref25$isAutoMergeOn","isAutoMergeOn","_ref25$isConsultCall","_ref26","callType","callSubtype","state","reason","closeCallOnError","agentStatus","agentARN","fromContact","toContact","TelephonyConnector","dialOptions","digits","filter","call1","call2","parentCall","isBlindTransfer","config","recordingUrl","vendorCallKey","supervisedCallInfo","VendorConnector","agentWork","statusInfo","enqueueNextState","logMessageToVendor","payload","workItemId","enumValues","RegExp","test","object","className","isValid","_len","classNames","_key","AgentWork","_ref27","workId","workEvent","AgentStatusInfo","_ref28","statusId","statusApiName","statusName","AgentVendorStatusInfo","_ref29","statusType","StateChangeResult","_ref30","newVendorStateInfo","oldVendorStateInfo","SupervisedCallInfo","_ref31","from","to","supervisorName","isBargedIn","AudioStats","_ref32","stats","isAudioStatsCompleted","audioStatsElement","AudioStatsElement","_ref33","inputChannelStats","outputChannelStats","StatsInfo","_ref34","packetsCount","packetsLost","jitterBufferMillis","roundTripTimeMillis","statsCount","SuperviseCallResult","_ref35","SupervisorHangupResult","_HangupResult","_ref36","ShowStorageAccessResult","_ref37","_ref37$success","_ref37$showLogin","_ref37$loginFrameHeig","ContactsFilter","param","_param$contains","contains","_param$limit","limit","_param$offset","offset","_param$types","types","_step","_iterator","_createForOfIteratorHelper","s","err","ACWInfo","_ref38","agentWorkId","getMOSByStream","streamType","avgStats","getAvgStats","effectiveLatency","R","enableMos","getMOS","inputChannelMOS","ouputChannelMOS","Math","min","initAudioStats","updateAudioStats","statsArray","getErrorType","sanitizePayload","isArray","sanitizedPayload","element","property","getErrorMessage","dispatchEventLog","eventType","isError","postMessage","dispatchEvent","registerLog","telephonyEventType","telephonyEventPayload","dispatchError","errorType","error","console","dispatchCustomError","customError","dispatchInfo","info","setConnectorReady","_setConnectorReady","_callee","_capabilities","telephonyConnector","agentConfigResult","sharedCapabilitiesResult","voiceCapabilitiesResult","activeCallsResult","_context","getTelephonyConnector","getAgentConfig","getSharedCapabilities","getVoiceCapabilities","getActiveCalls","agentConfig","capabilities","callInProgress","channelMessageHandler","_x","_channelMessageHandler","_callee2","hangupPayload","_telephonyConnector","_payload","_call","_telephonyConnector2","_payload2","_telephonyConnector3","_payload3","_telephonyConnector4","_payload4","_telephonyConnector5","_payload5","_telephonyConnector6","_payload6","_payload7","_payload8","_telephonyConnector7","_payload9","_call2","_telephonyConnector8","_telephonyConnector9","_payload0","_payload1","_contacts","_telephonyConnector0","_payload10","_telephonyConnector1","_payload11","_telephonyConnector10","_payload12","_telephonyConnector11","_payload13","_telephonyConnector12","_payload14","_payload15","_success","_telephonyConnector14","_activeCallsResult","_activeCalls","_call3","shouldReplay","isSupervisorCall","_telephonyConnector15","result","_telephonyConnector16","_result","_message$data","_callId","_telephonyConnector17","_result2","signedRecordingUrlResult","_message$data2","_payload16","_telephonyConnector18","_result3","_telephonyConnector19","_result4","_telephonyConnector20","_result5","_message$data$agentWo","_t2","_t3","_t4","_t5","_t6","_t7","_t8","_t9","_t0","_t1","_t10","_t11","_t12","_t13","_t14","_t16","_t18","_t19","_t20","_t21","_t22","_t23","_t24","_t25","_t26","_t27","_t28","_t29","_t31","_t32","_t33","_context2","toLowerCase","supervisorDisconnect","acceptCall","messagetype","additionalInfo","declineCall","endCall","mute","publishEvent","unmute","hold","resume","setAgentStatus","getAgentStatus","params","dial","sendDigits","getPhoneContacts","map","getContacts","swap","callToHold","callToResume","conference","addParticipant","pauseRecording","resumeRecording","logout","handleMessage","wrapUpCall","isAvailable","isReplayedCall","setAgentConfig","validateClassObjects","setIsSystemEvent","getAudioDevices","getSignedRecordingUrl","superviseCall","supervisorBargeIn","onAgentWorkEvent","windowMessageHandler","_x2","_windowMessageHandler","_callee3","sfDomain","originUrl","_t34","_t35","_t36","_context3","origin","protocol","hostname","ports","onmessage","exposedConnectorConfig","connectorConfig","init","window","removeEventListener","startsWith","includes","validatePayload","payloadType","initializeConnector","connector","addEventListener","publishLog","publishError","_x3","_publishEvent","_callee4","_ref3$registerLog","_initialCallHasEnded","_callInfo","_callAttributes","_phoneNumber","_callId2","_contact","_connectionId","_telephonyConnector21","_isThirdPartyOnHold","_isCustomerOnHold","_calls","_isThirdPartyOnHold2","_isCustomerOnHold2","_calls2","_isCallMerged","audioStats","_callId3","mos","_t37","_context4"],"sourceRoot":""}